---
description: 
globs: 
alwaysApply: true
---
# Cursorへの指示ルール (Project Rules for Cursor)

## 概要
このプロジェクトにおけるコード生成・修正は、以下のルールに厳密に従ってください。  
※なお、これらのルールは React 19 と Next.js 15.2.4（またはそれ以降の最新安定版）に完全準拠した実装を目的としています。

## 必須バージョンとアーキテクチャ
- **ターゲットバージョン:**  
  **React 19**（2024年12月5日リリース済み）と **Next.js 15.2.4 (またはそれ以降の最新安定版)** の規約、API、ベストプラクティスを最優先してください。  
  ※バージョン指定は `package.json` の設定と一貫させ、コードの互換性を確保してください。
- **Next.js アーキテクチャ:**  
  **App Router** を前提として実装してください。  
  **Pages Router** のパターンは使用せず、最新の Next.js アーキテクチャに沿った実装を行ってください。

## コンポーネント実装方針
- **デフォルト:**  
  **Server Components** として実装してください。  
  サーバーサイドでレンダリングを完結させ、クライアントサイドの JavaScript を最小限にすることを目指します。
- **Client Components:**  
  クライアントサイドでのインタラクション（`useState`、`useEffect`、イベントハンドラなど）やブラウザAPIへのアクセスが必要な場合にのみ、ファイルの先頭に `"use client"` ディレクティブを記述し、**Client Components** としてください。

## 主要な機能とAPIの利用

- **データフェッチ (Next.js Server Components):**  
  サーバーコンポーネント内でのデータ取得には、Next.js 標準の `fetch` API を利用し、キャッシュ戦略（`cache`、`next.revalidate`）やタグベースの再検証（`tags`）を適切に活用してください。  
  ※「Workspace API」という用語は使用せず、公式のデータフェッチ手法に準拠してください。

- **データミューテーション (React 19 Server Actions):**  
  - フォーム送信やデータの更新・削除などの操作は、原則として **Server Actions** を使用して実装してください。  
  - **重要:**  
    Server Action を定義する関数の直前、または Server Action を含むファイルの先頭に必ず `"use server"` ディレクティブを記述してください。  
    ※※**注意:** サーバーコンポーネント自体には `"use server"` は不要です。クライアントコンポーネントの冒頭に記載してはいけません。

- **React 19 フック:**  
  - Server Actions を利用する際は、`useActionState`、`useFormStatus`、`useOptimistic` などのフックを状態管理や UI フィードバックのために適切に活用してください。  
  - データや Promise を扱う際は、新しい `use` フックの利用も検討してください。  
  - 非同期処理やデータ取得に伴うローディング状態の表示には `<Suspense>` を活用してください。  
  ※ これらのフックは新機能であり、実験的な性質を含む可能性があるため、将来のアップデートで仕様変更が生じる場合があることを留意してください。

- **メタデータ (Next.js):**  
  ページの `<head>` 内の情報 (title、description など) は、`generateMetadata` 関数などの **Metadata API** を使用して定義してください。

## コーディングスタイルと品質
- **規約:**  
  プロジェクトで設定されている ESLint や Prettier のルールに従ってください。  
  ※ ESLint の設定ファイルはプロジェクト直下の `.eslintrc.js`、Prettier の設定は `.prettierrc` を参照してください。
- **非推奨パターン:**  
  クラスコンポーネントや古いライフサイクルメソッドなど、現在のバージョンで非推奨となった API は使用しないでください。

## その他
- 指示があいまいな場合は、上記のルールおよび最新の公式ドキュメント（React, Next.js）に基づいて最適な実装を提案してください。
- 生成したコードが上記のルールにどのように準拠しているか、必要に応じて説明を加えてください。
