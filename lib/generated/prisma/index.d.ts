
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Avatar
 * 
 */
export type Avatar = $Result.DefaultSelection<Prisma.$AvatarPayload>
/**
 * Model TestNameOption
 * 
 */
export type TestNameOption = $Result.DefaultSelection<Prisma.$TestNameOptionPayload>
/**
 * Model ReasonOption
 * 
 */
export type ReasonOption = $Result.DefaultSelection<Prisma.$ReasonOptionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Goal
 * 
 */
export type Goal = $Result.DefaultSelection<Prisma.$GoalPayload>
/**
 * Model Textbook
 * 
 */
export type Textbook = $Result.DefaultSelection<Prisma.$TextbookPayload>
/**
 * Model Chapter
 * 
 */
export type Chapter = $Result.DefaultSelection<Prisma.$ChapterPayload>
/**
 * Model Section
 * 
 */
export type Section = $Result.DefaultSelection<Prisma.$SectionPayload>
/**
 * Model Question
 * 
 */
export type Question = $Result.DefaultSelection<Prisma.$QuestionPayload>
/**
 * Model LearningPlan
 * 
 */
export type LearningPlan = $Result.DefaultSelection<Prisma.$LearningPlanPayload>
/**
 * Model LearningTask
 * 
 */
export type LearningTask = $Result.DefaultSelection<Prisma.$LearningTaskPayload>
/**
 * Model QuestionAttemptLog
 * 
 */
export type QuestionAttemptLog = $Result.DefaultSelection<Prisma.$QuestionAttemptLogPayload>
/**
 * Model PlanRevision
 * 
 */
export type PlanRevision = $Result.DefaultSelection<Prisma.$PlanRevisionPayload>
/**
 * Model DailyReflection
 * 
 */
export type DailyReflection = $Result.DefaultSelection<Prisma.$DailyReflectionPayload>
/**
 * Model WeeklyReflection
 * 
 */
export type WeeklyReflection = $Result.DefaultSelection<Prisma.$WeeklyReflectionPayload>
/**
 * Model ValuePrompt
 * 
 */
export type ValuePrompt = $Result.DefaultSelection<Prisma.$ValuePromptPayload>
/**
 * Model ReflectionBadge
 * 
 */
export type ReflectionBadge = $Result.DefaultSelection<Prisma.$ReflectionBadgePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Avatars
 * const avatars = await prisma.avatar.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Avatars
   * const avatars = await prisma.avatar.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.avatar`: Exposes CRUD operations for the **Avatar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Avatars
    * const avatars = await prisma.avatar.findMany()
    * ```
    */
  get avatar(): Prisma.AvatarDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.testNameOption`: Exposes CRUD operations for the **TestNameOption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TestNameOptions
    * const testNameOptions = await prisma.testNameOption.findMany()
    * ```
    */
  get testNameOption(): Prisma.TestNameOptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reasonOption`: Exposes CRUD operations for the **ReasonOption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReasonOptions
    * const reasonOptions = await prisma.reasonOption.findMany()
    * ```
    */
  get reasonOption(): Prisma.ReasonOptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.goal`: Exposes CRUD operations for the **Goal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Goals
    * const goals = await prisma.goal.findMany()
    * ```
    */
  get goal(): Prisma.GoalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.textbook`: Exposes CRUD operations for the **Textbook** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Textbooks
    * const textbooks = await prisma.textbook.findMany()
    * ```
    */
  get textbook(): Prisma.TextbookDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chapter`: Exposes CRUD operations for the **Chapter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chapters
    * const chapters = await prisma.chapter.findMany()
    * ```
    */
  get chapter(): Prisma.ChapterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.section`: Exposes CRUD operations for the **Section** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sections
    * const sections = await prisma.section.findMany()
    * ```
    */
  get section(): Prisma.SectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.learningPlan`: Exposes CRUD operations for the **LearningPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LearningPlans
    * const learningPlans = await prisma.learningPlan.findMany()
    * ```
    */
  get learningPlan(): Prisma.LearningPlanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.learningTask`: Exposes CRUD operations for the **LearningTask** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LearningTasks
    * const learningTasks = await prisma.learningTask.findMany()
    * ```
    */
  get learningTask(): Prisma.LearningTaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionAttemptLog`: Exposes CRUD operations for the **QuestionAttemptLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionAttemptLogs
    * const questionAttemptLogs = await prisma.questionAttemptLog.findMany()
    * ```
    */
  get questionAttemptLog(): Prisma.QuestionAttemptLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.planRevision`: Exposes CRUD operations for the **PlanRevision** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlanRevisions
    * const planRevisions = await prisma.planRevision.findMany()
    * ```
    */
  get planRevision(): Prisma.PlanRevisionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dailyReflection`: Exposes CRUD operations for the **DailyReflection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DailyReflections
    * const dailyReflections = await prisma.dailyReflection.findMany()
    * ```
    */
  get dailyReflection(): Prisma.DailyReflectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.weeklyReflection`: Exposes CRUD operations for the **WeeklyReflection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WeeklyReflections
    * const weeklyReflections = await prisma.weeklyReflection.findMany()
    * ```
    */
  get weeklyReflection(): Prisma.WeeklyReflectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.valuePrompt`: Exposes CRUD operations for the **ValuePrompt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ValuePrompts
    * const valuePrompts = await prisma.valuePrompt.findMany()
    * ```
    */
  get valuePrompt(): Prisma.ValuePromptDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reflectionBadge`: Exposes CRUD operations for the **ReflectionBadge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReflectionBadges
    * const reflectionBadges = await prisma.reflectionBadge.findMany()
    * ```
    */
  get reflectionBadge(): Prisma.ReflectionBadgeDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Avatar: 'Avatar',
    TestNameOption: 'TestNameOption',
    ReasonOption: 'ReasonOption',
    User: 'User',
    Goal: 'Goal',
    Textbook: 'Textbook',
    Chapter: 'Chapter',
    Section: 'Section',
    Question: 'Question',
    LearningPlan: 'LearningPlan',
    LearningTask: 'LearningTask',
    QuestionAttemptLog: 'QuestionAttemptLog',
    PlanRevision: 'PlanRevision',
    DailyReflection: 'DailyReflection',
    WeeklyReflection: 'WeeklyReflection',
    ValuePrompt: 'ValuePrompt',
    ReflectionBadge: 'ReflectionBadge'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "avatar" | "testNameOption" | "reasonOption" | "user" | "goal" | "textbook" | "chapter" | "section" | "question" | "learningPlan" | "learningTask" | "questionAttemptLog" | "planRevision" | "dailyReflection" | "weeklyReflection" | "valuePrompt" | "reflectionBadge"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Avatar: {
        payload: Prisma.$AvatarPayload<ExtArgs>
        fields: Prisma.AvatarFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AvatarFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AvatarFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>
          }
          findFirst: {
            args: Prisma.AvatarFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AvatarFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>
          }
          findMany: {
            args: Prisma.AvatarFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>[]
          }
          create: {
            args: Prisma.AvatarCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>
          }
          createMany: {
            args: Prisma.AvatarCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AvatarCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>[]
          }
          delete: {
            args: Prisma.AvatarDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>
          }
          update: {
            args: Prisma.AvatarUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>
          }
          deleteMany: {
            args: Prisma.AvatarDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AvatarUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AvatarUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>[]
          }
          upsert: {
            args: Prisma.AvatarUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>
          }
          aggregate: {
            args: Prisma.AvatarAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAvatar>
          }
          groupBy: {
            args: Prisma.AvatarGroupByArgs<ExtArgs>
            result: $Utils.Optional<AvatarGroupByOutputType>[]
          }
          count: {
            args: Prisma.AvatarCountArgs<ExtArgs>
            result: $Utils.Optional<AvatarCountAggregateOutputType> | number
          }
        }
      }
      TestNameOption: {
        payload: Prisma.$TestNameOptionPayload<ExtArgs>
        fields: Prisma.TestNameOptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TestNameOptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestNameOptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TestNameOptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestNameOptionPayload>
          }
          findFirst: {
            args: Prisma.TestNameOptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestNameOptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TestNameOptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestNameOptionPayload>
          }
          findMany: {
            args: Prisma.TestNameOptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestNameOptionPayload>[]
          }
          create: {
            args: Prisma.TestNameOptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestNameOptionPayload>
          }
          createMany: {
            args: Prisma.TestNameOptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TestNameOptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestNameOptionPayload>[]
          }
          delete: {
            args: Prisma.TestNameOptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestNameOptionPayload>
          }
          update: {
            args: Prisma.TestNameOptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestNameOptionPayload>
          }
          deleteMany: {
            args: Prisma.TestNameOptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TestNameOptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TestNameOptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestNameOptionPayload>[]
          }
          upsert: {
            args: Prisma.TestNameOptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestNameOptionPayload>
          }
          aggregate: {
            args: Prisma.TestNameOptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTestNameOption>
          }
          groupBy: {
            args: Prisma.TestNameOptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestNameOptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TestNameOptionCountArgs<ExtArgs>
            result: $Utils.Optional<TestNameOptionCountAggregateOutputType> | number
          }
        }
      }
      ReasonOption: {
        payload: Prisma.$ReasonOptionPayload<ExtArgs>
        fields: Prisma.ReasonOptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReasonOptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReasonOptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReasonOptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReasonOptionPayload>
          }
          findFirst: {
            args: Prisma.ReasonOptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReasonOptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReasonOptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReasonOptionPayload>
          }
          findMany: {
            args: Prisma.ReasonOptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReasonOptionPayload>[]
          }
          create: {
            args: Prisma.ReasonOptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReasonOptionPayload>
          }
          createMany: {
            args: Prisma.ReasonOptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReasonOptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReasonOptionPayload>[]
          }
          delete: {
            args: Prisma.ReasonOptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReasonOptionPayload>
          }
          update: {
            args: Prisma.ReasonOptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReasonOptionPayload>
          }
          deleteMany: {
            args: Prisma.ReasonOptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReasonOptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReasonOptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReasonOptionPayload>[]
          }
          upsert: {
            args: Prisma.ReasonOptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReasonOptionPayload>
          }
          aggregate: {
            args: Prisma.ReasonOptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReasonOption>
          }
          groupBy: {
            args: Prisma.ReasonOptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReasonOptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReasonOptionCountArgs<ExtArgs>
            result: $Utils.Optional<ReasonOptionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Goal: {
        payload: Prisma.$GoalPayload<ExtArgs>
        fields: Prisma.GoalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          findFirst: {
            args: Prisma.GoalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          findMany: {
            args: Prisma.GoalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>[]
          }
          create: {
            args: Prisma.GoalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          createMany: {
            args: Prisma.GoalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GoalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>[]
          }
          delete: {
            args: Prisma.GoalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          update: {
            args: Prisma.GoalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          deleteMany: {
            args: Prisma.GoalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GoalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GoalUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>[]
          }
          upsert: {
            args: Prisma.GoalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          aggregate: {
            args: Prisma.GoalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGoal>
          }
          groupBy: {
            args: Prisma.GoalGroupByArgs<ExtArgs>
            result: $Utils.Optional<GoalGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoalCountArgs<ExtArgs>
            result: $Utils.Optional<GoalCountAggregateOutputType> | number
          }
        }
      }
      Textbook: {
        payload: Prisma.$TextbookPayload<ExtArgs>
        fields: Prisma.TextbookFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TextbookFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TextbookPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TextbookFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TextbookPayload>
          }
          findFirst: {
            args: Prisma.TextbookFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TextbookPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TextbookFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TextbookPayload>
          }
          findMany: {
            args: Prisma.TextbookFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TextbookPayload>[]
          }
          create: {
            args: Prisma.TextbookCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TextbookPayload>
          }
          createMany: {
            args: Prisma.TextbookCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TextbookCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TextbookPayload>[]
          }
          delete: {
            args: Prisma.TextbookDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TextbookPayload>
          }
          update: {
            args: Prisma.TextbookUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TextbookPayload>
          }
          deleteMany: {
            args: Prisma.TextbookDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TextbookUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TextbookUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TextbookPayload>[]
          }
          upsert: {
            args: Prisma.TextbookUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TextbookPayload>
          }
          aggregate: {
            args: Prisma.TextbookAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTextbook>
          }
          groupBy: {
            args: Prisma.TextbookGroupByArgs<ExtArgs>
            result: $Utils.Optional<TextbookGroupByOutputType>[]
          }
          count: {
            args: Prisma.TextbookCountArgs<ExtArgs>
            result: $Utils.Optional<TextbookCountAggregateOutputType> | number
          }
        }
      }
      Chapter: {
        payload: Prisma.$ChapterPayload<ExtArgs>
        fields: Prisma.ChapterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChapterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChapterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          findFirst: {
            args: Prisma.ChapterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChapterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          findMany: {
            args: Prisma.ChapterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>[]
          }
          create: {
            args: Prisma.ChapterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          createMany: {
            args: Prisma.ChapterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChapterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>[]
          }
          delete: {
            args: Prisma.ChapterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          update: {
            args: Prisma.ChapterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          deleteMany: {
            args: Prisma.ChapterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChapterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChapterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>[]
          }
          upsert: {
            args: Prisma.ChapterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          aggregate: {
            args: Prisma.ChapterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChapter>
          }
          groupBy: {
            args: Prisma.ChapterGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChapterGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChapterCountArgs<ExtArgs>
            result: $Utils.Optional<ChapterCountAggregateOutputType> | number
          }
        }
      }
      Section: {
        payload: Prisma.$SectionPayload<ExtArgs>
        fields: Prisma.SectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          findFirst: {
            args: Prisma.SectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          findMany: {
            args: Prisma.SectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>[]
          }
          create: {
            args: Prisma.SectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          createMany: {
            args: Prisma.SectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>[]
          }
          delete: {
            args: Prisma.SectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          update: {
            args: Prisma.SectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          deleteMany: {
            args: Prisma.SectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>[]
          }
          upsert: {
            args: Prisma.SectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          aggregate: {
            args: Prisma.SectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSection>
          }
          groupBy: {
            args: Prisma.SectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SectionCountArgs<ExtArgs>
            result: $Utils.Optional<SectionCountAggregateOutputType> | number
          }
        }
      }
      Question: {
        payload: Prisma.$QuestionPayload<ExtArgs>
        fields: Prisma.QuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findFirst: {
            args: Prisma.QuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findMany: {
            args: Prisma.QuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          create: {
            args: Prisma.QuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          createMany: {
            args: Prisma.QuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          delete: {
            args: Prisma.QuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          update: {
            args: Prisma.QuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          upsert: {
            args: Prisma.QuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.QuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      LearningPlan: {
        payload: Prisma.$LearningPlanPayload<ExtArgs>
        fields: Prisma.LearningPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LearningPlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LearningPlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningPlanPayload>
          }
          findFirst: {
            args: Prisma.LearningPlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LearningPlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningPlanPayload>
          }
          findMany: {
            args: Prisma.LearningPlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningPlanPayload>[]
          }
          create: {
            args: Prisma.LearningPlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningPlanPayload>
          }
          createMany: {
            args: Prisma.LearningPlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LearningPlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningPlanPayload>[]
          }
          delete: {
            args: Prisma.LearningPlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningPlanPayload>
          }
          update: {
            args: Prisma.LearningPlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningPlanPayload>
          }
          deleteMany: {
            args: Prisma.LearningPlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LearningPlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LearningPlanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningPlanPayload>[]
          }
          upsert: {
            args: Prisma.LearningPlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningPlanPayload>
          }
          aggregate: {
            args: Prisma.LearningPlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLearningPlan>
          }
          groupBy: {
            args: Prisma.LearningPlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<LearningPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.LearningPlanCountArgs<ExtArgs>
            result: $Utils.Optional<LearningPlanCountAggregateOutputType> | number
          }
        }
      }
      LearningTask: {
        payload: Prisma.$LearningTaskPayload<ExtArgs>
        fields: Prisma.LearningTaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LearningTaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningTaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LearningTaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningTaskPayload>
          }
          findFirst: {
            args: Prisma.LearningTaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningTaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LearningTaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningTaskPayload>
          }
          findMany: {
            args: Prisma.LearningTaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningTaskPayload>[]
          }
          create: {
            args: Prisma.LearningTaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningTaskPayload>
          }
          createMany: {
            args: Prisma.LearningTaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LearningTaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningTaskPayload>[]
          }
          delete: {
            args: Prisma.LearningTaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningTaskPayload>
          }
          update: {
            args: Prisma.LearningTaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningTaskPayload>
          }
          deleteMany: {
            args: Prisma.LearningTaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LearningTaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LearningTaskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningTaskPayload>[]
          }
          upsert: {
            args: Prisma.LearningTaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LearningTaskPayload>
          }
          aggregate: {
            args: Prisma.LearningTaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLearningTask>
          }
          groupBy: {
            args: Prisma.LearningTaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<LearningTaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.LearningTaskCountArgs<ExtArgs>
            result: $Utils.Optional<LearningTaskCountAggregateOutputType> | number
          }
        }
      }
      QuestionAttemptLog: {
        payload: Prisma.$QuestionAttemptLogPayload<ExtArgs>
        fields: Prisma.QuestionAttemptLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionAttemptLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAttemptLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionAttemptLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAttemptLogPayload>
          }
          findFirst: {
            args: Prisma.QuestionAttemptLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAttemptLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionAttemptLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAttemptLogPayload>
          }
          findMany: {
            args: Prisma.QuestionAttemptLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAttemptLogPayload>[]
          }
          create: {
            args: Prisma.QuestionAttemptLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAttemptLogPayload>
          }
          createMany: {
            args: Prisma.QuestionAttemptLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionAttemptLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAttemptLogPayload>[]
          }
          delete: {
            args: Prisma.QuestionAttemptLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAttemptLogPayload>
          }
          update: {
            args: Prisma.QuestionAttemptLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAttemptLogPayload>
          }
          deleteMany: {
            args: Prisma.QuestionAttemptLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionAttemptLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionAttemptLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAttemptLogPayload>[]
          }
          upsert: {
            args: Prisma.QuestionAttemptLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAttemptLogPayload>
          }
          aggregate: {
            args: Prisma.QuestionAttemptLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionAttemptLog>
          }
          groupBy: {
            args: Prisma.QuestionAttemptLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionAttemptLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionAttemptLogCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionAttemptLogCountAggregateOutputType> | number
          }
        }
      }
      PlanRevision: {
        payload: Prisma.$PlanRevisionPayload<ExtArgs>
        fields: Prisma.PlanRevisionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlanRevisionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanRevisionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlanRevisionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanRevisionPayload>
          }
          findFirst: {
            args: Prisma.PlanRevisionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanRevisionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlanRevisionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanRevisionPayload>
          }
          findMany: {
            args: Prisma.PlanRevisionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanRevisionPayload>[]
          }
          create: {
            args: Prisma.PlanRevisionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanRevisionPayload>
          }
          createMany: {
            args: Prisma.PlanRevisionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlanRevisionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanRevisionPayload>[]
          }
          delete: {
            args: Prisma.PlanRevisionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanRevisionPayload>
          }
          update: {
            args: Prisma.PlanRevisionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanRevisionPayload>
          }
          deleteMany: {
            args: Prisma.PlanRevisionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlanRevisionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlanRevisionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanRevisionPayload>[]
          }
          upsert: {
            args: Prisma.PlanRevisionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanRevisionPayload>
          }
          aggregate: {
            args: Prisma.PlanRevisionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlanRevision>
          }
          groupBy: {
            args: Prisma.PlanRevisionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlanRevisionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlanRevisionCountArgs<ExtArgs>
            result: $Utils.Optional<PlanRevisionCountAggregateOutputType> | number
          }
        }
      }
      DailyReflection: {
        payload: Prisma.$DailyReflectionPayload<ExtArgs>
        fields: Prisma.DailyReflectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DailyReflectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReflectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DailyReflectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReflectionPayload>
          }
          findFirst: {
            args: Prisma.DailyReflectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReflectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DailyReflectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReflectionPayload>
          }
          findMany: {
            args: Prisma.DailyReflectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReflectionPayload>[]
          }
          create: {
            args: Prisma.DailyReflectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReflectionPayload>
          }
          createMany: {
            args: Prisma.DailyReflectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DailyReflectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReflectionPayload>[]
          }
          delete: {
            args: Prisma.DailyReflectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReflectionPayload>
          }
          update: {
            args: Prisma.DailyReflectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReflectionPayload>
          }
          deleteMany: {
            args: Prisma.DailyReflectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DailyReflectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DailyReflectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReflectionPayload>[]
          }
          upsert: {
            args: Prisma.DailyReflectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReflectionPayload>
          }
          aggregate: {
            args: Prisma.DailyReflectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDailyReflection>
          }
          groupBy: {
            args: Prisma.DailyReflectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<DailyReflectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.DailyReflectionCountArgs<ExtArgs>
            result: $Utils.Optional<DailyReflectionCountAggregateOutputType> | number
          }
        }
      }
      WeeklyReflection: {
        payload: Prisma.$WeeklyReflectionPayload<ExtArgs>
        fields: Prisma.WeeklyReflectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WeeklyReflectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyReflectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WeeklyReflectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyReflectionPayload>
          }
          findFirst: {
            args: Prisma.WeeklyReflectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyReflectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WeeklyReflectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyReflectionPayload>
          }
          findMany: {
            args: Prisma.WeeklyReflectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyReflectionPayload>[]
          }
          create: {
            args: Prisma.WeeklyReflectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyReflectionPayload>
          }
          createMany: {
            args: Prisma.WeeklyReflectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WeeklyReflectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyReflectionPayload>[]
          }
          delete: {
            args: Prisma.WeeklyReflectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyReflectionPayload>
          }
          update: {
            args: Prisma.WeeklyReflectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyReflectionPayload>
          }
          deleteMany: {
            args: Prisma.WeeklyReflectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WeeklyReflectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WeeklyReflectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyReflectionPayload>[]
          }
          upsert: {
            args: Prisma.WeeklyReflectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklyReflectionPayload>
          }
          aggregate: {
            args: Prisma.WeeklyReflectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWeeklyReflection>
          }
          groupBy: {
            args: Prisma.WeeklyReflectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<WeeklyReflectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.WeeklyReflectionCountArgs<ExtArgs>
            result: $Utils.Optional<WeeklyReflectionCountAggregateOutputType> | number
          }
        }
      }
      ValuePrompt: {
        payload: Prisma.$ValuePromptPayload<ExtArgs>
        fields: Prisma.ValuePromptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ValuePromptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuePromptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ValuePromptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuePromptPayload>
          }
          findFirst: {
            args: Prisma.ValuePromptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuePromptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ValuePromptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuePromptPayload>
          }
          findMany: {
            args: Prisma.ValuePromptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuePromptPayload>[]
          }
          create: {
            args: Prisma.ValuePromptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuePromptPayload>
          }
          createMany: {
            args: Prisma.ValuePromptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ValuePromptCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuePromptPayload>[]
          }
          delete: {
            args: Prisma.ValuePromptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuePromptPayload>
          }
          update: {
            args: Prisma.ValuePromptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuePromptPayload>
          }
          deleteMany: {
            args: Prisma.ValuePromptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ValuePromptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ValuePromptUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuePromptPayload>[]
          }
          upsert: {
            args: Prisma.ValuePromptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuePromptPayload>
          }
          aggregate: {
            args: Prisma.ValuePromptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateValuePrompt>
          }
          groupBy: {
            args: Prisma.ValuePromptGroupByArgs<ExtArgs>
            result: $Utils.Optional<ValuePromptGroupByOutputType>[]
          }
          count: {
            args: Prisma.ValuePromptCountArgs<ExtArgs>
            result: $Utils.Optional<ValuePromptCountAggregateOutputType> | number
          }
        }
      }
      ReflectionBadge: {
        payload: Prisma.$ReflectionBadgePayload<ExtArgs>
        fields: Prisma.ReflectionBadgeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReflectionBadgeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionBadgePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReflectionBadgeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionBadgePayload>
          }
          findFirst: {
            args: Prisma.ReflectionBadgeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionBadgePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReflectionBadgeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionBadgePayload>
          }
          findMany: {
            args: Prisma.ReflectionBadgeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionBadgePayload>[]
          }
          create: {
            args: Prisma.ReflectionBadgeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionBadgePayload>
          }
          createMany: {
            args: Prisma.ReflectionBadgeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReflectionBadgeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionBadgePayload>[]
          }
          delete: {
            args: Prisma.ReflectionBadgeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionBadgePayload>
          }
          update: {
            args: Prisma.ReflectionBadgeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionBadgePayload>
          }
          deleteMany: {
            args: Prisma.ReflectionBadgeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReflectionBadgeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReflectionBadgeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionBadgePayload>[]
          }
          upsert: {
            args: Prisma.ReflectionBadgeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionBadgePayload>
          }
          aggregate: {
            args: Prisma.ReflectionBadgeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReflectionBadge>
          }
          groupBy: {
            args: Prisma.ReflectionBadgeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReflectionBadgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReflectionBadgeCountArgs<ExtArgs>
            result: $Utils.Optional<ReflectionBadgeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    avatar?: AvatarOmit
    testNameOption?: TestNameOptionOmit
    reasonOption?: ReasonOptionOmit
    user?: UserOmit
    goal?: GoalOmit
    textbook?: TextbookOmit
    chapter?: ChapterOmit
    section?: SectionOmit
    question?: QuestionOmit
    learningPlan?: LearningPlanOmit
    learningTask?: LearningTaskOmit
    questionAttemptLog?: QuestionAttemptLogOmit
    planRevision?: PlanRevisionOmit
    dailyReflection?: DailyReflectionOmit
    weeklyReflection?: WeeklyReflectionOmit
    valuePrompt?: ValuePromptOmit
    reflectionBadge?: ReflectionBadgeOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AvatarCountOutputType
   */

  export type AvatarCountOutputType = {
    users: number
  }

  export type AvatarCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | AvatarCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * AvatarCountOutputType without action
   */
  export type AvatarCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvatarCountOutputType
     */
    select?: AvatarCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AvatarCountOutputType without action
   */
  export type AvatarCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    goals: number
    learningPlans: number
    attemptLogs: number
    dailyReflections: number
    weeklyReflections: number
    valuePrompts: number
    reflectionBadges: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goals?: boolean | UserCountOutputTypeCountGoalsArgs
    learningPlans?: boolean | UserCountOutputTypeCountLearningPlansArgs
    attemptLogs?: boolean | UserCountOutputTypeCountAttemptLogsArgs
    dailyReflections?: boolean | UserCountOutputTypeCountDailyReflectionsArgs
    weeklyReflections?: boolean | UserCountOutputTypeCountWeeklyReflectionsArgs
    valuePrompts?: boolean | UserCountOutputTypeCountValuePromptsArgs
    reflectionBadges?: boolean | UserCountOutputTypeCountReflectionBadgesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLearningPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LearningPlanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAttemptLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionAttemptLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDailyReflectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyReflectionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWeeklyReflectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeeklyReflectionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountValuePromptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValuePromptWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReflectionBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReflectionBadgeWhereInput
  }


  /**
   * Count Type GoalCountOutputType
   */

  export type GoalCountOutputType = {
    learningPlans: number
  }

  export type GoalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    learningPlans?: boolean | GoalCountOutputTypeCountLearningPlansArgs
  }

  // Custom InputTypes
  /**
   * GoalCountOutputType without action
   */
  export type GoalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalCountOutputType
     */
    select?: GoalCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GoalCountOutputType without action
   */
  export type GoalCountOutputTypeCountLearningPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LearningPlanWhereInput
  }


  /**
   * Count Type TextbookCountOutputType
   */

  export type TextbookCountOutputType = {
    chapters: number
  }

  export type TextbookCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chapters?: boolean | TextbookCountOutputTypeCountChaptersArgs
  }

  // Custom InputTypes
  /**
   * TextbookCountOutputType without action
   */
  export type TextbookCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TextbookCountOutputType
     */
    select?: TextbookCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TextbookCountOutputType without action
   */
  export type TextbookCountOutputTypeCountChaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChapterWhereInput
  }


  /**
   * Count Type ChapterCountOutputType
   */

  export type ChapterCountOutputType = {
    sections: number
  }

  export type ChapterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sections?: boolean | ChapterCountOutputTypeCountSectionsArgs
  }

  // Custom InputTypes
  /**
   * ChapterCountOutputType without action
   */
  export type ChapterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterCountOutputType
     */
    select?: ChapterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChapterCountOutputType without action
   */
  export type ChapterCountOutputTypeCountSectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionWhereInput
  }


  /**
   * Count Type SectionCountOutputType
   */

  export type SectionCountOutputType = {
    questions: number
  }

  export type SectionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | SectionCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes
  /**
   * SectionCountOutputType without action
   */
  export type SectionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionCountOutputType
     */
    select?: SectionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SectionCountOutputType without action
   */
  export type SectionCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }


  /**
   * Count Type QuestionCountOutputType
   */

  export type QuestionCountOutputType = {
    learningTasks: number
    attemptLogs: number
  }

  export type QuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    learningTasks?: boolean | QuestionCountOutputTypeCountLearningTasksArgs
    attemptLogs?: boolean | QuestionCountOutputTypeCountAttemptLogsArgs
  }

  // Custom InputTypes
  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCountOutputType
     */
    select?: QuestionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountLearningTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LearningTaskWhereInput
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountAttemptLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionAttemptLogWhereInput
  }


  /**
   * Count Type LearningPlanCountOutputType
   */

  export type LearningPlanCountOutputType = {
    learningTasks: number
    planRevisions: number
  }

  export type LearningPlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    learningTasks?: boolean | LearningPlanCountOutputTypeCountLearningTasksArgs
    planRevisions?: boolean | LearningPlanCountOutputTypeCountPlanRevisionsArgs
  }

  // Custom InputTypes
  /**
   * LearningPlanCountOutputType without action
   */
  export type LearningPlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningPlanCountOutputType
     */
    select?: LearningPlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LearningPlanCountOutputType without action
   */
  export type LearningPlanCountOutputTypeCountLearningTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LearningTaskWhereInput
  }

  /**
   * LearningPlanCountOutputType without action
   */
  export type LearningPlanCountOutputTypeCountPlanRevisionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanRevisionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Avatar
   */

  export type AggregateAvatar = {
    _count: AvatarCountAggregateOutputType | null
    _min: AvatarMinAggregateOutputType | null
    _max: AvatarMaxAggregateOutputType | null
  }

  export type AvatarMinAggregateOutputType = {
    id: string | null
    label: string | null
    imagePath: string | null
  }

  export type AvatarMaxAggregateOutputType = {
    id: string | null
    label: string | null
    imagePath: string | null
  }

  export type AvatarCountAggregateOutputType = {
    id: number
    label: number
    imagePath: number
    _all: number
  }


  export type AvatarMinAggregateInputType = {
    id?: true
    label?: true
    imagePath?: true
  }

  export type AvatarMaxAggregateInputType = {
    id?: true
    label?: true
    imagePath?: true
  }

  export type AvatarCountAggregateInputType = {
    id?: true
    label?: true
    imagePath?: true
    _all?: true
  }

  export type AvatarAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Avatar to aggregate.
     */
    where?: AvatarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avatars to fetch.
     */
    orderBy?: AvatarOrderByWithRelationInput | AvatarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AvatarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avatars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avatars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Avatars
    **/
    _count?: true | AvatarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AvatarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AvatarMaxAggregateInputType
  }

  export type GetAvatarAggregateType<T extends AvatarAggregateArgs> = {
        [P in keyof T & keyof AggregateAvatar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAvatar[P]>
      : GetScalarType<T[P], AggregateAvatar[P]>
  }




  export type AvatarGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AvatarWhereInput
    orderBy?: AvatarOrderByWithAggregationInput | AvatarOrderByWithAggregationInput[]
    by: AvatarScalarFieldEnum[] | AvatarScalarFieldEnum
    having?: AvatarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AvatarCountAggregateInputType | true
    _min?: AvatarMinAggregateInputType
    _max?: AvatarMaxAggregateInputType
  }

  export type AvatarGroupByOutputType = {
    id: string
    label: string
    imagePath: string
    _count: AvatarCountAggregateOutputType | null
    _min: AvatarMinAggregateOutputType | null
    _max: AvatarMaxAggregateOutputType | null
  }

  type GetAvatarGroupByPayload<T extends AvatarGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AvatarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AvatarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AvatarGroupByOutputType[P]>
            : GetScalarType<T[P], AvatarGroupByOutputType[P]>
        }
      >
    >


  export type AvatarSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    imagePath?: boolean
    users?: boolean | Avatar$usersArgs<ExtArgs>
    _count?: boolean | AvatarCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["avatar"]>

  export type AvatarSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    imagePath?: boolean
  }, ExtArgs["result"]["avatar"]>

  export type AvatarSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    imagePath?: boolean
  }, ExtArgs["result"]["avatar"]>

  export type AvatarSelectScalar = {
    id?: boolean
    label?: boolean
    imagePath?: boolean
  }

  export type AvatarOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "label" | "imagePath", ExtArgs["result"]["avatar"]>
  export type AvatarInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Avatar$usersArgs<ExtArgs>
    _count?: boolean | AvatarCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AvatarIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AvatarIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AvatarPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Avatar"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      label: string
      imagePath: string
    }, ExtArgs["result"]["avatar"]>
    composites: {}
  }

  type AvatarGetPayload<S extends boolean | null | undefined | AvatarDefaultArgs> = $Result.GetResult<Prisma.$AvatarPayload, S>

  type AvatarCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AvatarFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AvatarCountAggregateInputType | true
    }

  export interface AvatarDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Avatar'], meta: { name: 'Avatar' } }
    /**
     * Find zero or one Avatar that matches the filter.
     * @param {AvatarFindUniqueArgs} args - Arguments to find a Avatar
     * @example
     * // Get one Avatar
     * const avatar = await prisma.avatar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AvatarFindUniqueArgs>(args: SelectSubset<T, AvatarFindUniqueArgs<ExtArgs>>): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Avatar that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AvatarFindUniqueOrThrowArgs} args - Arguments to find a Avatar
     * @example
     * // Get one Avatar
     * const avatar = await prisma.avatar.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AvatarFindUniqueOrThrowArgs>(args: SelectSubset<T, AvatarFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Avatar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarFindFirstArgs} args - Arguments to find a Avatar
     * @example
     * // Get one Avatar
     * const avatar = await prisma.avatar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AvatarFindFirstArgs>(args?: SelectSubset<T, AvatarFindFirstArgs<ExtArgs>>): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Avatar that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarFindFirstOrThrowArgs} args - Arguments to find a Avatar
     * @example
     * // Get one Avatar
     * const avatar = await prisma.avatar.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AvatarFindFirstOrThrowArgs>(args?: SelectSubset<T, AvatarFindFirstOrThrowArgs<ExtArgs>>): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Avatars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Avatars
     * const avatars = await prisma.avatar.findMany()
     * 
     * // Get first 10 Avatars
     * const avatars = await prisma.avatar.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const avatarWithIdOnly = await prisma.avatar.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AvatarFindManyArgs>(args?: SelectSubset<T, AvatarFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Avatar.
     * @param {AvatarCreateArgs} args - Arguments to create a Avatar.
     * @example
     * // Create one Avatar
     * const Avatar = await prisma.avatar.create({
     *   data: {
     *     // ... data to create a Avatar
     *   }
     * })
     * 
     */
    create<T extends AvatarCreateArgs>(args: SelectSubset<T, AvatarCreateArgs<ExtArgs>>): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Avatars.
     * @param {AvatarCreateManyArgs} args - Arguments to create many Avatars.
     * @example
     * // Create many Avatars
     * const avatar = await prisma.avatar.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AvatarCreateManyArgs>(args?: SelectSubset<T, AvatarCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Avatars and returns the data saved in the database.
     * @param {AvatarCreateManyAndReturnArgs} args - Arguments to create many Avatars.
     * @example
     * // Create many Avatars
     * const avatar = await prisma.avatar.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Avatars and only return the `id`
     * const avatarWithIdOnly = await prisma.avatar.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AvatarCreateManyAndReturnArgs>(args?: SelectSubset<T, AvatarCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Avatar.
     * @param {AvatarDeleteArgs} args - Arguments to delete one Avatar.
     * @example
     * // Delete one Avatar
     * const Avatar = await prisma.avatar.delete({
     *   where: {
     *     // ... filter to delete one Avatar
     *   }
     * })
     * 
     */
    delete<T extends AvatarDeleteArgs>(args: SelectSubset<T, AvatarDeleteArgs<ExtArgs>>): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Avatar.
     * @param {AvatarUpdateArgs} args - Arguments to update one Avatar.
     * @example
     * // Update one Avatar
     * const avatar = await prisma.avatar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AvatarUpdateArgs>(args: SelectSubset<T, AvatarUpdateArgs<ExtArgs>>): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Avatars.
     * @param {AvatarDeleteManyArgs} args - Arguments to filter Avatars to delete.
     * @example
     * // Delete a few Avatars
     * const { count } = await prisma.avatar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AvatarDeleteManyArgs>(args?: SelectSubset<T, AvatarDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Avatars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Avatars
     * const avatar = await prisma.avatar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AvatarUpdateManyArgs>(args: SelectSubset<T, AvatarUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Avatars and returns the data updated in the database.
     * @param {AvatarUpdateManyAndReturnArgs} args - Arguments to update many Avatars.
     * @example
     * // Update many Avatars
     * const avatar = await prisma.avatar.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Avatars and only return the `id`
     * const avatarWithIdOnly = await prisma.avatar.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AvatarUpdateManyAndReturnArgs>(args: SelectSubset<T, AvatarUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Avatar.
     * @param {AvatarUpsertArgs} args - Arguments to update or create a Avatar.
     * @example
     * // Update or create a Avatar
     * const avatar = await prisma.avatar.upsert({
     *   create: {
     *     // ... data to create a Avatar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Avatar we want to update
     *   }
     * })
     */
    upsert<T extends AvatarUpsertArgs>(args: SelectSubset<T, AvatarUpsertArgs<ExtArgs>>): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Avatars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarCountArgs} args - Arguments to filter Avatars to count.
     * @example
     * // Count the number of Avatars
     * const count = await prisma.avatar.count({
     *   where: {
     *     // ... the filter for the Avatars we want to count
     *   }
     * })
    **/
    count<T extends AvatarCountArgs>(
      args?: Subset<T, AvatarCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AvatarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Avatar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AvatarAggregateArgs>(args: Subset<T, AvatarAggregateArgs>): Prisma.PrismaPromise<GetAvatarAggregateType<T>>

    /**
     * Group by Avatar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AvatarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AvatarGroupByArgs['orderBy'] }
        : { orderBy?: AvatarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AvatarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAvatarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Avatar model
   */
  readonly fields: AvatarFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Avatar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AvatarClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Avatar$usersArgs<ExtArgs> = {}>(args?: Subset<T, Avatar$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Avatar model
   */
  interface AvatarFieldRefs {
    readonly id: FieldRef<"Avatar", 'String'>
    readonly label: FieldRef<"Avatar", 'String'>
    readonly imagePath: FieldRef<"Avatar", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Avatar findUnique
   */
  export type AvatarFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * Filter, which Avatar to fetch.
     */
    where: AvatarWhereUniqueInput
  }

  /**
   * Avatar findUniqueOrThrow
   */
  export type AvatarFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * Filter, which Avatar to fetch.
     */
    where: AvatarWhereUniqueInput
  }

  /**
   * Avatar findFirst
   */
  export type AvatarFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * Filter, which Avatar to fetch.
     */
    where?: AvatarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avatars to fetch.
     */
    orderBy?: AvatarOrderByWithRelationInput | AvatarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Avatars.
     */
    cursor?: AvatarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avatars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avatars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Avatars.
     */
    distinct?: AvatarScalarFieldEnum | AvatarScalarFieldEnum[]
  }

  /**
   * Avatar findFirstOrThrow
   */
  export type AvatarFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * Filter, which Avatar to fetch.
     */
    where?: AvatarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avatars to fetch.
     */
    orderBy?: AvatarOrderByWithRelationInput | AvatarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Avatars.
     */
    cursor?: AvatarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avatars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avatars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Avatars.
     */
    distinct?: AvatarScalarFieldEnum | AvatarScalarFieldEnum[]
  }

  /**
   * Avatar findMany
   */
  export type AvatarFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * Filter, which Avatars to fetch.
     */
    where?: AvatarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avatars to fetch.
     */
    orderBy?: AvatarOrderByWithRelationInput | AvatarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Avatars.
     */
    cursor?: AvatarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avatars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avatars.
     */
    skip?: number
    distinct?: AvatarScalarFieldEnum | AvatarScalarFieldEnum[]
  }

  /**
   * Avatar create
   */
  export type AvatarCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * The data needed to create a Avatar.
     */
    data: XOR<AvatarCreateInput, AvatarUncheckedCreateInput>
  }

  /**
   * Avatar createMany
   */
  export type AvatarCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Avatars.
     */
    data: AvatarCreateManyInput | AvatarCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Avatar createManyAndReturn
   */
  export type AvatarCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * The data used to create many Avatars.
     */
    data: AvatarCreateManyInput | AvatarCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Avatar update
   */
  export type AvatarUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * The data needed to update a Avatar.
     */
    data: XOR<AvatarUpdateInput, AvatarUncheckedUpdateInput>
    /**
     * Choose, which Avatar to update.
     */
    where: AvatarWhereUniqueInput
  }

  /**
   * Avatar updateMany
   */
  export type AvatarUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Avatars.
     */
    data: XOR<AvatarUpdateManyMutationInput, AvatarUncheckedUpdateManyInput>
    /**
     * Filter which Avatars to update
     */
    where?: AvatarWhereInput
    /**
     * Limit how many Avatars to update.
     */
    limit?: number
  }

  /**
   * Avatar updateManyAndReturn
   */
  export type AvatarUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * The data used to update Avatars.
     */
    data: XOR<AvatarUpdateManyMutationInput, AvatarUncheckedUpdateManyInput>
    /**
     * Filter which Avatars to update
     */
    where?: AvatarWhereInput
    /**
     * Limit how many Avatars to update.
     */
    limit?: number
  }

  /**
   * Avatar upsert
   */
  export type AvatarUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * The filter to search for the Avatar to update in case it exists.
     */
    where: AvatarWhereUniqueInput
    /**
     * In case the Avatar found by the `where` argument doesn't exist, create a new Avatar with this data.
     */
    create: XOR<AvatarCreateInput, AvatarUncheckedCreateInput>
    /**
     * In case the Avatar was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AvatarUpdateInput, AvatarUncheckedUpdateInput>
  }

  /**
   * Avatar delete
   */
  export type AvatarDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * Filter which Avatar to delete.
     */
    where: AvatarWhereUniqueInput
  }

  /**
   * Avatar deleteMany
   */
  export type AvatarDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Avatars to delete
     */
    where?: AvatarWhereInput
    /**
     * Limit how many Avatars to delete.
     */
    limit?: number
  }

  /**
   * Avatar.users
   */
  export type Avatar$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Avatar without action
   */
  export type AvatarDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
  }


  /**
   * Model TestNameOption
   */

  export type AggregateTestNameOption = {
    _count: TestNameOptionCountAggregateOutputType | null
    _min: TestNameOptionMinAggregateOutputType | null
    _max: TestNameOptionMaxAggregateOutputType | null
  }

  export type TestNameOptionMinAggregateOutputType = {
    id: string | null
    label: string | null
    category: string | null
    isCustom: boolean | null
  }

  export type TestNameOptionMaxAggregateOutputType = {
    id: string | null
    label: string | null
    category: string | null
    isCustom: boolean | null
  }

  export type TestNameOptionCountAggregateOutputType = {
    id: number
    label: number
    category: number
    isCustom: number
    _all: number
  }


  export type TestNameOptionMinAggregateInputType = {
    id?: true
    label?: true
    category?: true
    isCustom?: true
  }

  export type TestNameOptionMaxAggregateInputType = {
    id?: true
    label?: true
    category?: true
    isCustom?: true
  }

  export type TestNameOptionCountAggregateInputType = {
    id?: true
    label?: true
    category?: true
    isCustom?: true
    _all?: true
  }

  export type TestNameOptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestNameOption to aggregate.
     */
    where?: TestNameOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestNameOptions to fetch.
     */
    orderBy?: TestNameOptionOrderByWithRelationInput | TestNameOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TestNameOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestNameOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestNameOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TestNameOptions
    **/
    _count?: true | TestNameOptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestNameOptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestNameOptionMaxAggregateInputType
  }

  export type GetTestNameOptionAggregateType<T extends TestNameOptionAggregateArgs> = {
        [P in keyof T & keyof AggregateTestNameOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTestNameOption[P]>
      : GetScalarType<T[P], AggregateTestNameOption[P]>
  }




  export type TestNameOptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestNameOptionWhereInput
    orderBy?: TestNameOptionOrderByWithAggregationInput | TestNameOptionOrderByWithAggregationInput[]
    by: TestNameOptionScalarFieldEnum[] | TestNameOptionScalarFieldEnum
    having?: TestNameOptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestNameOptionCountAggregateInputType | true
    _min?: TestNameOptionMinAggregateInputType
    _max?: TestNameOptionMaxAggregateInputType
  }

  export type TestNameOptionGroupByOutputType = {
    id: string
    label: string
    category: string
    isCustom: boolean
    _count: TestNameOptionCountAggregateOutputType | null
    _min: TestNameOptionMinAggregateOutputType | null
    _max: TestNameOptionMaxAggregateOutputType | null
  }

  type GetTestNameOptionGroupByPayload<T extends TestNameOptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestNameOptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestNameOptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestNameOptionGroupByOutputType[P]>
            : GetScalarType<T[P], TestNameOptionGroupByOutputType[P]>
        }
      >
    >


  export type TestNameOptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    category?: boolean
    isCustom?: boolean
  }, ExtArgs["result"]["testNameOption"]>

  export type TestNameOptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    category?: boolean
    isCustom?: boolean
  }, ExtArgs["result"]["testNameOption"]>

  export type TestNameOptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    category?: boolean
    isCustom?: boolean
  }, ExtArgs["result"]["testNameOption"]>

  export type TestNameOptionSelectScalar = {
    id?: boolean
    label?: boolean
    category?: boolean
    isCustom?: boolean
  }

  export type TestNameOptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "label" | "category" | "isCustom", ExtArgs["result"]["testNameOption"]>

  export type $TestNameOptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TestNameOption"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      label: string
      category: string
      isCustom: boolean
    }, ExtArgs["result"]["testNameOption"]>
    composites: {}
  }

  type TestNameOptionGetPayload<S extends boolean | null | undefined | TestNameOptionDefaultArgs> = $Result.GetResult<Prisma.$TestNameOptionPayload, S>

  type TestNameOptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TestNameOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TestNameOptionCountAggregateInputType | true
    }

  export interface TestNameOptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TestNameOption'], meta: { name: 'TestNameOption' } }
    /**
     * Find zero or one TestNameOption that matches the filter.
     * @param {TestNameOptionFindUniqueArgs} args - Arguments to find a TestNameOption
     * @example
     * // Get one TestNameOption
     * const testNameOption = await prisma.testNameOption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TestNameOptionFindUniqueArgs>(args: SelectSubset<T, TestNameOptionFindUniqueArgs<ExtArgs>>): Prisma__TestNameOptionClient<$Result.GetResult<Prisma.$TestNameOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TestNameOption that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TestNameOptionFindUniqueOrThrowArgs} args - Arguments to find a TestNameOption
     * @example
     * // Get one TestNameOption
     * const testNameOption = await prisma.testNameOption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TestNameOptionFindUniqueOrThrowArgs>(args: SelectSubset<T, TestNameOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TestNameOptionClient<$Result.GetResult<Prisma.$TestNameOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TestNameOption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestNameOptionFindFirstArgs} args - Arguments to find a TestNameOption
     * @example
     * // Get one TestNameOption
     * const testNameOption = await prisma.testNameOption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TestNameOptionFindFirstArgs>(args?: SelectSubset<T, TestNameOptionFindFirstArgs<ExtArgs>>): Prisma__TestNameOptionClient<$Result.GetResult<Prisma.$TestNameOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TestNameOption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestNameOptionFindFirstOrThrowArgs} args - Arguments to find a TestNameOption
     * @example
     * // Get one TestNameOption
     * const testNameOption = await prisma.testNameOption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TestNameOptionFindFirstOrThrowArgs>(args?: SelectSubset<T, TestNameOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TestNameOptionClient<$Result.GetResult<Prisma.$TestNameOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TestNameOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestNameOptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TestNameOptions
     * const testNameOptions = await prisma.testNameOption.findMany()
     * 
     * // Get first 10 TestNameOptions
     * const testNameOptions = await prisma.testNameOption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const testNameOptionWithIdOnly = await prisma.testNameOption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TestNameOptionFindManyArgs>(args?: SelectSubset<T, TestNameOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestNameOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TestNameOption.
     * @param {TestNameOptionCreateArgs} args - Arguments to create a TestNameOption.
     * @example
     * // Create one TestNameOption
     * const TestNameOption = await prisma.testNameOption.create({
     *   data: {
     *     // ... data to create a TestNameOption
     *   }
     * })
     * 
     */
    create<T extends TestNameOptionCreateArgs>(args: SelectSubset<T, TestNameOptionCreateArgs<ExtArgs>>): Prisma__TestNameOptionClient<$Result.GetResult<Prisma.$TestNameOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TestNameOptions.
     * @param {TestNameOptionCreateManyArgs} args - Arguments to create many TestNameOptions.
     * @example
     * // Create many TestNameOptions
     * const testNameOption = await prisma.testNameOption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TestNameOptionCreateManyArgs>(args?: SelectSubset<T, TestNameOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TestNameOptions and returns the data saved in the database.
     * @param {TestNameOptionCreateManyAndReturnArgs} args - Arguments to create many TestNameOptions.
     * @example
     * // Create many TestNameOptions
     * const testNameOption = await prisma.testNameOption.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TestNameOptions and only return the `id`
     * const testNameOptionWithIdOnly = await prisma.testNameOption.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TestNameOptionCreateManyAndReturnArgs>(args?: SelectSubset<T, TestNameOptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestNameOptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TestNameOption.
     * @param {TestNameOptionDeleteArgs} args - Arguments to delete one TestNameOption.
     * @example
     * // Delete one TestNameOption
     * const TestNameOption = await prisma.testNameOption.delete({
     *   where: {
     *     // ... filter to delete one TestNameOption
     *   }
     * })
     * 
     */
    delete<T extends TestNameOptionDeleteArgs>(args: SelectSubset<T, TestNameOptionDeleteArgs<ExtArgs>>): Prisma__TestNameOptionClient<$Result.GetResult<Prisma.$TestNameOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TestNameOption.
     * @param {TestNameOptionUpdateArgs} args - Arguments to update one TestNameOption.
     * @example
     * // Update one TestNameOption
     * const testNameOption = await prisma.testNameOption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TestNameOptionUpdateArgs>(args: SelectSubset<T, TestNameOptionUpdateArgs<ExtArgs>>): Prisma__TestNameOptionClient<$Result.GetResult<Prisma.$TestNameOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TestNameOptions.
     * @param {TestNameOptionDeleteManyArgs} args - Arguments to filter TestNameOptions to delete.
     * @example
     * // Delete a few TestNameOptions
     * const { count } = await prisma.testNameOption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TestNameOptionDeleteManyArgs>(args?: SelectSubset<T, TestNameOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TestNameOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestNameOptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TestNameOptions
     * const testNameOption = await prisma.testNameOption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TestNameOptionUpdateManyArgs>(args: SelectSubset<T, TestNameOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TestNameOptions and returns the data updated in the database.
     * @param {TestNameOptionUpdateManyAndReturnArgs} args - Arguments to update many TestNameOptions.
     * @example
     * // Update many TestNameOptions
     * const testNameOption = await prisma.testNameOption.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TestNameOptions and only return the `id`
     * const testNameOptionWithIdOnly = await prisma.testNameOption.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TestNameOptionUpdateManyAndReturnArgs>(args: SelectSubset<T, TestNameOptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestNameOptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TestNameOption.
     * @param {TestNameOptionUpsertArgs} args - Arguments to update or create a TestNameOption.
     * @example
     * // Update or create a TestNameOption
     * const testNameOption = await prisma.testNameOption.upsert({
     *   create: {
     *     // ... data to create a TestNameOption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TestNameOption we want to update
     *   }
     * })
     */
    upsert<T extends TestNameOptionUpsertArgs>(args: SelectSubset<T, TestNameOptionUpsertArgs<ExtArgs>>): Prisma__TestNameOptionClient<$Result.GetResult<Prisma.$TestNameOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TestNameOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestNameOptionCountArgs} args - Arguments to filter TestNameOptions to count.
     * @example
     * // Count the number of TestNameOptions
     * const count = await prisma.testNameOption.count({
     *   where: {
     *     // ... the filter for the TestNameOptions we want to count
     *   }
     * })
    **/
    count<T extends TestNameOptionCountArgs>(
      args?: Subset<T, TestNameOptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestNameOptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TestNameOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestNameOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestNameOptionAggregateArgs>(args: Subset<T, TestNameOptionAggregateArgs>): Prisma.PrismaPromise<GetTestNameOptionAggregateType<T>>

    /**
     * Group by TestNameOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestNameOptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestNameOptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestNameOptionGroupByArgs['orderBy'] }
        : { orderBy?: TestNameOptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestNameOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestNameOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TestNameOption model
   */
  readonly fields: TestNameOptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TestNameOption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TestNameOptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TestNameOption model
   */
  interface TestNameOptionFieldRefs {
    readonly id: FieldRef<"TestNameOption", 'String'>
    readonly label: FieldRef<"TestNameOption", 'String'>
    readonly category: FieldRef<"TestNameOption", 'String'>
    readonly isCustom: FieldRef<"TestNameOption", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * TestNameOption findUnique
   */
  export type TestNameOptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestNameOption
     */
    select?: TestNameOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestNameOption
     */
    omit?: TestNameOptionOmit<ExtArgs> | null
    /**
     * Filter, which TestNameOption to fetch.
     */
    where: TestNameOptionWhereUniqueInput
  }

  /**
   * TestNameOption findUniqueOrThrow
   */
  export type TestNameOptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestNameOption
     */
    select?: TestNameOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestNameOption
     */
    omit?: TestNameOptionOmit<ExtArgs> | null
    /**
     * Filter, which TestNameOption to fetch.
     */
    where: TestNameOptionWhereUniqueInput
  }

  /**
   * TestNameOption findFirst
   */
  export type TestNameOptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestNameOption
     */
    select?: TestNameOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestNameOption
     */
    omit?: TestNameOptionOmit<ExtArgs> | null
    /**
     * Filter, which TestNameOption to fetch.
     */
    where?: TestNameOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestNameOptions to fetch.
     */
    orderBy?: TestNameOptionOrderByWithRelationInput | TestNameOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestNameOptions.
     */
    cursor?: TestNameOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestNameOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestNameOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestNameOptions.
     */
    distinct?: TestNameOptionScalarFieldEnum | TestNameOptionScalarFieldEnum[]
  }

  /**
   * TestNameOption findFirstOrThrow
   */
  export type TestNameOptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestNameOption
     */
    select?: TestNameOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestNameOption
     */
    omit?: TestNameOptionOmit<ExtArgs> | null
    /**
     * Filter, which TestNameOption to fetch.
     */
    where?: TestNameOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestNameOptions to fetch.
     */
    orderBy?: TestNameOptionOrderByWithRelationInput | TestNameOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestNameOptions.
     */
    cursor?: TestNameOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestNameOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestNameOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestNameOptions.
     */
    distinct?: TestNameOptionScalarFieldEnum | TestNameOptionScalarFieldEnum[]
  }

  /**
   * TestNameOption findMany
   */
  export type TestNameOptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestNameOption
     */
    select?: TestNameOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestNameOption
     */
    omit?: TestNameOptionOmit<ExtArgs> | null
    /**
     * Filter, which TestNameOptions to fetch.
     */
    where?: TestNameOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestNameOptions to fetch.
     */
    orderBy?: TestNameOptionOrderByWithRelationInput | TestNameOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TestNameOptions.
     */
    cursor?: TestNameOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestNameOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestNameOptions.
     */
    skip?: number
    distinct?: TestNameOptionScalarFieldEnum | TestNameOptionScalarFieldEnum[]
  }

  /**
   * TestNameOption create
   */
  export type TestNameOptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestNameOption
     */
    select?: TestNameOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestNameOption
     */
    omit?: TestNameOptionOmit<ExtArgs> | null
    /**
     * The data needed to create a TestNameOption.
     */
    data: XOR<TestNameOptionCreateInput, TestNameOptionUncheckedCreateInput>
  }

  /**
   * TestNameOption createMany
   */
  export type TestNameOptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TestNameOptions.
     */
    data: TestNameOptionCreateManyInput | TestNameOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TestNameOption createManyAndReturn
   */
  export type TestNameOptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestNameOption
     */
    select?: TestNameOptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TestNameOption
     */
    omit?: TestNameOptionOmit<ExtArgs> | null
    /**
     * The data used to create many TestNameOptions.
     */
    data: TestNameOptionCreateManyInput | TestNameOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TestNameOption update
   */
  export type TestNameOptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestNameOption
     */
    select?: TestNameOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestNameOption
     */
    omit?: TestNameOptionOmit<ExtArgs> | null
    /**
     * The data needed to update a TestNameOption.
     */
    data: XOR<TestNameOptionUpdateInput, TestNameOptionUncheckedUpdateInput>
    /**
     * Choose, which TestNameOption to update.
     */
    where: TestNameOptionWhereUniqueInput
  }

  /**
   * TestNameOption updateMany
   */
  export type TestNameOptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TestNameOptions.
     */
    data: XOR<TestNameOptionUpdateManyMutationInput, TestNameOptionUncheckedUpdateManyInput>
    /**
     * Filter which TestNameOptions to update
     */
    where?: TestNameOptionWhereInput
    /**
     * Limit how many TestNameOptions to update.
     */
    limit?: number
  }

  /**
   * TestNameOption updateManyAndReturn
   */
  export type TestNameOptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestNameOption
     */
    select?: TestNameOptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TestNameOption
     */
    omit?: TestNameOptionOmit<ExtArgs> | null
    /**
     * The data used to update TestNameOptions.
     */
    data: XOR<TestNameOptionUpdateManyMutationInput, TestNameOptionUncheckedUpdateManyInput>
    /**
     * Filter which TestNameOptions to update
     */
    where?: TestNameOptionWhereInput
    /**
     * Limit how many TestNameOptions to update.
     */
    limit?: number
  }

  /**
   * TestNameOption upsert
   */
  export type TestNameOptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestNameOption
     */
    select?: TestNameOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestNameOption
     */
    omit?: TestNameOptionOmit<ExtArgs> | null
    /**
     * The filter to search for the TestNameOption to update in case it exists.
     */
    where: TestNameOptionWhereUniqueInput
    /**
     * In case the TestNameOption found by the `where` argument doesn't exist, create a new TestNameOption with this data.
     */
    create: XOR<TestNameOptionCreateInput, TestNameOptionUncheckedCreateInput>
    /**
     * In case the TestNameOption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TestNameOptionUpdateInput, TestNameOptionUncheckedUpdateInput>
  }

  /**
   * TestNameOption delete
   */
  export type TestNameOptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestNameOption
     */
    select?: TestNameOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestNameOption
     */
    omit?: TestNameOptionOmit<ExtArgs> | null
    /**
     * Filter which TestNameOption to delete.
     */
    where: TestNameOptionWhereUniqueInput
  }

  /**
   * TestNameOption deleteMany
   */
  export type TestNameOptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestNameOptions to delete
     */
    where?: TestNameOptionWhereInput
    /**
     * Limit how many TestNameOptions to delete.
     */
    limit?: number
  }

  /**
   * TestNameOption without action
   */
  export type TestNameOptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestNameOption
     */
    select?: TestNameOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestNameOption
     */
    omit?: TestNameOptionOmit<ExtArgs> | null
  }


  /**
   * Model ReasonOption
   */

  export type AggregateReasonOption = {
    _count: ReasonOptionCountAggregateOutputType | null
    _min: ReasonOptionMinAggregateOutputType | null
    _max: ReasonOptionMaxAggregateOutputType | null
  }

  export type ReasonOptionMinAggregateOutputType = {
    id: string | null
    label: string | null
    category: string | null
    isCustom: boolean | null
  }

  export type ReasonOptionMaxAggregateOutputType = {
    id: string | null
    label: string | null
    category: string | null
    isCustom: boolean | null
  }

  export type ReasonOptionCountAggregateOutputType = {
    id: number
    label: number
    category: number
    isCustom: number
    _all: number
  }


  export type ReasonOptionMinAggregateInputType = {
    id?: true
    label?: true
    category?: true
    isCustom?: true
  }

  export type ReasonOptionMaxAggregateInputType = {
    id?: true
    label?: true
    category?: true
    isCustom?: true
  }

  export type ReasonOptionCountAggregateInputType = {
    id?: true
    label?: true
    category?: true
    isCustom?: true
    _all?: true
  }

  export type ReasonOptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReasonOption to aggregate.
     */
    where?: ReasonOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReasonOptions to fetch.
     */
    orderBy?: ReasonOptionOrderByWithRelationInput | ReasonOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReasonOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReasonOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReasonOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReasonOptions
    **/
    _count?: true | ReasonOptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReasonOptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReasonOptionMaxAggregateInputType
  }

  export type GetReasonOptionAggregateType<T extends ReasonOptionAggregateArgs> = {
        [P in keyof T & keyof AggregateReasonOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReasonOption[P]>
      : GetScalarType<T[P], AggregateReasonOption[P]>
  }




  export type ReasonOptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReasonOptionWhereInput
    orderBy?: ReasonOptionOrderByWithAggregationInput | ReasonOptionOrderByWithAggregationInput[]
    by: ReasonOptionScalarFieldEnum[] | ReasonOptionScalarFieldEnum
    having?: ReasonOptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReasonOptionCountAggregateInputType | true
    _min?: ReasonOptionMinAggregateInputType
    _max?: ReasonOptionMaxAggregateInputType
  }

  export type ReasonOptionGroupByOutputType = {
    id: string
    label: string
    category: string
    isCustom: boolean
    _count: ReasonOptionCountAggregateOutputType | null
    _min: ReasonOptionMinAggregateOutputType | null
    _max: ReasonOptionMaxAggregateOutputType | null
  }

  type GetReasonOptionGroupByPayload<T extends ReasonOptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReasonOptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReasonOptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReasonOptionGroupByOutputType[P]>
            : GetScalarType<T[P], ReasonOptionGroupByOutputType[P]>
        }
      >
    >


  export type ReasonOptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    category?: boolean
    isCustom?: boolean
  }, ExtArgs["result"]["reasonOption"]>

  export type ReasonOptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    category?: boolean
    isCustom?: boolean
  }, ExtArgs["result"]["reasonOption"]>

  export type ReasonOptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    category?: boolean
    isCustom?: boolean
  }, ExtArgs["result"]["reasonOption"]>

  export type ReasonOptionSelectScalar = {
    id?: boolean
    label?: boolean
    category?: boolean
    isCustom?: boolean
  }

  export type ReasonOptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "label" | "category" | "isCustom", ExtArgs["result"]["reasonOption"]>

  export type $ReasonOptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReasonOption"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      label: string
      category: string
      isCustom: boolean
    }, ExtArgs["result"]["reasonOption"]>
    composites: {}
  }

  type ReasonOptionGetPayload<S extends boolean | null | undefined | ReasonOptionDefaultArgs> = $Result.GetResult<Prisma.$ReasonOptionPayload, S>

  type ReasonOptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReasonOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReasonOptionCountAggregateInputType | true
    }

  export interface ReasonOptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReasonOption'], meta: { name: 'ReasonOption' } }
    /**
     * Find zero or one ReasonOption that matches the filter.
     * @param {ReasonOptionFindUniqueArgs} args - Arguments to find a ReasonOption
     * @example
     * // Get one ReasonOption
     * const reasonOption = await prisma.reasonOption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReasonOptionFindUniqueArgs>(args: SelectSubset<T, ReasonOptionFindUniqueArgs<ExtArgs>>): Prisma__ReasonOptionClient<$Result.GetResult<Prisma.$ReasonOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReasonOption that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReasonOptionFindUniqueOrThrowArgs} args - Arguments to find a ReasonOption
     * @example
     * // Get one ReasonOption
     * const reasonOption = await prisma.reasonOption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReasonOptionFindUniqueOrThrowArgs>(args: SelectSubset<T, ReasonOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReasonOptionClient<$Result.GetResult<Prisma.$ReasonOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReasonOption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReasonOptionFindFirstArgs} args - Arguments to find a ReasonOption
     * @example
     * // Get one ReasonOption
     * const reasonOption = await prisma.reasonOption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReasonOptionFindFirstArgs>(args?: SelectSubset<T, ReasonOptionFindFirstArgs<ExtArgs>>): Prisma__ReasonOptionClient<$Result.GetResult<Prisma.$ReasonOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReasonOption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReasonOptionFindFirstOrThrowArgs} args - Arguments to find a ReasonOption
     * @example
     * // Get one ReasonOption
     * const reasonOption = await prisma.reasonOption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReasonOptionFindFirstOrThrowArgs>(args?: SelectSubset<T, ReasonOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReasonOptionClient<$Result.GetResult<Prisma.$ReasonOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReasonOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReasonOptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReasonOptions
     * const reasonOptions = await prisma.reasonOption.findMany()
     * 
     * // Get first 10 ReasonOptions
     * const reasonOptions = await prisma.reasonOption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reasonOptionWithIdOnly = await prisma.reasonOption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReasonOptionFindManyArgs>(args?: SelectSubset<T, ReasonOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReasonOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReasonOption.
     * @param {ReasonOptionCreateArgs} args - Arguments to create a ReasonOption.
     * @example
     * // Create one ReasonOption
     * const ReasonOption = await prisma.reasonOption.create({
     *   data: {
     *     // ... data to create a ReasonOption
     *   }
     * })
     * 
     */
    create<T extends ReasonOptionCreateArgs>(args: SelectSubset<T, ReasonOptionCreateArgs<ExtArgs>>): Prisma__ReasonOptionClient<$Result.GetResult<Prisma.$ReasonOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReasonOptions.
     * @param {ReasonOptionCreateManyArgs} args - Arguments to create many ReasonOptions.
     * @example
     * // Create many ReasonOptions
     * const reasonOption = await prisma.reasonOption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReasonOptionCreateManyArgs>(args?: SelectSubset<T, ReasonOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReasonOptions and returns the data saved in the database.
     * @param {ReasonOptionCreateManyAndReturnArgs} args - Arguments to create many ReasonOptions.
     * @example
     * // Create many ReasonOptions
     * const reasonOption = await prisma.reasonOption.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReasonOptions and only return the `id`
     * const reasonOptionWithIdOnly = await prisma.reasonOption.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReasonOptionCreateManyAndReturnArgs>(args?: SelectSubset<T, ReasonOptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReasonOptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReasonOption.
     * @param {ReasonOptionDeleteArgs} args - Arguments to delete one ReasonOption.
     * @example
     * // Delete one ReasonOption
     * const ReasonOption = await prisma.reasonOption.delete({
     *   where: {
     *     // ... filter to delete one ReasonOption
     *   }
     * })
     * 
     */
    delete<T extends ReasonOptionDeleteArgs>(args: SelectSubset<T, ReasonOptionDeleteArgs<ExtArgs>>): Prisma__ReasonOptionClient<$Result.GetResult<Prisma.$ReasonOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReasonOption.
     * @param {ReasonOptionUpdateArgs} args - Arguments to update one ReasonOption.
     * @example
     * // Update one ReasonOption
     * const reasonOption = await prisma.reasonOption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReasonOptionUpdateArgs>(args: SelectSubset<T, ReasonOptionUpdateArgs<ExtArgs>>): Prisma__ReasonOptionClient<$Result.GetResult<Prisma.$ReasonOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReasonOptions.
     * @param {ReasonOptionDeleteManyArgs} args - Arguments to filter ReasonOptions to delete.
     * @example
     * // Delete a few ReasonOptions
     * const { count } = await prisma.reasonOption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReasonOptionDeleteManyArgs>(args?: SelectSubset<T, ReasonOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReasonOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReasonOptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReasonOptions
     * const reasonOption = await prisma.reasonOption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReasonOptionUpdateManyArgs>(args: SelectSubset<T, ReasonOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReasonOptions and returns the data updated in the database.
     * @param {ReasonOptionUpdateManyAndReturnArgs} args - Arguments to update many ReasonOptions.
     * @example
     * // Update many ReasonOptions
     * const reasonOption = await prisma.reasonOption.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReasonOptions and only return the `id`
     * const reasonOptionWithIdOnly = await prisma.reasonOption.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReasonOptionUpdateManyAndReturnArgs>(args: SelectSubset<T, ReasonOptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReasonOptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReasonOption.
     * @param {ReasonOptionUpsertArgs} args - Arguments to update or create a ReasonOption.
     * @example
     * // Update or create a ReasonOption
     * const reasonOption = await prisma.reasonOption.upsert({
     *   create: {
     *     // ... data to create a ReasonOption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReasonOption we want to update
     *   }
     * })
     */
    upsert<T extends ReasonOptionUpsertArgs>(args: SelectSubset<T, ReasonOptionUpsertArgs<ExtArgs>>): Prisma__ReasonOptionClient<$Result.GetResult<Prisma.$ReasonOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReasonOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReasonOptionCountArgs} args - Arguments to filter ReasonOptions to count.
     * @example
     * // Count the number of ReasonOptions
     * const count = await prisma.reasonOption.count({
     *   where: {
     *     // ... the filter for the ReasonOptions we want to count
     *   }
     * })
    **/
    count<T extends ReasonOptionCountArgs>(
      args?: Subset<T, ReasonOptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReasonOptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReasonOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReasonOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReasonOptionAggregateArgs>(args: Subset<T, ReasonOptionAggregateArgs>): Prisma.PrismaPromise<GetReasonOptionAggregateType<T>>

    /**
     * Group by ReasonOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReasonOptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReasonOptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReasonOptionGroupByArgs['orderBy'] }
        : { orderBy?: ReasonOptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReasonOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReasonOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReasonOption model
   */
  readonly fields: ReasonOptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReasonOption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReasonOptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReasonOption model
   */
  interface ReasonOptionFieldRefs {
    readonly id: FieldRef<"ReasonOption", 'String'>
    readonly label: FieldRef<"ReasonOption", 'String'>
    readonly category: FieldRef<"ReasonOption", 'String'>
    readonly isCustom: FieldRef<"ReasonOption", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ReasonOption findUnique
   */
  export type ReasonOptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReasonOption
     */
    select?: ReasonOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReasonOption
     */
    omit?: ReasonOptionOmit<ExtArgs> | null
    /**
     * Filter, which ReasonOption to fetch.
     */
    where: ReasonOptionWhereUniqueInput
  }

  /**
   * ReasonOption findUniqueOrThrow
   */
  export type ReasonOptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReasonOption
     */
    select?: ReasonOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReasonOption
     */
    omit?: ReasonOptionOmit<ExtArgs> | null
    /**
     * Filter, which ReasonOption to fetch.
     */
    where: ReasonOptionWhereUniqueInput
  }

  /**
   * ReasonOption findFirst
   */
  export type ReasonOptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReasonOption
     */
    select?: ReasonOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReasonOption
     */
    omit?: ReasonOptionOmit<ExtArgs> | null
    /**
     * Filter, which ReasonOption to fetch.
     */
    where?: ReasonOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReasonOptions to fetch.
     */
    orderBy?: ReasonOptionOrderByWithRelationInput | ReasonOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReasonOptions.
     */
    cursor?: ReasonOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReasonOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReasonOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReasonOptions.
     */
    distinct?: ReasonOptionScalarFieldEnum | ReasonOptionScalarFieldEnum[]
  }

  /**
   * ReasonOption findFirstOrThrow
   */
  export type ReasonOptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReasonOption
     */
    select?: ReasonOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReasonOption
     */
    omit?: ReasonOptionOmit<ExtArgs> | null
    /**
     * Filter, which ReasonOption to fetch.
     */
    where?: ReasonOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReasonOptions to fetch.
     */
    orderBy?: ReasonOptionOrderByWithRelationInput | ReasonOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReasonOptions.
     */
    cursor?: ReasonOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReasonOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReasonOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReasonOptions.
     */
    distinct?: ReasonOptionScalarFieldEnum | ReasonOptionScalarFieldEnum[]
  }

  /**
   * ReasonOption findMany
   */
  export type ReasonOptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReasonOption
     */
    select?: ReasonOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReasonOption
     */
    omit?: ReasonOptionOmit<ExtArgs> | null
    /**
     * Filter, which ReasonOptions to fetch.
     */
    where?: ReasonOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReasonOptions to fetch.
     */
    orderBy?: ReasonOptionOrderByWithRelationInput | ReasonOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReasonOptions.
     */
    cursor?: ReasonOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReasonOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReasonOptions.
     */
    skip?: number
    distinct?: ReasonOptionScalarFieldEnum | ReasonOptionScalarFieldEnum[]
  }

  /**
   * ReasonOption create
   */
  export type ReasonOptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReasonOption
     */
    select?: ReasonOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReasonOption
     */
    omit?: ReasonOptionOmit<ExtArgs> | null
    /**
     * The data needed to create a ReasonOption.
     */
    data: XOR<ReasonOptionCreateInput, ReasonOptionUncheckedCreateInput>
  }

  /**
   * ReasonOption createMany
   */
  export type ReasonOptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReasonOptions.
     */
    data: ReasonOptionCreateManyInput | ReasonOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReasonOption createManyAndReturn
   */
  export type ReasonOptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReasonOption
     */
    select?: ReasonOptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReasonOption
     */
    omit?: ReasonOptionOmit<ExtArgs> | null
    /**
     * The data used to create many ReasonOptions.
     */
    data: ReasonOptionCreateManyInput | ReasonOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReasonOption update
   */
  export type ReasonOptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReasonOption
     */
    select?: ReasonOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReasonOption
     */
    omit?: ReasonOptionOmit<ExtArgs> | null
    /**
     * The data needed to update a ReasonOption.
     */
    data: XOR<ReasonOptionUpdateInput, ReasonOptionUncheckedUpdateInput>
    /**
     * Choose, which ReasonOption to update.
     */
    where: ReasonOptionWhereUniqueInput
  }

  /**
   * ReasonOption updateMany
   */
  export type ReasonOptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReasonOptions.
     */
    data: XOR<ReasonOptionUpdateManyMutationInput, ReasonOptionUncheckedUpdateManyInput>
    /**
     * Filter which ReasonOptions to update
     */
    where?: ReasonOptionWhereInput
    /**
     * Limit how many ReasonOptions to update.
     */
    limit?: number
  }

  /**
   * ReasonOption updateManyAndReturn
   */
  export type ReasonOptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReasonOption
     */
    select?: ReasonOptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReasonOption
     */
    omit?: ReasonOptionOmit<ExtArgs> | null
    /**
     * The data used to update ReasonOptions.
     */
    data: XOR<ReasonOptionUpdateManyMutationInput, ReasonOptionUncheckedUpdateManyInput>
    /**
     * Filter which ReasonOptions to update
     */
    where?: ReasonOptionWhereInput
    /**
     * Limit how many ReasonOptions to update.
     */
    limit?: number
  }

  /**
   * ReasonOption upsert
   */
  export type ReasonOptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReasonOption
     */
    select?: ReasonOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReasonOption
     */
    omit?: ReasonOptionOmit<ExtArgs> | null
    /**
     * The filter to search for the ReasonOption to update in case it exists.
     */
    where: ReasonOptionWhereUniqueInput
    /**
     * In case the ReasonOption found by the `where` argument doesn't exist, create a new ReasonOption with this data.
     */
    create: XOR<ReasonOptionCreateInput, ReasonOptionUncheckedCreateInput>
    /**
     * In case the ReasonOption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReasonOptionUpdateInput, ReasonOptionUncheckedUpdateInput>
  }

  /**
   * ReasonOption delete
   */
  export type ReasonOptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReasonOption
     */
    select?: ReasonOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReasonOption
     */
    omit?: ReasonOptionOmit<ExtArgs> | null
    /**
     * Filter which ReasonOption to delete.
     */
    where: ReasonOptionWhereUniqueInput
  }

  /**
   * ReasonOption deleteMany
   */
  export type ReasonOptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReasonOptions to delete
     */
    where?: ReasonOptionWhereInput
    /**
     * Limit how many ReasonOptions to delete.
     */
    limit?: number
  }

  /**
   * ReasonOption without action
   */
  export type ReasonOptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReasonOption
     */
    select?: ReasonOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReasonOption
     */
    omit?: ReasonOptionOmit<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    displayName: string | null
    avatarKey: string | null
    onboardingCompleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    displayName: string | null
    avatarKey: string | null
    onboardingCompleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    displayName: number
    avatarKey: number
    onboardingCompleted: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    displayName?: true
    avatarKey?: true
    onboardingCompleted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    displayName?: true
    avatarKey?: true
    onboardingCompleted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    displayName?: true
    avatarKey?: true
    onboardingCompleted?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    displayName: string
    avatarKey: string | null
    onboardingCompleted: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    displayName?: boolean
    avatarKey?: boolean
    onboardingCompleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    avatar?: boolean | User$avatarArgs<ExtArgs>
    goals?: boolean | User$goalsArgs<ExtArgs>
    learningPlans?: boolean | User$learningPlansArgs<ExtArgs>
    attemptLogs?: boolean | User$attemptLogsArgs<ExtArgs>
    dailyReflections?: boolean | User$dailyReflectionsArgs<ExtArgs>
    weeklyReflections?: boolean | User$weeklyReflectionsArgs<ExtArgs>
    valuePrompts?: boolean | User$valuePromptsArgs<ExtArgs>
    reflectionBadges?: boolean | User$reflectionBadgesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    displayName?: boolean
    avatarKey?: boolean
    onboardingCompleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    avatar?: boolean | User$avatarArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    displayName?: boolean
    avatarKey?: boolean
    onboardingCompleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    avatar?: boolean | User$avatarArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    displayName?: boolean
    avatarKey?: boolean
    onboardingCompleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "displayName" | "avatarKey" | "onboardingCompleted" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    avatar?: boolean | User$avatarArgs<ExtArgs>
    goals?: boolean | User$goalsArgs<ExtArgs>
    learningPlans?: boolean | User$learningPlansArgs<ExtArgs>
    attemptLogs?: boolean | User$attemptLogsArgs<ExtArgs>
    dailyReflections?: boolean | User$dailyReflectionsArgs<ExtArgs>
    weeklyReflections?: boolean | User$weeklyReflectionsArgs<ExtArgs>
    valuePrompts?: boolean | User$valuePromptsArgs<ExtArgs>
    reflectionBadges?: boolean | User$reflectionBadgesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    avatar?: boolean | User$avatarArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    avatar?: boolean | User$avatarArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      avatar: Prisma.$AvatarPayload<ExtArgs> | null
      goals: Prisma.$GoalPayload<ExtArgs>[]
      learningPlans: Prisma.$LearningPlanPayload<ExtArgs>[]
      attemptLogs: Prisma.$QuestionAttemptLogPayload<ExtArgs>[]
      dailyReflections: Prisma.$DailyReflectionPayload<ExtArgs>[]
      weeklyReflections: Prisma.$WeeklyReflectionPayload<ExtArgs>[]
      valuePrompts: Prisma.$ValuePromptPayload<ExtArgs>[]
      reflectionBadges: Prisma.$ReflectionBadgePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      displayName: string
      avatarKey: string | null
      onboardingCompleted: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    avatar<T extends User$avatarArgs<ExtArgs> = {}>(args?: Subset<T, User$avatarArgs<ExtArgs>>): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    goals<T extends User$goalsArgs<ExtArgs> = {}>(args?: Subset<T, User$goalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    learningPlans<T extends User$learningPlansArgs<ExtArgs> = {}>(args?: Subset<T, User$learningPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningPlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attemptLogs<T extends User$attemptLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$attemptLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionAttemptLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    dailyReflections<T extends User$dailyReflectionsArgs<ExtArgs> = {}>(args?: Subset<T, User$dailyReflectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyReflectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    weeklyReflections<T extends User$weeklyReflectionsArgs<ExtArgs> = {}>(args?: Subset<T, User$weeklyReflectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeeklyReflectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    valuePrompts<T extends User$valuePromptsArgs<ExtArgs> = {}>(args?: Subset<T, User$valuePromptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValuePromptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reflectionBadges<T extends User$reflectionBadgesArgs<ExtArgs> = {}>(args?: Subset<T, User$reflectionBadgesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReflectionBadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly displayName: FieldRef<"User", 'String'>
    readonly avatarKey: FieldRef<"User", 'String'>
    readonly onboardingCompleted: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.avatar
   */
  export type User$avatarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
    where?: AvatarWhereInput
  }

  /**
   * User.goals
   */
  export type User$goalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    cursor?: GoalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * User.learningPlans
   */
  export type User$learningPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningPlan
     */
    select?: LearningPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningPlan
     */
    omit?: LearningPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningPlanInclude<ExtArgs> | null
    where?: LearningPlanWhereInput
    orderBy?: LearningPlanOrderByWithRelationInput | LearningPlanOrderByWithRelationInput[]
    cursor?: LearningPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LearningPlanScalarFieldEnum | LearningPlanScalarFieldEnum[]
  }

  /**
   * User.attemptLogs
   */
  export type User$attemptLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAttemptLog
     */
    select?: QuestionAttemptLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAttemptLog
     */
    omit?: QuestionAttemptLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAttemptLogInclude<ExtArgs> | null
    where?: QuestionAttemptLogWhereInput
    orderBy?: QuestionAttemptLogOrderByWithRelationInput | QuestionAttemptLogOrderByWithRelationInput[]
    cursor?: QuestionAttemptLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionAttemptLogScalarFieldEnum | QuestionAttemptLogScalarFieldEnum[]
  }

  /**
   * User.dailyReflections
   */
  export type User$dailyReflectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReflection
     */
    select?: DailyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReflection
     */
    omit?: DailyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReflectionInclude<ExtArgs> | null
    where?: DailyReflectionWhereInput
    orderBy?: DailyReflectionOrderByWithRelationInput | DailyReflectionOrderByWithRelationInput[]
    cursor?: DailyReflectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DailyReflectionScalarFieldEnum | DailyReflectionScalarFieldEnum[]
  }

  /**
   * User.weeklyReflections
   */
  export type User$weeklyReflectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyReflection
     */
    select?: WeeklyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklyReflection
     */
    omit?: WeeklyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyReflectionInclude<ExtArgs> | null
    where?: WeeklyReflectionWhereInput
    orderBy?: WeeklyReflectionOrderByWithRelationInput | WeeklyReflectionOrderByWithRelationInput[]
    cursor?: WeeklyReflectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeeklyReflectionScalarFieldEnum | WeeklyReflectionScalarFieldEnum[]
  }

  /**
   * User.valuePrompts
   */
  export type User$valuePromptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuePrompt
     */
    select?: ValuePromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuePrompt
     */
    omit?: ValuePromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuePromptInclude<ExtArgs> | null
    where?: ValuePromptWhereInput
    orderBy?: ValuePromptOrderByWithRelationInput | ValuePromptOrderByWithRelationInput[]
    cursor?: ValuePromptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ValuePromptScalarFieldEnum | ValuePromptScalarFieldEnum[]
  }

  /**
   * User.reflectionBadges
   */
  export type User$reflectionBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReflectionBadge
     */
    select?: ReflectionBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReflectionBadge
     */
    omit?: ReflectionBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionBadgeInclude<ExtArgs> | null
    where?: ReflectionBadgeWhereInput
    orderBy?: ReflectionBadgeOrderByWithRelationInput | ReflectionBadgeOrderByWithRelationInput[]
    cursor?: ReflectionBadgeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReflectionBadgeScalarFieldEnum | ReflectionBadgeScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Goal
   */

  export type AggregateGoal = {
    _count: GoalCountAggregateOutputType | null
    _avg: GoalAvgAggregateOutputType | null
    _sum: GoalSumAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  export type GoalAvgAggregateOutputType = {
    totalStudents: number | null
    targetRank: number | null
  }

  export type GoalSumAggregateOutputType = {
    totalStudents: number | null
    targetRank: number | null
  }

  export type GoalMinAggregateOutputType = {
    id: string | null
    userId: string | null
    testName: string | null
    testStartDate: Date | null
    testEndDate: Date | null
    totalStudents: number | null
    targetRank: number | null
    reasonType: string | null
    reasonText: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GoalMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    testName: string | null
    testStartDate: Date | null
    testEndDate: Date | null
    totalStudents: number | null
    targetRank: number | null
    reasonType: string | null
    reasonText: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GoalCountAggregateOutputType = {
    id: number
    userId: number
    testName: number
    testStartDate: number
    testEndDate: number
    totalStudents: number
    targetRank: number
    reasonType: number
    reasonText: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GoalAvgAggregateInputType = {
    totalStudents?: true
    targetRank?: true
  }

  export type GoalSumAggregateInputType = {
    totalStudents?: true
    targetRank?: true
  }

  export type GoalMinAggregateInputType = {
    id?: true
    userId?: true
    testName?: true
    testStartDate?: true
    testEndDate?: true
    totalStudents?: true
    targetRank?: true
    reasonType?: true
    reasonText?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GoalMaxAggregateInputType = {
    id?: true
    userId?: true
    testName?: true
    testStartDate?: true
    testEndDate?: true
    totalStudents?: true
    targetRank?: true
    reasonType?: true
    reasonText?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GoalCountAggregateInputType = {
    id?: true
    userId?: true
    testName?: true
    testStartDate?: true
    testEndDate?: true
    totalStudents?: true
    targetRank?: true
    reasonType?: true
    reasonText?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GoalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goal to aggregate.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Goals
    **/
    _count?: true | GoalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GoalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GoalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalMaxAggregateInputType
  }

  export type GetGoalAggregateType<T extends GoalAggregateArgs> = {
        [P in keyof T & keyof AggregateGoal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoal[P]>
      : GetScalarType<T[P], AggregateGoal[P]>
  }




  export type GoalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithAggregationInput | GoalOrderByWithAggregationInput[]
    by: GoalScalarFieldEnum[] | GoalScalarFieldEnum
    having?: GoalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalCountAggregateInputType | true
    _avg?: GoalAvgAggregateInputType
    _sum?: GoalSumAggregateInputType
    _min?: GoalMinAggregateInputType
    _max?: GoalMaxAggregateInputType
  }

  export type GoalGroupByOutputType = {
    id: string
    userId: string
    testName: string
    testStartDate: Date
    testEndDate: Date
    totalStudents: number
    targetRank: number
    reasonType: string
    reasonText: string
    createdAt: Date
    updatedAt: Date
    _count: GoalCountAggregateOutputType | null
    _avg: GoalAvgAggregateOutputType | null
    _sum: GoalSumAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  type GetGoalGroupByPayload<T extends GoalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalGroupByOutputType[P]>
            : GetScalarType<T[P], GoalGroupByOutputType[P]>
        }
      >
    >


  export type GoalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    testName?: boolean
    testStartDate?: boolean
    testEndDate?: boolean
    totalStudents?: boolean
    targetRank?: boolean
    reasonType?: boolean
    reasonText?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    learningPlans?: boolean | Goal$learningPlansArgs<ExtArgs>
    _count?: boolean | GoalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goal"]>

  export type GoalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    testName?: boolean
    testStartDate?: boolean
    testEndDate?: boolean
    totalStudents?: boolean
    targetRank?: boolean
    reasonType?: boolean
    reasonText?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goal"]>

  export type GoalSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    testName?: boolean
    testStartDate?: boolean
    testEndDate?: boolean
    totalStudents?: boolean
    targetRank?: boolean
    reasonType?: boolean
    reasonText?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goal"]>

  export type GoalSelectScalar = {
    id?: boolean
    userId?: boolean
    testName?: boolean
    testStartDate?: boolean
    testEndDate?: boolean
    totalStudents?: boolean
    targetRank?: boolean
    reasonType?: boolean
    reasonText?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GoalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "testName" | "testStartDate" | "testEndDate" | "totalStudents" | "targetRank" | "reasonType" | "reasonText" | "createdAt" | "updatedAt", ExtArgs["result"]["goal"]>
  export type GoalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    learningPlans?: boolean | Goal$learningPlansArgs<ExtArgs>
    _count?: boolean | GoalCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GoalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GoalIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GoalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Goal"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      learningPlans: Prisma.$LearningPlanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      testName: string
      testStartDate: Date
      testEndDate: Date
      totalStudents: number
      targetRank: number
      reasonType: string
      reasonText: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["goal"]>
    composites: {}
  }

  type GoalGetPayload<S extends boolean | null | undefined | GoalDefaultArgs> = $Result.GetResult<Prisma.$GoalPayload, S>

  type GoalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GoalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GoalCountAggregateInputType | true
    }

  export interface GoalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Goal'], meta: { name: 'Goal' } }
    /**
     * Find zero or one Goal that matches the filter.
     * @param {GoalFindUniqueArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GoalFindUniqueArgs>(args: SelectSubset<T, GoalFindUniqueArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Goal that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GoalFindUniqueOrThrowArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GoalFindUniqueOrThrowArgs>(args: SelectSubset<T, GoalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Goal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GoalFindFirstArgs>(args?: SelectSubset<T, GoalFindFirstArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Goal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstOrThrowArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GoalFindFirstOrThrowArgs>(args?: SelectSubset<T, GoalFindFirstOrThrowArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Goals
     * const goals = await prisma.goal.findMany()
     * 
     * // Get first 10 Goals
     * const goals = await prisma.goal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goalWithIdOnly = await prisma.goal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GoalFindManyArgs>(args?: SelectSubset<T, GoalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Goal.
     * @param {GoalCreateArgs} args - Arguments to create a Goal.
     * @example
     * // Create one Goal
     * const Goal = await prisma.goal.create({
     *   data: {
     *     // ... data to create a Goal
     *   }
     * })
     * 
     */
    create<T extends GoalCreateArgs>(args: SelectSubset<T, GoalCreateArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Goals.
     * @param {GoalCreateManyArgs} args - Arguments to create many Goals.
     * @example
     * // Create many Goals
     * const goal = await prisma.goal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GoalCreateManyArgs>(args?: SelectSubset<T, GoalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Goals and returns the data saved in the database.
     * @param {GoalCreateManyAndReturnArgs} args - Arguments to create many Goals.
     * @example
     * // Create many Goals
     * const goal = await prisma.goal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Goals and only return the `id`
     * const goalWithIdOnly = await prisma.goal.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GoalCreateManyAndReturnArgs>(args?: SelectSubset<T, GoalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Goal.
     * @param {GoalDeleteArgs} args - Arguments to delete one Goal.
     * @example
     * // Delete one Goal
     * const Goal = await prisma.goal.delete({
     *   where: {
     *     // ... filter to delete one Goal
     *   }
     * })
     * 
     */
    delete<T extends GoalDeleteArgs>(args: SelectSubset<T, GoalDeleteArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Goal.
     * @param {GoalUpdateArgs} args - Arguments to update one Goal.
     * @example
     * // Update one Goal
     * const goal = await prisma.goal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GoalUpdateArgs>(args: SelectSubset<T, GoalUpdateArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Goals.
     * @param {GoalDeleteManyArgs} args - Arguments to filter Goals to delete.
     * @example
     * // Delete a few Goals
     * const { count } = await prisma.goal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GoalDeleteManyArgs>(args?: SelectSubset<T, GoalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Goals
     * const goal = await prisma.goal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GoalUpdateManyArgs>(args: SelectSubset<T, GoalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goals and returns the data updated in the database.
     * @param {GoalUpdateManyAndReturnArgs} args - Arguments to update many Goals.
     * @example
     * // Update many Goals
     * const goal = await prisma.goal.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Goals and only return the `id`
     * const goalWithIdOnly = await prisma.goal.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GoalUpdateManyAndReturnArgs>(args: SelectSubset<T, GoalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Goal.
     * @param {GoalUpsertArgs} args - Arguments to update or create a Goal.
     * @example
     * // Update or create a Goal
     * const goal = await prisma.goal.upsert({
     *   create: {
     *     // ... data to create a Goal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Goal we want to update
     *   }
     * })
     */
    upsert<T extends GoalUpsertArgs>(args: SelectSubset<T, GoalUpsertArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalCountArgs} args - Arguments to filter Goals to count.
     * @example
     * // Count the number of Goals
     * const count = await prisma.goal.count({
     *   where: {
     *     // ... the filter for the Goals we want to count
     *   }
     * })
    **/
    count<T extends GoalCountArgs>(
      args?: Subset<T, GoalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalAggregateArgs>(args: Subset<T, GoalAggregateArgs>): Prisma.PrismaPromise<GetGoalAggregateType<T>>

    /**
     * Group by Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoalGroupByArgs['orderBy'] }
        : { orderBy?: GoalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Goal model
   */
  readonly fields: GoalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Goal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    learningPlans<T extends Goal$learningPlansArgs<ExtArgs> = {}>(args?: Subset<T, Goal$learningPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningPlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Goal model
   */
  interface GoalFieldRefs {
    readonly id: FieldRef<"Goal", 'String'>
    readonly userId: FieldRef<"Goal", 'String'>
    readonly testName: FieldRef<"Goal", 'String'>
    readonly testStartDate: FieldRef<"Goal", 'DateTime'>
    readonly testEndDate: FieldRef<"Goal", 'DateTime'>
    readonly totalStudents: FieldRef<"Goal", 'Int'>
    readonly targetRank: FieldRef<"Goal", 'Int'>
    readonly reasonType: FieldRef<"Goal", 'String'>
    readonly reasonText: FieldRef<"Goal", 'String'>
    readonly createdAt: FieldRef<"Goal", 'DateTime'>
    readonly updatedAt: FieldRef<"Goal", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Goal findUnique
   */
  export type GoalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal findUniqueOrThrow
   */
  export type GoalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal findFirst
   */
  export type GoalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goals.
     */
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal findFirstOrThrow
   */
  export type GoalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goals.
     */
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal findMany
   */
  export type GoalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goals to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal create
   */
  export type GoalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The data needed to create a Goal.
     */
    data: XOR<GoalCreateInput, GoalUncheckedCreateInput>
  }

  /**
   * Goal createMany
   */
  export type GoalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Goals.
     */
    data: GoalCreateManyInput | GoalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Goal createManyAndReturn
   */
  export type GoalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * The data used to create many Goals.
     */
    data: GoalCreateManyInput | GoalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Goal update
   */
  export type GoalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The data needed to update a Goal.
     */
    data: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
    /**
     * Choose, which Goal to update.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal updateMany
   */
  export type GoalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Goals.
     */
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyInput>
    /**
     * Filter which Goals to update
     */
    where?: GoalWhereInput
    /**
     * Limit how many Goals to update.
     */
    limit?: number
  }

  /**
   * Goal updateManyAndReturn
   */
  export type GoalUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * The data used to update Goals.
     */
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyInput>
    /**
     * Filter which Goals to update
     */
    where?: GoalWhereInput
    /**
     * Limit how many Goals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Goal upsert
   */
  export type GoalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The filter to search for the Goal to update in case it exists.
     */
    where: GoalWhereUniqueInput
    /**
     * In case the Goal found by the `where` argument doesn't exist, create a new Goal with this data.
     */
    create: XOR<GoalCreateInput, GoalUncheckedCreateInput>
    /**
     * In case the Goal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
  }

  /**
   * Goal delete
   */
  export type GoalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter which Goal to delete.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal deleteMany
   */
  export type GoalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goals to delete
     */
    where?: GoalWhereInput
    /**
     * Limit how many Goals to delete.
     */
    limit?: number
  }

  /**
   * Goal.learningPlans
   */
  export type Goal$learningPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningPlan
     */
    select?: LearningPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningPlan
     */
    omit?: LearningPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningPlanInclude<ExtArgs> | null
    where?: LearningPlanWhereInput
    orderBy?: LearningPlanOrderByWithRelationInput | LearningPlanOrderByWithRelationInput[]
    cursor?: LearningPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LearningPlanScalarFieldEnum | LearningPlanScalarFieldEnum[]
  }

  /**
   * Goal without action
   */
  export type GoalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
  }


  /**
   * Model Textbook
   */

  export type AggregateTextbook = {
    _count: TextbookCountAggregateOutputType | null
    _min: TextbookMinAggregateOutputType | null
    _max: TextbookMaxAggregateOutputType | null
  }

  export type TextbookMinAggregateOutputType = {
    id: string | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TextbookMaxAggregateOutputType = {
    id: string | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TextbookCountAggregateOutputType = {
    id: number
    title: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TextbookMinAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TextbookMaxAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TextbookCountAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TextbookAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Textbook to aggregate.
     */
    where?: TextbookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Textbooks to fetch.
     */
    orderBy?: TextbookOrderByWithRelationInput | TextbookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TextbookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Textbooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Textbooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Textbooks
    **/
    _count?: true | TextbookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TextbookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TextbookMaxAggregateInputType
  }

  export type GetTextbookAggregateType<T extends TextbookAggregateArgs> = {
        [P in keyof T & keyof AggregateTextbook]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTextbook[P]>
      : GetScalarType<T[P], AggregateTextbook[P]>
  }




  export type TextbookGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TextbookWhereInput
    orderBy?: TextbookOrderByWithAggregationInput | TextbookOrderByWithAggregationInput[]
    by: TextbookScalarFieldEnum[] | TextbookScalarFieldEnum
    having?: TextbookScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TextbookCountAggregateInputType | true
    _min?: TextbookMinAggregateInputType
    _max?: TextbookMaxAggregateInputType
  }

  export type TextbookGroupByOutputType = {
    id: string
    title: string
    createdAt: Date
    updatedAt: Date
    _count: TextbookCountAggregateOutputType | null
    _min: TextbookMinAggregateOutputType | null
    _max: TextbookMaxAggregateOutputType | null
  }

  type GetTextbookGroupByPayload<T extends TextbookGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TextbookGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TextbookGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TextbookGroupByOutputType[P]>
            : GetScalarType<T[P], TextbookGroupByOutputType[P]>
        }
      >
    >


  export type TextbookSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chapters?: boolean | Textbook$chaptersArgs<ExtArgs>
    _count?: boolean | TextbookCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["textbook"]>

  export type TextbookSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["textbook"]>

  export type TextbookSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["textbook"]>

  export type TextbookSelectScalar = {
    id?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TextbookOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "createdAt" | "updatedAt", ExtArgs["result"]["textbook"]>
  export type TextbookInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chapters?: boolean | Textbook$chaptersArgs<ExtArgs>
    _count?: boolean | TextbookCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TextbookIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TextbookIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TextbookPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Textbook"
    objects: {
      chapters: Prisma.$ChapterPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["textbook"]>
    composites: {}
  }

  type TextbookGetPayload<S extends boolean | null | undefined | TextbookDefaultArgs> = $Result.GetResult<Prisma.$TextbookPayload, S>

  type TextbookCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TextbookFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TextbookCountAggregateInputType | true
    }

  export interface TextbookDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Textbook'], meta: { name: 'Textbook' } }
    /**
     * Find zero or one Textbook that matches the filter.
     * @param {TextbookFindUniqueArgs} args - Arguments to find a Textbook
     * @example
     * // Get one Textbook
     * const textbook = await prisma.textbook.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TextbookFindUniqueArgs>(args: SelectSubset<T, TextbookFindUniqueArgs<ExtArgs>>): Prisma__TextbookClient<$Result.GetResult<Prisma.$TextbookPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Textbook that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TextbookFindUniqueOrThrowArgs} args - Arguments to find a Textbook
     * @example
     * // Get one Textbook
     * const textbook = await prisma.textbook.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TextbookFindUniqueOrThrowArgs>(args: SelectSubset<T, TextbookFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TextbookClient<$Result.GetResult<Prisma.$TextbookPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Textbook that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TextbookFindFirstArgs} args - Arguments to find a Textbook
     * @example
     * // Get one Textbook
     * const textbook = await prisma.textbook.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TextbookFindFirstArgs>(args?: SelectSubset<T, TextbookFindFirstArgs<ExtArgs>>): Prisma__TextbookClient<$Result.GetResult<Prisma.$TextbookPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Textbook that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TextbookFindFirstOrThrowArgs} args - Arguments to find a Textbook
     * @example
     * // Get one Textbook
     * const textbook = await prisma.textbook.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TextbookFindFirstOrThrowArgs>(args?: SelectSubset<T, TextbookFindFirstOrThrowArgs<ExtArgs>>): Prisma__TextbookClient<$Result.GetResult<Prisma.$TextbookPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Textbooks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TextbookFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Textbooks
     * const textbooks = await prisma.textbook.findMany()
     * 
     * // Get first 10 Textbooks
     * const textbooks = await prisma.textbook.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const textbookWithIdOnly = await prisma.textbook.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TextbookFindManyArgs>(args?: SelectSubset<T, TextbookFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TextbookPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Textbook.
     * @param {TextbookCreateArgs} args - Arguments to create a Textbook.
     * @example
     * // Create one Textbook
     * const Textbook = await prisma.textbook.create({
     *   data: {
     *     // ... data to create a Textbook
     *   }
     * })
     * 
     */
    create<T extends TextbookCreateArgs>(args: SelectSubset<T, TextbookCreateArgs<ExtArgs>>): Prisma__TextbookClient<$Result.GetResult<Prisma.$TextbookPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Textbooks.
     * @param {TextbookCreateManyArgs} args - Arguments to create many Textbooks.
     * @example
     * // Create many Textbooks
     * const textbook = await prisma.textbook.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TextbookCreateManyArgs>(args?: SelectSubset<T, TextbookCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Textbooks and returns the data saved in the database.
     * @param {TextbookCreateManyAndReturnArgs} args - Arguments to create many Textbooks.
     * @example
     * // Create many Textbooks
     * const textbook = await prisma.textbook.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Textbooks and only return the `id`
     * const textbookWithIdOnly = await prisma.textbook.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TextbookCreateManyAndReturnArgs>(args?: SelectSubset<T, TextbookCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TextbookPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Textbook.
     * @param {TextbookDeleteArgs} args - Arguments to delete one Textbook.
     * @example
     * // Delete one Textbook
     * const Textbook = await prisma.textbook.delete({
     *   where: {
     *     // ... filter to delete one Textbook
     *   }
     * })
     * 
     */
    delete<T extends TextbookDeleteArgs>(args: SelectSubset<T, TextbookDeleteArgs<ExtArgs>>): Prisma__TextbookClient<$Result.GetResult<Prisma.$TextbookPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Textbook.
     * @param {TextbookUpdateArgs} args - Arguments to update one Textbook.
     * @example
     * // Update one Textbook
     * const textbook = await prisma.textbook.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TextbookUpdateArgs>(args: SelectSubset<T, TextbookUpdateArgs<ExtArgs>>): Prisma__TextbookClient<$Result.GetResult<Prisma.$TextbookPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Textbooks.
     * @param {TextbookDeleteManyArgs} args - Arguments to filter Textbooks to delete.
     * @example
     * // Delete a few Textbooks
     * const { count } = await prisma.textbook.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TextbookDeleteManyArgs>(args?: SelectSubset<T, TextbookDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Textbooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TextbookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Textbooks
     * const textbook = await prisma.textbook.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TextbookUpdateManyArgs>(args: SelectSubset<T, TextbookUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Textbooks and returns the data updated in the database.
     * @param {TextbookUpdateManyAndReturnArgs} args - Arguments to update many Textbooks.
     * @example
     * // Update many Textbooks
     * const textbook = await prisma.textbook.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Textbooks and only return the `id`
     * const textbookWithIdOnly = await prisma.textbook.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TextbookUpdateManyAndReturnArgs>(args: SelectSubset<T, TextbookUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TextbookPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Textbook.
     * @param {TextbookUpsertArgs} args - Arguments to update or create a Textbook.
     * @example
     * // Update or create a Textbook
     * const textbook = await prisma.textbook.upsert({
     *   create: {
     *     // ... data to create a Textbook
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Textbook we want to update
     *   }
     * })
     */
    upsert<T extends TextbookUpsertArgs>(args: SelectSubset<T, TextbookUpsertArgs<ExtArgs>>): Prisma__TextbookClient<$Result.GetResult<Prisma.$TextbookPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Textbooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TextbookCountArgs} args - Arguments to filter Textbooks to count.
     * @example
     * // Count the number of Textbooks
     * const count = await prisma.textbook.count({
     *   where: {
     *     // ... the filter for the Textbooks we want to count
     *   }
     * })
    **/
    count<T extends TextbookCountArgs>(
      args?: Subset<T, TextbookCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TextbookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Textbook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TextbookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TextbookAggregateArgs>(args: Subset<T, TextbookAggregateArgs>): Prisma.PrismaPromise<GetTextbookAggregateType<T>>

    /**
     * Group by Textbook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TextbookGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TextbookGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TextbookGroupByArgs['orderBy'] }
        : { orderBy?: TextbookGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TextbookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTextbookGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Textbook model
   */
  readonly fields: TextbookFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Textbook.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TextbookClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chapters<T extends Textbook$chaptersArgs<ExtArgs> = {}>(args?: Subset<T, Textbook$chaptersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Textbook model
   */
  interface TextbookFieldRefs {
    readonly id: FieldRef<"Textbook", 'String'>
    readonly title: FieldRef<"Textbook", 'String'>
    readonly createdAt: FieldRef<"Textbook", 'DateTime'>
    readonly updatedAt: FieldRef<"Textbook", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Textbook findUnique
   */
  export type TextbookFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Textbook
     */
    select?: TextbookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Textbook
     */
    omit?: TextbookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TextbookInclude<ExtArgs> | null
    /**
     * Filter, which Textbook to fetch.
     */
    where: TextbookWhereUniqueInput
  }

  /**
   * Textbook findUniqueOrThrow
   */
  export type TextbookFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Textbook
     */
    select?: TextbookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Textbook
     */
    omit?: TextbookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TextbookInclude<ExtArgs> | null
    /**
     * Filter, which Textbook to fetch.
     */
    where: TextbookWhereUniqueInput
  }

  /**
   * Textbook findFirst
   */
  export type TextbookFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Textbook
     */
    select?: TextbookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Textbook
     */
    omit?: TextbookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TextbookInclude<ExtArgs> | null
    /**
     * Filter, which Textbook to fetch.
     */
    where?: TextbookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Textbooks to fetch.
     */
    orderBy?: TextbookOrderByWithRelationInput | TextbookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Textbooks.
     */
    cursor?: TextbookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Textbooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Textbooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Textbooks.
     */
    distinct?: TextbookScalarFieldEnum | TextbookScalarFieldEnum[]
  }

  /**
   * Textbook findFirstOrThrow
   */
  export type TextbookFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Textbook
     */
    select?: TextbookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Textbook
     */
    omit?: TextbookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TextbookInclude<ExtArgs> | null
    /**
     * Filter, which Textbook to fetch.
     */
    where?: TextbookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Textbooks to fetch.
     */
    orderBy?: TextbookOrderByWithRelationInput | TextbookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Textbooks.
     */
    cursor?: TextbookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Textbooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Textbooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Textbooks.
     */
    distinct?: TextbookScalarFieldEnum | TextbookScalarFieldEnum[]
  }

  /**
   * Textbook findMany
   */
  export type TextbookFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Textbook
     */
    select?: TextbookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Textbook
     */
    omit?: TextbookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TextbookInclude<ExtArgs> | null
    /**
     * Filter, which Textbooks to fetch.
     */
    where?: TextbookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Textbooks to fetch.
     */
    orderBy?: TextbookOrderByWithRelationInput | TextbookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Textbooks.
     */
    cursor?: TextbookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Textbooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Textbooks.
     */
    skip?: number
    distinct?: TextbookScalarFieldEnum | TextbookScalarFieldEnum[]
  }

  /**
   * Textbook create
   */
  export type TextbookCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Textbook
     */
    select?: TextbookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Textbook
     */
    omit?: TextbookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TextbookInclude<ExtArgs> | null
    /**
     * The data needed to create a Textbook.
     */
    data: XOR<TextbookCreateInput, TextbookUncheckedCreateInput>
  }

  /**
   * Textbook createMany
   */
  export type TextbookCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Textbooks.
     */
    data: TextbookCreateManyInput | TextbookCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Textbook createManyAndReturn
   */
  export type TextbookCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Textbook
     */
    select?: TextbookSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Textbook
     */
    omit?: TextbookOmit<ExtArgs> | null
    /**
     * The data used to create many Textbooks.
     */
    data: TextbookCreateManyInput | TextbookCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Textbook update
   */
  export type TextbookUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Textbook
     */
    select?: TextbookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Textbook
     */
    omit?: TextbookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TextbookInclude<ExtArgs> | null
    /**
     * The data needed to update a Textbook.
     */
    data: XOR<TextbookUpdateInput, TextbookUncheckedUpdateInput>
    /**
     * Choose, which Textbook to update.
     */
    where: TextbookWhereUniqueInput
  }

  /**
   * Textbook updateMany
   */
  export type TextbookUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Textbooks.
     */
    data: XOR<TextbookUpdateManyMutationInput, TextbookUncheckedUpdateManyInput>
    /**
     * Filter which Textbooks to update
     */
    where?: TextbookWhereInput
    /**
     * Limit how many Textbooks to update.
     */
    limit?: number
  }

  /**
   * Textbook updateManyAndReturn
   */
  export type TextbookUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Textbook
     */
    select?: TextbookSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Textbook
     */
    omit?: TextbookOmit<ExtArgs> | null
    /**
     * The data used to update Textbooks.
     */
    data: XOR<TextbookUpdateManyMutationInput, TextbookUncheckedUpdateManyInput>
    /**
     * Filter which Textbooks to update
     */
    where?: TextbookWhereInput
    /**
     * Limit how many Textbooks to update.
     */
    limit?: number
  }

  /**
   * Textbook upsert
   */
  export type TextbookUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Textbook
     */
    select?: TextbookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Textbook
     */
    omit?: TextbookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TextbookInclude<ExtArgs> | null
    /**
     * The filter to search for the Textbook to update in case it exists.
     */
    where: TextbookWhereUniqueInput
    /**
     * In case the Textbook found by the `where` argument doesn't exist, create a new Textbook with this data.
     */
    create: XOR<TextbookCreateInput, TextbookUncheckedCreateInput>
    /**
     * In case the Textbook was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TextbookUpdateInput, TextbookUncheckedUpdateInput>
  }

  /**
   * Textbook delete
   */
  export type TextbookDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Textbook
     */
    select?: TextbookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Textbook
     */
    omit?: TextbookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TextbookInclude<ExtArgs> | null
    /**
     * Filter which Textbook to delete.
     */
    where: TextbookWhereUniqueInput
  }

  /**
   * Textbook deleteMany
   */
  export type TextbookDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Textbooks to delete
     */
    where?: TextbookWhereInput
    /**
     * Limit how many Textbooks to delete.
     */
    limit?: number
  }

  /**
   * Textbook.chapters
   */
  export type Textbook$chaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    where?: ChapterWhereInput
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    cursor?: ChapterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }

  /**
   * Textbook without action
   */
  export type TextbookDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Textbook
     */
    select?: TextbookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Textbook
     */
    omit?: TextbookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TextbookInclude<ExtArgs> | null
  }


  /**
   * Model Chapter
   */

  export type AggregateChapter = {
    _count: ChapterCountAggregateOutputType | null
    _avg: ChapterAvgAggregateOutputType | null
    _sum: ChapterSumAggregateOutputType | null
    _min: ChapterMinAggregateOutputType | null
    _max: ChapterMaxAggregateOutputType | null
  }

  export type ChapterAvgAggregateOutputType = {
    orderIndex: number | null
  }

  export type ChapterSumAggregateOutputType = {
    orderIndex: number | null
  }

  export type ChapterMinAggregateOutputType = {
    id: string | null
    textbookId: string | null
    title: string | null
    orderIndex: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChapterMaxAggregateOutputType = {
    id: string | null
    textbookId: string | null
    title: string | null
    orderIndex: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChapterCountAggregateOutputType = {
    id: number
    textbookId: number
    title: number
    orderIndex: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChapterAvgAggregateInputType = {
    orderIndex?: true
  }

  export type ChapterSumAggregateInputType = {
    orderIndex?: true
  }

  export type ChapterMinAggregateInputType = {
    id?: true
    textbookId?: true
    title?: true
    orderIndex?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChapterMaxAggregateInputType = {
    id?: true
    textbookId?: true
    title?: true
    orderIndex?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChapterCountAggregateInputType = {
    id?: true
    textbookId?: true
    title?: true
    orderIndex?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChapterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chapter to aggregate.
     */
    where?: ChapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chapters to fetch.
     */
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chapters
    **/
    _count?: true | ChapterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChapterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChapterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChapterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChapterMaxAggregateInputType
  }

  export type GetChapterAggregateType<T extends ChapterAggregateArgs> = {
        [P in keyof T & keyof AggregateChapter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChapter[P]>
      : GetScalarType<T[P], AggregateChapter[P]>
  }




  export type ChapterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChapterWhereInput
    orderBy?: ChapterOrderByWithAggregationInput | ChapterOrderByWithAggregationInput[]
    by: ChapterScalarFieldEnum[] | ChapterScalarFieldEnum
    having?: ChapterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChapterCountAggregateInputType | true
    _avg?: ChapterAvgAggregateInputType
    _sum?: ChapterSumAggregateInputType
    _min?: ChapterMinAggregateInputType
    _max?: ChapterMaxAggregateInputType
  }

  export type ChapterGroupByOutputType = {
    id: string
    textbookId: string
    title: string
    orderIndex: number
    createdAt: Date
    updatedAt: Date
    _count: ChapterCountAggregateOutputType | null
    _avg: ChapterAvgAggregateOutputType | null
    _sum: ChapterSumAggregateOutputType | null
    _min: ChapterMinAggregateOutputType | null
    _max: ChapterMaxAggregateOutputType | null
  }

  type GetChapterGroupByPayload<T extends ChapterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChapterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChapterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChapterGroupByOutputType[P]>
            : GetScalarType<T[P], ChapterGroupByOutputType[P]>
        }
      >
    >


  export type ChapterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    textbookId?: boolean
    title?: boolean
    orderIndex?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    textbook?: boolean | TextbookDefaultArgs<ExtArgs>
    sections?: boolean | Chapter$sectionsArgs<ExtArgs>
    _count?: boolean | ChapterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chapter"]>

  export type ChapterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    textbookId?: boolean
    title?: boolean
    orderIndex?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    textbook?: boolean | TextbookDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chapter"]>

  export type ChapterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    textbookId?: boolean
    title?: boolean
    orderIndex?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    textbook?: boolean | TextbookDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chapter"]>

  export type ChapterSelectScalar = {
    id?: boolean
    textbookId?: boolean
    title?: boolean
    orderIndex?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChapterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "textbookId" | "title" | "orderIndex" | "createdAt" | "updatedAt", ExtArgs["result"]["chapter"]>
  export type ChapterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    textbook?: boolean | TextbookDefaultArgs<ExtArgs>
    sections?: boolean | Chapter$sectionsArgs<ExtArgs>
    _count?: boolean | ChapterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChapterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    textbook?: boolean | TextbookDefaultArgs<ExtArgs>
  }
  export type ChapterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    textbook?: boolean | TextbookDefaultArgs<ExtArgs>
  }

  export type $ChapterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Chapter"
    objects: {
      textbook: Prisma.$TextbookPayload<ExtArgs>
      sections: Prisma.$SectionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      textbookId: string
      title: string
      orderIndex: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["chapter"]>
    composites: {}
  }

  type ChapterGetPayload<S extends boolean | null | undefined | ChapterDefaultArgs> = $Result.GetResult<Prisma.$ChapterPayload, S>

  type ChapterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChapterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChapterCountAggregateInputType | true
    }

  export interface ChapterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chapter'], meta: { name: 'Chapter' } }
    /**
     * Find zero or one Chapter that matches the filter.
     * @param {ChapterFindUniqueArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChapterFindUniqueArgs>(args: SelectSubset<T, ChapterFindUniqueArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Chapter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChapterFindUniqueOrThrowArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChapterFindUniqueOrThrowArgs>(args: SelectSubset<T, ChapterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Chapter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterFindFirstArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChapterFindFirstArgs>(args?: SelectSubset<T, ChapterFindFirstArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Chapter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterFindFirstOrThrowArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChapterFindFirstOrThrowArgs>(args?: SelectSubset<T, ChapterFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Chapters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chapters
     * const chapters = await prisma.chapter.findMany()
     * 
     * // Get first 10 Chapters
     * const chapters = await prisma.chapter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chapterWithIdOnly = await prisma.chapter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChapterFindManyArgs>(args?: SelectSubset<T, ChapterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Chapter.
     * @param {ChapterCreateArgs} args - Arguments to create a Chapter.
     * @example
     * // Create one Chapter
     * const Chapter = await prisma.chapter.create({
     *   data: {
     *     // ... data to create a Chapter
     *   }
     * })
     * 
     */
    create<T extends ChapterCreateArgs>(args: SelectSubset<T, ChapterCreateArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Chapters.
     * @param {ChapterCreateManyArgs} args - Arguments to create many Chapters.
     * @example
     * // Create many Chapters
     * const chapter = await prisma.chapter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChapterCreateManyArgs>(args?: SelectSubset<T, ChapterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Chapters and returns the data saved in the database.
     * @param {ChapterCreateManyAndReturnArgs} args - Arguments to create many Chapters.
     * @example
     * // Create many Chapters
     * const chapter = await prisma.chapter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Chapters and only return the `id`
     * const chapterWithIdOnly = await prisma.chapter.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChapterCreateManyAndReturnArgs>(args?: SelectSubset<T, ChapterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Chapter.
     * @param {ChapterDeleteArgs} args - Arguments to delete one Chapter.
     * @example
     * // Delete one Chapter
     * const Chapter = await prisma.chapter.delete({
     *   where: {
     *     // ... filter to delete one Chapter
     *   }
     * })
     * 
     */
    delete<T extends ChapterDeleteArgs>(args: SelectSubset<T, ChapterDeleteArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Chapter.
     * @param {ChapterUpdateArgs} args - Arguments to update one Chapter.
     * @example
     * // Update one Chapter
     * const chapter = await prisma.chapter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChapterUpdateArgs>(args: SelectSubset<T, ChapterUpdateArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Chapters.
     * @param {ChapterDeleteManyArgs} args - Arguments to filter Chapters to delete.
     * @example
     * // Delete a few Chapters
     * const { count } = await prisma.chapter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChapterDeleteManyArgs>(args?: SelectSubset<T, ChapterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chapters
     * const chapter = await prisma.chapter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChapterUpdateManyArgs>(args: SelectSubset<T, ChapterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chapters and returns the data updated in the database.
     * @param {ChapterUpdateManyAndReturnArgs} args - Arguments to update many Chapters.
     * @example
     * // Update many Chapters
     * const chapter = await prisma.chapter.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Chapters and only return the `id`
     * const chapterWithIdOnly = await prisma.chapter.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChapterUpdateManyAndReturnArgs>(args: SelectSubset<T, ChapterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Chapter.
     * @param {ChapterUpsertArgs} args - Arguments to update or create a Chapter.
     * @example
     * // Update or create a Chapter
     * const chapter = await prisma.chapter.upsert({
     *   create: {
     *     // ... data to create a Chapter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chapter we want to update
     *   }
     * })
     */
    upsert<T extends ChapterUpsertArgs>(args: SelectSubset<T, ChapterUpsertArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Chapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterCountArgs} args - Arguments to filter Chapters to count.
     * @example
     * // Count the number of Chapters
     * const count = await prisma.chapter.count({
     *   where: {
     *     // ... the filter for the Chapters we want to count
     *   }
     * })
    **/
    count<T extends ChapterCountArgs>(
      args?: Subset<T, ChapterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChapterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chapter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChapterAggregateArgs>(args: Subset<T, ChapterAggregateArgs>): Prisma.PrismaPromise<GetChapterAggregateType<T>>

    /**
     * Group by Chapter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChapterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChapterGroupByArgs['orderBy'] }
        : { orderBy?: ChapterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChapterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChapterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Chapter model
   */
  readonly fields: ChapterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Chapter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChapterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    textbook<T extends TextbookDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TextbookDefaultArgs<ExtArgs>>): Prisma__TextbookClient<$Result.GetResult<Prisma.$TextbookPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sections<T extends Chapter$sectionsArgs<ExtArgs> = {}>(args?: Subset<T, Chapter$sectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Chapter model
   */
  interface ChapterFieldRefs {
    readonly id: FieldRef<"Chapter", 'String'>
    readonly textbookId: FieldRef<"Chapter", 'String'>
    readonly title: FieldRef<"Chapter", 'String'>
    readonly orderIndex: FieldRef<"Chapter", 'Int'>
    readonly createdAt: FieldRef<"Chapter", 'DateTime'>
    readonly updatedAt: FieldRef<"Chapter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Chapter findUnique
   */
  export type ChapterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapter to fetch.
     */
    where: ChapterWhereUniqueInput
  }

  /**
   * Chapter findUniqueOrThrow
   */
  export type ChapterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapter to fetch.
     */
    where: ChapterWhereUniqueInput
  }

  /**
   * Chapter findFirst
   */
  export type ChapterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapter to fetch.
     */
    where?: ChapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chapters to fetch.
     */
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chapters.
     */
    cursor?: ChapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chapters.
     */
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }

  /**
   * Chapter findFirstOrThrow
   */
  export type ChapterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapter to fetch.
     */
    where?: ChapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chapters to fetch.
     */
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chapters.
     */
    cursor?: ChapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chapters.
     */
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }

  /**
   * Chapter findMany
   */
  export type ChapterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapters to fetch.
     */
    where?: ChapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chapters to fetch.
     */
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chapters.
     */
    cursor?: ChapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chapters.
     */
    skip?: number
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }

  /**
   * Chapter create
   */
  export type ChapterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * The data needed to create a Chapter.
     */
    data: XOR<ChapterCreateInput, ChapterUncheckedCreateInput>
  }

  /**
   * Chapter createMany
   */
  export type ChapterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Chapters.
     */
    data: ChapterCreateManyInput | ChapterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Chapter createManyAndReturn
   */
  export type ChapterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * The data used to create many Chapters.
     */
    data: ChapterCreateManyInput | ChapterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Chapter update
   */
  export type ChapterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * The data needed to update a Chapter.
     */
    data: XOR<ChapterUpdateInput, ChapterUncheckedUpdateInput>
    /**
     * Choose, which Chapter to update.
     */
    where: ChapterWhereUniqueInput
  }

  /**
   * Chapter updateMany
   */
  export type ChapterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Chapters.
     */
    data: XOR<ChapterUpdateManyMutationInput, ChapterUncheckedUpdateManyInput>
    /**
     * Filter which Chapters to update
     */
    where?: ChapterWhereInput
    /**
     * Limit how many Chapters to update.
     */
    limit?: number
  }

  /**
   * Chapter updateManyAndReturn
   */
  export type ChapterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * The data used to update Chapters.
     */
    data: XOR<ChapterUpdateManyMutationInput, ChapterUncheckedUpdateManyInput>
    /**
     * Filter which Chapters to update
     */
    where?: ChapterWhereInput
    /**
     * Limit how many Chapters to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Chapter upsert
   */
  export type ChapterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * The filter to search for the Chapter to update in case it exists.
     */
    where: ChapterWhereUniqueInput
    /**
     * In case the Chapter found by the `where` argument doesn't exist, create a new Chapter with this data.
     */
    create: XOR<ChapterCreateInput, ChapterUncheckedCreateInput>
    /**
     * In case the Chapter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChapterUpdateInput, ChapterUncheckedUpdateInput>
  }

  /**
   * Chapter delete
   */
  export type ChapterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter which Chapter to delete.
     */
    where: ChapterWhereUniqueInput
  }

  /**
   * Chapter deleteMany
   */
  export type ChapterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chapters to delete
     */
    where?: ChapterWhereInput
    /**
     * Limit how many Chapters to delete.
     */
    limit?: number
  }

  /**
   * Chapter.sections
   */
  export type Chapter$sectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    where?: SectionWhereInput
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    cursor?: SectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Chapter without action
   */
  export type ChapterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
  }


  /**
   * Model Section
   */

  export type AggregateSection = {
    _count: SectionCountAggregateOutputType | null
    _avg: SectionAvgAggregateOutputType | null
    _sum: SectionSumAggregateOutputType | null
    _min: SectionMinAggregateOutputType | null
    _max: SectionMaxAggregateOutputType | null
  }

  export type SectionAvgAggregateOutputType = {
    orderIndex: number | null
  }

  export type SectionSumAggregateOutputType = {
    orderIndex: number | null
  }

  export type SectionMinAggregateOutputType = {
    id: string | null
    chapterId: string | null
    title: string | null
    orderIndex: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SectionMaxAggregateOutputType = {
    id: string | null
    chapterId: string | null
    title: string | null
    orderIndex: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SectionCountAggregateOutputType = {
    id: number
    chapterId: number
    title: number
    orderIndex: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SectionAvgAggregateInputType = {
    orderIndex?: true
  }

  export type SectionSumAggregateInputType = {
    orderIndex?: true
  }

  export type SectionMinAggregateInputType = {
    id?: true
    chapterId?: true
    title?: true
    orderIndex?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SectionMaxAggregateInputType = {
    id?: true
    chapterId?: true
    title?: true
    orderIndex?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SectionCountAggregateInputType = {
    id?: true
    chapterId?: true
    title?: true
    orderIndex?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Section to aggregate.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sections
    **/
    _count?: true | SectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SectionMaxAggregateInputType
  }

  export type GetSectionAggregateType<T extends SectionAggregateArgs> = {
        [P in keyof T & keyof AggregateSection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSection[P]>
      : GetScalarType<T[P], AggregateSection[P]>
  }




  export type SectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionWhereInput
    orderBy?: SectionOrderByWithAggregationInput | SectionOrderByWithAggregationInput[]
    by: SectionScalarFieldEnum[] | SectionScalarFieldEnum
    having?: SectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SectionCountAggregateInputType | true
    _avg?: SectionAvgAggregateInputType
    _sum?: SectionSumAggregateInputType
    _min?: SectionMinAggregateInputType
    _max?: SectionMaxAggregateInputType
  }

  export type SectionGroupByOutputType = {
    id: string
    chapterId: string
    title: string
    orderIndex: number
    createdAt: Date
    updatedAt: Date
    _count: SectionCountAggregateOutputType | null
    _avg: SectionAvgAggregateOutputType | null
    _sum: SectionSumAggregateOutputType | null
    _min: SectionMinAggregateOutputType | null
    _max: SectionMaxAggregateOutputType | null
  }

  type GetSectionGroupByPayload<T extends SectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SectionGroupByOutputType[P]>
            : GetScalarType<T[P], SectionGroupByOutputType[P]>
        }
      >
    >


  export type SectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chapterId?: boolean
    title?: boolean
    orderIndex?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chapter?: boolean | ChapterDefaultArgs<ExtArgs>
    questions?: boolean | Section$questionsArgs<ExtArgs>
    _count?: boolean | SectionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["section"]>

  export type SectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chapterId?: boolean
    title?: boolean
    orderIndex?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chapter?: boolean | ChapterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["section"]>

  export type SectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chapterId?: boolean
    title?: boolean
    orderIndex?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chapter?: boolean | ChapterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["section"]>

  export type SectionSelectScalar = {
    id?: boolean
    chapterId?: boolean
    title?: boolean
    orderIndex?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "chapterId" | "title" | "orderIndex" | "createdAt" | "updatedAt", ExtArgs["result"]["section"]>
  export type SectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chapter?: boolean | ChapterDefaultArgs<ExtArgs>
    questions?: boolean | Section$questionsArgs<ExtArgs>
    _count?: boolean | SectionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chapter?: boolean | ChapterDefaultArgs<ExtArgs>
  }
  export type SectionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chapter?: boolean | ChapterDefaultArgs<ExtArgs>
  }

  export type $SectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Section"
    objects: {
      chapter: Prisma.$ChapterPayload<ExtArgs>
      questions: Prisma.$QuestionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      chapterId: string
      title: string
      orderIndex: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["section"]>
    composites: {}
  }

  type SectionGetPayload<S extends boolean | null | undefined | SectionDefaultArgs> = $Result.GetResult<Prisma.$SectionPayload, S>

  type SectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SectionCountAggregateInputType | true
    }

  export interface SectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Section'], meta: { name: 'Section' } }
    /**
     * Find zero or one Section that matches the filter.
     * @param {SectionFindUniqueArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SectionFindUniqueArgs>(args: SelectSubset<T, SectionFindUniqueArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Section that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SectionFindUniqueOrThrowArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SectionFindUniqueOrThrowArgs>(args: SelectSubset<T, SectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Section that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindFirstArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SectionFindFirstArgs>(args?: SelectSubset<T, SectionFindFirstArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Section that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindFirstOrThrowArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SectionFindFirstOrThrowArgs>(args?: SelectSubset<T, SectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sections
     * const sections = await prisma.section.findMany()
     * 
     * // Get first 10 Sections
     * const sections = await prisma.section.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sectionWithIdOnly = await prisma.section.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SectionFindManyArgs>(args?: SelectSubset<T, SectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Section.
     * @param {SectionCreateArgs} args - Arguments to create a Section.
     * @example
     * // Create one Section
     * const Section = await prisma.section.create({
     *   data: {
     *     // ... data to create a Section
     *   }
     * })
     * 
     */
    create<T extends SectionCreateArgs>(args: SelectSubset<T, SectionCreateArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sections.
     * @param {SectionCreateManyArgs} args - Arguments to create many Sections.
     * @example
     * // Create many Sections
     * const section = await prisma.section.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SectionCreateManyArgs>(args?: SelectSubset<T, SectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sections and returns the data saved in the database.
     * @param {SectionCreateManyAndReturnArgs} args - Arguments to create many Sections.
     * @example
     * // Create many Sections
     * const section = await prisma.section.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sections and only return the `id`
     * const sectionWithIdOnly = await prisma.section.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SectionCreateManyAndReturnArgs>(args?: SelectSubset<T, SectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Section.
     * @param {SectionDeleteArgs} args - Arguments to delete one Section.
     * @example
     * // Delete one Section
     * const Section = await prisma.section.delete({
     *   where: {
     *     // ... filter to delete one Section
     *   }
     * })
     * 
     */
    delete<T extends SectionDeleteArgs>(args: SelectSubset<T, SectionDeleteArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Section.
     * @param {SectionUpdateArgs} args - Arguments to update one Section.
     * @example
     * // Update one Section
     * const section = await prisma.section.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SectionUpdateArgs>(args: SelectSubset<T, SectionUpdateArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sections.
     * @param {SectionDeleteManyArgs} args - Arguments to filter Sections to delete.
     * @example
     * // Delete a few Sections
     * const { count } = await prisma.section.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SectionDeleteManyArgs>(args?: SelectSubset<T, SectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sections
     * const section = await prisma.section.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SectionUpdateManyArgs>(args: SelectSubset<T, SectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sections and returns the data updated in the database.
     * @param {SectionUpdateManyAndReturnArgs} args - Arguments to update many Sections.
     * @example
     * // Update many Sections
     * const section = await prisma.section.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sections and only return the `id`
     * const sectionWithIdOnly = await prisma.section.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SectionUpdateManyAndReturnArgs>(args: SelectSubset<T, SectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Section.
     * @param {SectionUpsertArgs} args - Arguments to update or create a Section.
     * @example
     * // Update or create a Section
     * const section = await prisma.section.upsert({
     *   create: {
     *     // ... data to create a Section
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Section we want to update
     *   }
     * })
     */
    upsert<T extends SectionUpsertArgs>(args: SelectSubset<T, SectionUpsertArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionCountArgs} args - Arguments to filter Sections to count.
     * @example
     * // Count the number of Sections
     * const count = await prisma.section.count({
     *   where: {
     *     // ... the filter for the Sections we want to count
     *   }
     * })
    **/
    count<T extends SectionCountArgs>(
      args?: Subset<T, SectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Section.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SectionAggregateArgs>(args: Subset<T, SectionAggregateArgs>): Prisma.PrismaPromise<GetSectionAggregateType<T>>

    /**
     * Group by Section.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SectionGroupByArgs['orderBy'] }
        : { orderBy?: SectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Section model
   */
  readonly fields: SectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Section.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chapter<T extends ChapterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChapterDefaultArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    questions<T extends Section$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Section$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Section model
   */
  interface SectionFieldRefs {
    readonly id: FieldRef<"Section", 'String'>
    readonly chapterId: FieldRef<"Section", 'String'>
    readonly title: FieldRef<"Section", 'String'>
    readonly orderIndex: FieldRef<"Section", 'Int'>
    readonly createdAt: FieldRef<"Section", 'DateTime'>
    readonly updatedAt: FieldRef<"Section", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Section findUnique
   */
  export type SectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section findUniqueOrThrow
   */
  export type SectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section findFirst
   */
  export type SectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sections.
     */
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section findFirstOrThrow
   */
  export type SectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sections.
     */
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section findMany
   */
  export type SectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Sections to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section create
   */
  export type SectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The data needed to create a Section.
     */
    data: XOR<SectionCreateInput, SectionUncheckedCreateInput>
  }

  /**
   * Section createMany
   */
  export type SectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sections.
     */
    data: SectionCreateManyInput | SectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Section createManyAndReturn
   */
  export type SectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * The data used to create many Sections.
     */
    data: SectionCreateManyInput | SectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Section update
   */
  export type SectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The data needed to update a Section.
     */
    data: XOR<SectionUpdateInput, SectionUncheckedUpdateInput>
    /**
     * Choose, which Section to update.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section updateMany
   */
  export type SectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sections.
     */
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyInput>
    /**
     * Filter which Sections to update
     */
    where?: SectionWhereInput
    /**
     * Limit how many Sections to update.
     */
    limit?: number
  }

  /**
   * Section updateManyAndReturn
   */
  export type SectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * The data used to update Sections.
     */
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyInput>
    /**
     * Filter which Sections to update
     */
    where?: SectionWhereInput
    /**
     * Limit how many Sections to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Section upsert
   */
  export type SectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The filter to search for the Section to update in case it exists.
     */
    where: SectionWhereUniqueInput
    /**
     * In case the Section found by the `where` argument doesn't exist, create a new Section with this data.
     */
    create: XOR<SectionCreateInput, SectionUncheckedCreateInput>
    /**
     * In case the Section was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SectionUpdateInput, SectionUncheckedUpdateInput>
  }

  /**
   * Section delete
   */
  export type SectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter which Section to delete.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section deleteMany
   */
  export type SectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sections to delete
     */
    where?: SectionWhereInput
    /**
     * Limit how many Sections to delete.
     */
    limit?: number
  }

  /**
   * Section.questions
   */
  export type Section$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Section without action
   */
  export type SectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
  }


  /**
   * Model Question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    difficulty: number | null
  }

  export type QuestionSumAggregateOutputType = {
    difficulty: number | null
  }

  export type QuestionMinAggregateOutputType = {
    id: string | null
    sectionId: string | null
    content: string | null
    difficulty: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: string | null
    sectionId: string | null
    content: string | null
    difficulty: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    sectionId: number
    content: number
    difficulty: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    difficulty?: true
  }

  export type QuestionSumAggregateInputType = {
    difficulty?: true
  }

  export type QuestionMinAggregateInputType = {
    id?: true
    sectionId?: true
    content?: true
    difficulty?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    sectionId?: true
    content?: true
    difficulty?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    sectionId?: true
    content?: true
    difficulty?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithAggregationInput | QuestionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    id: string
    sectionId: string
    content: string
    difficulty: number
    createdAt: Date
    updatedAt: Date
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sectionId?: boolean
    content?: boolean
    difficulty?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    section?: boolean | SectionDefaultArgs<ExtArgs>
    learningTasks?: boolean | Question$learningTasksArgs<ExtArgs>
    attemptLogs?: boolean | Question$attemptLogsArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sectionId?: boolean
    content?: boolean
    difficulty?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sectionId?: boolean
    content?: boolean
    difficulty?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectScalar = {
    id?: boolean
    sectionId?: boolean
    content?: boolean
    difficulty?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sectionId" | "content" | "difficulty" | "createdAt" | "updatedAt", ExtArgs["result"]["question"]>
  export type QuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    section?: boolean | SectionDefaultArgs<ExtArgs>
    learningTasks?: boolean | Question$learningTasksArgs<ExtArgs>
    attemptLogs?: boolean | Question$attemptLogsArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }

  export type $QuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Question"
    objects: {
      section: Prisma.$SectionPayload<ExtArgs>
      learningTasks: Prisma.$LearningTaskPayload<ExtArgs>[]
      attemptLogs: Prisma.$QuestionAttemptLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sectionId: string
      content: string
      difficulty: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["question"]>
    composites: {}
  }

  type QuestionGetPayload<S extends boolean | null | undefined | QuestionDefaultArgs> = $Result.GetResult<Prisma.$QuestionPayload, S>

  type QuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionFindUniqueArgs>(args: SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Question that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionFindFirstArgs>(args?: SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionFindManyArgs>(args?: SelectSubset<T, QuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
     */
    create<T extends QuestionCreateArgs>(args: SelectSubset<T, QuestionCreateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Questions.
     * @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionCreateManyArgs>(args?: SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Questions and returns the data saved in the database.
     * @param {QuestionCreateManyAndReturnArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
     */
    delete<T extends QuestionDeleteArgs>(args: SelectSubset<T, QuestionDeleteArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionUpdateArgs>(args: SelectSubset<T, QuestionUpdateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionDeleteManyArgs>(args?: SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionUpdateManyArgs>(args: SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions and returns the data updated in the database.
     * @param {QuestionUpdateManyAndReturnArgs} args - Arguments to update many Questions.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
     */
    upsert<T extends QuestionUpsertArgs>(args: SelectSubset<T, QuestionUpsertArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Question model
   */
  readonly fields: QuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    section<T extends SectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SectionDefaultArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    learningTasks<T extends Question$learningTasksArgs<ExtArgs> = {}>(args?: Subset<T, Question$learningTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attemptLogs<T extends Question$attemptLogsArgs<ExtArgs> = {}>(args?: Subset<T, Question$attemptLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionAttemptLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Question model
   */
  interface QuestionFieldRefs {
    readonly id: FieldRef<"Question", 'String'>
    readonly sectionId: FieldRef<"Question", 'String'>
    readonly content: FieldRef<"Question", 'String'>
    readonly difficulty: FieldRef<"Question", 'Int'>
    readonly createdAt: FieldRef<"Question", 'DateTime'>
    readonly updatedAt: FieldRef<"Question", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Question findUnique
   */
  export type QuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findFirst
   */
  export type QuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findMany
   */
  export type QuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question create
   */
  export type QuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }

  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Question createManyAndReturn
   */
  export type QuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question update
   */
  export type QuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
  }

  /**
   * Question updateManyAndReturn
   */
  export type QuestionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question upsert
   */
  export type QuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }

  /**
   * Question delete
   */
  export type QuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to delete.
     */
    limit?: number
  }

  /**
   * Question.learningTasks
   */
  export type Question$learningTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningTask
     */
    select?: LearningTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningTask
     */
    omit?: LearningTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningTaskInclude<ExtArgs> | null
    where?: LearningTaskWhereInput
    orderBy?: LearningTaskOrderByWithRelationInput | LearningTaskOrderByWithRelationInput[]
    cursor?: LearningTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LearningTaskScalarFieldEnum | LearningTaskScalarFieldEnum[]
  }

  /**
   * Question.attemptLogs
   */
  export type Question$attemptLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAttemptLog
     */
    select?: QuestionAttemptLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAttemptLog
     */
    omit?: QuestionAttemptLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAttemptLogInclude<ExtArgs> | null
    where?: QuestionAttemptLogWhereInput
    orderBy?: QuestionAttemptLogOrderByWithRelationInput | QuestionAttemptLogOrderByWithRelationInput[]
    cursor?: QuestionAttemptLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionAttemptLogScalarFieldEnum | QuestionAttemptLogScalarFieldEnum[]
  }

  /**
   * Question without action
   */
  export type QuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
  }


  /**
   * Model LearningPlan
   */

  export type AggregateLearningPlan = {
    _count: LearningPlanCountAggregateOutputType | null
    _avg: LearningPlanAvgAggregateOutputType | null
    _sum: LearningPlanSumAggregateOutputType | null
    _min: LearningPlanMinAggregateOutputType | null
    _max: LearningPlanMaxAggregateOutputType | null
  }

  export type LearningPlanAvgAggregateOutputType = {
    maxDays: number | null
    baseDays: number | null
    reviewDays: number | null
  }

  export type LearningPlanSumAggregateOutputType = {
    maxDays: number | null
    baseDays: number | null
    reviewDays: number | null
  }

  export type LearningPlanMinAggregateOutputType = {
    id: string | null
    userId: string | null
    goalId: string | null
    generatedBy: string | null
    maxDays: number | null
    baseDays: number | null
    finalStudyDate: Date | null
    reviewDays: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LearningPlanMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    goalId: string | null
    generatedBy: string | null
    maxDays: number | null
    baseDays: number | null
    finalStudyDate: Date | null
    reviewDays: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LearningPlanCountAggregateOutputType = {
    id: number
    userId: number
    goalId: number
    generatedBy: number
    maxDays: number
    baseDays: number
    finalStudyDate: number
    reviewDays: number
    reviewWeekdays: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LearningPlanAvgAggregateInputType = {
    maxDays?: true
    baseDays?: true
    reviewDays?: true
  }

  export type LearningPlanSumAggregateInputType = {
    maxDays?: true
    baseDays?: true
    reviewDays?: true
  }

  export type LearningPlanMinAggregateInputType = {
    id?: true
    userId?: true
    goalId?: true
    generatedBy?: true
    maxDays?: true
    baseDays?: true
    finalStudyDate?: true
    reviewDays?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LearningPlanMaxAggregateInputType = {
    id?: true
    userId?: true
    goalId?: true
    generatedBy?: true
    maxDays?: true
    baseDays?: true
    finalStudyDate?: true
    reviewDays?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LearningPlanCountAggregateInputType = {
    id?: true
    userId?: true
    goalId?: true
    generatedBy?: true
    maxDays?: true
    baseDays?: true
    finalStudyDate?: true
    reviewDays?: true
    reviewWeekdays?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LearningPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LearningPlan to aggregate.
     */
    where?: LearningPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningPlans to fetch.
     */
    orderBy?: LearningPlanOrderByWithRelationInput | LearningPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LearningPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LearningPlans
    **/
    _count?: true | LearningPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LearningPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LearningPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LearningPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LearningPlanMaxAggregateInputType
  }

  export type GetLearningPlanAggregateType<T extends LearningPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateLearningPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLearningPlan[P]>
      : GetScalarType<T[P], AggregateLearningPlan[P]>
  }




  export type LearningPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LearningPlanWhereInput
    orderBy?: LearningPlanOrderByWithAggregationInput | LearningPlanOrderByWithAggregationInput[]
    by: LearningPlanScalarFieldEnum[] | LearningPlanScalarFieldEnum
    having?: LearningPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LearningPlanCountAggregateInputType | true
    _avg?: LearningPlanAvgAggregateInputType
    _sum?: LearningPlanSumAggregateInputType
    _min?: LearningPlanMinAggregateInputType
    _max?: LearningPlanMaxAggregateInputType
  }

  export type LearningPlanGroupByOutputType = {
    id: string
    userId: string
    goalId: string
    generatedBy: string
    maxDays: number
    baseDays: number
    finalStudyDate: Date
    reviewDays: number
    reviewWeekdays: string[]
    createdAt: Date
    updatedAt: Date
    _count: LearningPlanCountAggregateOutputType | null
    _avg: LearningPlanAvgAggregateOutputType | null
    _sum: LearningPlanSumAggregateOutputType | null
    _min: LearningPlanMinAggregateOutputType | null
    _max: LearningPlanMaxAggregateOutputType | null
  }

  type GetLearningPlanGroupByPayload<T extends LearningPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LearningPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LearningPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LearningPlanGroupByOutputType[P]>
            : GetScalarType<T[P], LearningPlanGroupByOutputType[P]>
        }
      >
    >


  export type LearningPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    goalId?: boolean
    generatedBy?: boolean
    maxDays?: boolean
    baseDays?: boolean
    finalStudyDate?: boolean
    reviewDays?: boolean
    reviewWeekdays?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    learningTasks?: boolean | LearningPlan$learningTasksArgs<ExtArgs>
    planRevisions?: boolean | LearningPlan$planRevisionsArgs<ExtArgs>
    _count?: boolean | LearningPlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["learningPlan"]>

  export type LearningPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    goalId?: boolean
    generatedBy?: boolean
    maxDays?: boolean
    baseDays?: boolean
    finalStudyDate?: boolean
    reviewDays?: boolean
    reviewWeekdays?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    goal?: boolean | GoalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["learningPlan"]>

  export type LearningPlanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    goalId?: boolean
    generatedBy?: boolean
    maxDays?: boolean
    baseDays?: boolean
    finalStudyDate?: boolean
    reviewDays?: boolean
    reviewWeekdays?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    goal?: boolean | GoalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["learningPlan"]>

  export type LearningPlanSelectScalar = {
    id?: boolean
    userId?: boolean
    goalId?: boolean
    generatedBy?: boolean
    maxDays?: boolean
    baseDays?: boolean
    finalStudyDate?: boolean
    reviewDays?: boolean
    reviewWeekdays?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LearningPlanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "goalId" | "generatedBy" | "maxDays" | "baseDays" | "finalStudyDate" | "reviewDays" | "reviewWeekdays" | "createdAt" | "updatedAt", ExtArgs["result"]["learningPlan"]>
  export type LearningPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    goal?: boolean | GoalDefaultArgs<ExtArgs>
    learningTasks?: boolean | LearningPlan$learningTasksArgs<ExtArgs>
    planRevisions?: boolean | LearningPlan$planRevisionsArgs<ExtArgs>
    _count?: boolean | LearningPlanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LearningPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    goal?: boolean | GoalDefaultArgs<ExtArgs>
  }
  export type LearningPlanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    goal?: boolean | GoalDefaultArgs<ExtArgs>
  }

  export type $LearningPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LearningPlan"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      goal: Prisma.$GoalPayload<ExtArgs>
      learningTasks: Prisma.$LearningTaskPayload<ExtArgs>[]
      planRevisions: Prisma.$PlanRevisionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      goalId: string
      generatedBy: string
      maxDays: number
      baseDays: number
      finalStudyDate: Date
      reviewDays: number
      reviewWeekdays: string[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["learningPlan"]>
    composites: {}
  }

  type LearningPlanGetPayload<S extends boolean | null | undefined | LearningPlanDefaultArgs> = $Result.GetResult<Prisma.$LearningPlanPayload, S>

  type LearningPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LearningPlanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LearningPlanCountAggregateInputType | true
    }

  export interface LearningPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LearningPlan'], meta: { name: 'LearningPlan' } }
    /**
     * Find zero or one LearningPlan that matches the filter.
     * @param {LearningPlanFindUniqueArgs} args - Arguments to find a LearningPlan
     * @example
     * // Get one LearningPlan
     * const learningPlan = await prisma.learningPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LearningPlanFindUniqueArgs>(args: SelectSubset<T, LearningPlanFindUniqueArgs<ExtArgs>>): Prisma__LearningPlanClient<$Result.GetResult<Prisma.$LearningPlanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LearningPlan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LearningPlanFindUniqueOrThrowArgs} args - Arguments to find a LearningPlan
     * @example
     * // Get one LearningPlan
     * const learningPlan = await prisma.learningPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LearningPlanFindUniqueOrThrowArgs>(args: SelectSubset<T, LearningPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LearningPlanClient<$Result.GetResult<Prisma.$LearningPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LearningPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningPlanFindFirstArgs} args - Arguments to find a LearningPlan
     * @example
     * // Get one LearningPlan
     * const learningPlan = await prisma.learningPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LearningPlanFindFirstArgs>(args?: SelectSubset<T, LearningPlanFindFirstArgs<ExtArgs>>): Prisma__LearningPlanClient<$Result.GetResult<Prisma.$LearningPlanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LearningPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningPlanFindFirstOrThrowArgs} args - Arguments to find a LearningPlan
     * @example
     * // Get one LearningPlan
     * const learningPlan = await prisma.learningPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LearningPlanFindFirstOrThrowArgs>(args?: SelectSubset<T, LearningPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__LearningPlanClient<$Result.GetResult<Prisma.$LearningPlanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LearningPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LearningPlans
     * const learningPlans = await prisma.learningPlan.findMany()
     * 
     * // Get first 10 LearningPlans
     * const learningPlans = await prisma.learningPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const learningPlanWithIdOnly = await prisma.learningPlan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LearningPlanFindManyArgs>(args?: SelectSubset<T, LearningPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningPlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LearningPlan.
     * @param {LearningPlanCreateArgs} args - Arguments to create a LearningPlan.
     * @example
     * // Create one LearningPlan
     * const LearningPlan = await prisma.learningPlan.create({
     *   data: {
     *     // ... data to create a LearningPlan
     *   }
     * })
     * 
     */
    create<T extends LearningPlanCreateArgs>(args: SelectSubset<T, LearningPlanCreateArgs<ExtArgs>>): Prisma__LearningPlanClient<$Result.GetResult<Prisma.$LearningPlanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LearningPlans.
     * @param {LearningPlanCreateManyArgs} args - Arguments to create many LearningPlans.
     * @example
     * // Create many LearningPlans
     * const learningPlan = await prisma.learningPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LearningPlanCreateManyArgs>(args?: SelectSubset<T, LearningPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LearningPlans and returns the data saved in the database.
     * @param {LearningPlanCreateManyAndReturnArgs} args - Arguments to create many LearningPlans.
     * @example
     * // Create many LearningPlans
     * const learningPlan = await prisma.learningPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LearningPlans and only return the `id`
     * const learningPlanWithIdOnly = await prisma.learningPlan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LearningPlanCreateManyAndReturnArgs>(args?: SelectSubset<T, LearningPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningPlanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LearningPlan.
     * @param {LearningPlanDeleteArgs} args - Arguments to delete one LearningPlan.
     * @example
     * // Delete one LearningPlan
     * const LearningPlan = await prisma.learningPlan.delete({
     *   where: {
     *     // ... filter to delete one LearningPlan
     *   }
     * })
     * 
     */
    delete<T extends LearningPlanDeleteArgs>(args: SelectSubset<T, LearningPlanDeleteArgs<ExtArgs>>): Prisma__LearningPlanClient<$Result.GetResult<Prisma.$LearningPlanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LearningPlan.
     * @param {LearningPlanUpdateArgs} args - Arguments to update one LearningPlan.
     * @example
     * // Update one LearningPlan
     * const learningPlan = await prisma.learningPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LearningPlanUpdateArgs>(args: SelectSubset<T, LearningPlanUpdateArgs<ExtArgs>>): Prisma__LearningPlanClient<$Result.GetResult<Prisma.$LearningPlanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LearningPlans.
     * @param {LearningPlanDeleteManyArgs} args - Arguments to filter LearningPlans to delete.
     * @example
     * // Delete a few LearningPlans
     * const { count } = await prisma.learningPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LearningPlanDeleteManyArgs>(args?: SelectSubset<T, LearningPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LearningPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LearningPlans
     * const learningPlan = await prisma.learningPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LearningPlanUpdateManyArgs>(args: SelectSubset<T, LearningPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LearningPlans and returns the data updated in the database.
     * @param {LearningPlanUpdateManyAndReturnArgs} args - Arguments to update many LearningPlans.
     * @example
     * // Update many LearningPlans
     * const learningPlan = await prisma.learningPlan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LearningPlans and only return the `id`
     * const learningPlanWithIdOnly = await prisma.learningPlan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LearningPlanUpdateManyAndReturnArgs>(args: SelectSubset<T, LearningPlanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningPlanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LearningPlan.
     * @param {LearningPlanUpsertArgs} args - Arguments to update or create a LearningPlan.
     * @example
     * // Update or create a LearningPlan
     * const learningPlan = await prisma.learningPlan.upsert({
     *   create: {
     *     // ... data to create a LearningPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LearningPlan we want to update
     *   }
     * })
     */
    upsert<T extends LearningPlanUpsertArgs>(args: SelectSubset<T, LearningPlanUpsertArgs<ExtArgs>>): Prisma__LearningPlanClient<$Result.GetResult<Prisma.$LearningPlanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LearningPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningPlanCountArgs} args - Arguments to filter LearningPlans to count.
     * @example
     * // Count the number of LearningPlans
     * const count = await prisma.learningPlan.count({
     *   where: {
     *     // ... the filter for the LearningPlans we want to count
     *   }
     * })
    **/
    count<T extends LearningPlanCountArgs>(
      args?: Subset<T, LearningPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LearningPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LearningPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LearningPlanAggregateArgs>(args: Subset<T, LearningPlanAggregateArgs>): Prisma.PrismaPromise<GetLearningPlanAggregateType<T>>

    /**
     * Group by LearningPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LearningPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LearningPlanGroupByArgs['orderBy'] }
        : { orderBy?: LearningPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LearningPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLearningPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LearningPlan model
   */
  readonly fields: LearningPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LearningPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LearningPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    goal<T extends GoalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GoalDefaultArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    learningTasks<T extends LearningPlan$learningTasksArgs<ExtArgs> = {}>(args?: Subset<T, LearningPlan$learningTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    planRevisions<T extends LearningPlan$planRevisionsArgs<ExtArgs> = {}>(args?: Subset<T, LearningPlan$planRevisionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanRevisionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LearningPlan model
   */
  interface LearningPlanFieldRefs {
    readonly id: FieldRef<"LearningPlan", 'String'>
    readonly userId: FieldRef<"LearningPlan", 'String'>
    readonly goalId: FieldRef<"LearningPlan", 'String'>
    readonly generatedBy: FieldRef<"LearningPlan", 'String'>
    readonly maxDays: FieldRef<"LearningPlan", 'Int'>
    readonly baseDays: FieldRef<"LearningPlan", 'Int'>
    readonly finalStudyDate: FieldRef<"LearningPlan", 'DateTime'>
    readonly reviewDays: FieldRef<"LearningPlan", 'Int'>
    readonly reviewWeekdays: FieldRef<"LearningPlan", 'String[]'>
    readonly createdAt: FieldRef<"LearningPlan", 'DateTime'>
    readonly updatedAt: FieldRef<"LearningPlan", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LearningPlan findUnique
   */
  export type LearningPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningPlan
     */
    select?: LearningPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningPlan
     */
    omit?: LearningPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningPlanInclude<ExtArgs> | null
    /**
     * Filter, which LearningPlan to fetch.
     */
    where: LearningPlanWhereUniqueInput
  }

  /**
   * LearningPlan findUniqueOrThrow
   */
  export type LearningPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningPlan
     */
    select?: LearningPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningPlan
     */
    omit?: LearningPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningPlanInclude<ExtArgs> | null
    /**
     * Filter, which LearningPlan to fetch.
     */
    where: LearningPlanWhereUniqueInput
  }

  /**
   * LearningPlan findFirst
   */
  export type LearningPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningPlan
     */
    select?: LearningPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningPlan
     */
    omit?: LearningPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningPlanInclude<ExtArgs> | null
    /**
     * Filter, which LearningPlan to fetch.
     */
    where?: LearningPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningPlans to fetch.
     */
    orderBy?: LearningPlanOrderByWithRelationInput | LearningPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LearningPlans.
     */
    cursor?: LearningPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LearningPlans.
     */
    distinct?: LearningPlanScalarFieldEnum | LearningPlanScalarFieldEnum[]
  }

  /**
   * LearningPlan findFirstOrThrow
   */
  export type LearningPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningPlan
     */
    select?: LearningPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningPlan
     */
    omit?: LearningPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningPlanInclude<ExtArgs> | null
    /**
     * Filter, which LearningPlan to fetch.
     */
    where?: LearningPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningPlans to fetch.
     */
    orderBy?: LearningPlanOrderByWithRelationInput | LearningPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LearningPlans.
     */
    cursor?: LearningPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LearningPlans.
     */
    distinct?: LearningPlanScalarFieldEnum | LearningPlanScalarFieldEnum[]
  }

  /**
   * LearningPlan findMany
   */
  export type LearningPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningPlan
     */
    select?: LearningPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningPlan
     */
    omit?: LearningPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningPlanInclude<ExtArgs> | null
    /**
     * Filter, which LearningPlans to fetch.
     */
    where?: LearningPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningPlans to fetch.
     */
    orderBy?: LearningPlanOrderByWithRelationInput | LearningPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LearningPlans.
     */
    cursor?: LearningPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningPlans.
     */
    skip?: number
    distinct?: LearningPlanScalarFieldEnum | LearningPlanScalarFieldEnum[]
  }

  /**
   * LearningPlan create
   */
  export type LearningPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningPlan
     */
    select?: LearningPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningPlan
     */
    omit?: LearningPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a LearningPlan.
     */
    data: XOR<LearningPlanCreateInput, LearningPlanUncheckedCreateInput>
  }

  /**
   * LearningPlan createMany
   */
  export type LearningPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LearningPlans.
     */
    data: LearningPlanCreateManyInput | LearningPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LearningPlan createManyAndReturn
   */
  export type LearningPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningPlan
     */
    select?: LearningPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LearningPlan
     */
    omit?: LearningPlanOmit<ExtArgs> | null
    /**
     * The data used to create many LearningPlans.
     */
    data: LearningPlanCreateManyInput | LearningPlanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningPlanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LearningPlan update
   */
  export type LearningPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningPlan
     */
    select?: LearningPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningPlan
     */
    omit?: LearningPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a LearningPlan.
     */
    data: XOR<LearningPlanUpdateInput, LearningPlanUncheckedUpdateInput>
    /**
     * Choose, which LearningPlan to update.
     */
    where: LearningPlanWhereUniqueInput
  }

  /**
   * LearningPlan updateMany
   */
  export type LearningPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LearningPlans.
     */
    data: XOR<LearningPlanUpdateManyMutationInput, LearningPlanUncheckedUpdateManyInput>
    /**
     * Filter which LearningPlans to update
     */
    where?: LearningPlanWhereInput
    /**
     * Limit how many LearningPlans to update.
     */
    limit?: number
  }

  /**
   * LearningPlan updateManyAndReturn
   */
  export type LearningPlanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningPlan
     */
    select?: LearningPlanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LearningPlan
     */
    omit?: LearningPlanOmit<ExtArgs> | null
    /**
     * The data used to update LearningPlans.
     */
    data: XOR<LearningPlanUpdateManyMutationInput, LearningPlanUncheckedUpdateManyInput>
    /**
     * Filter which LearningPlans to update
     */
    where?: LearningPlanWhereInput
    /**
     * Limit how many LearningPlans to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningPlanIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LearningPlan upsert
   */
  export type LearningPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningPlan
     */
    select?: LearningPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningPlan
     */
    omit?: LearningPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the LearningPlan to update in case it exists.
     */
    where: LearningPlanWhereUniqueInput
    /**
     * In case the LearningPlan found by the `where` argument doesn't exist, create a new LearningPlan with this data.
     */
    create: XOR<LearningPlanCreateInput, LearningPlanUncheckedCreateInput>
    /**
     * In case the LearningPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LearningPlanUpdateInput, LearningPlanUncheckedUpdateInput>
  }

  /**
   * LearningPlan delete
   */
  export type LearningPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningPlan
     */
    select?: LearningPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningPlan
     */
    omit?: LearningPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningPlanInclude<ExtArgs> | null
    /**
     * Filter which LearningPlan to delete.
     */
    where: LearningPlanWhereUniqueInput
  }

  /**
   * LearningPlan deleteMany
   */
  export type LearningPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LearningPlans to delete
     */
    where?: LearningPlanWhereInput
    /**
     * Limit how many LearningPlans to delete.
     */
    limit?: number
  }

  /**
   * LearningPlan.learningTasks
   */
  export type LearningPlan$learningTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningTask
     */
    select?: LearningTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningTask
     */
    omit?: LearningTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningTaskInclude<ExtArgs> | null
    where?: LearningTaskWhereInput
    orderBy?: LearningTaskOrderByWithRelationInput | LearningTaskOrderByWithRelationInput[]
    cursor?: LearningTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LearningTaskScalarFieldEnum | LearningTaskScalarFieldEnum[]
  }

  /**
   * LearningPlan.planRevisions
   */
  export type LearningPlan$planRevisionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanRevision
     */
    select?: PlanRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanRevision
     */
    omit?: PlanRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanRevisionInclude<ExtArgs> | null
    where?: PlanRevisionWhereInput
    orderBy?: PlanRevisionOrderByWithRelationInput | PlanRevisionOrderByWithRelationInput[]
    cursor?: PlanRevisionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlanRevisionScalarFieldEnum | PlanRevisionScalarFieldEnum[]
  }

  /**
   * LearningPlan without action
   */
  export type LearningPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningPlan
     */
    select?: LearningPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningPlan
     */
    omit?: LearningPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningPlanInclude<ExtArgs> | null
  }


  /**
   * Model LearningTask
   */

  export type AggregateLearningTask = {
    _count: LearningTaskCountAggregateOutputType | null
    _avg: LearningTaskAvgAggregateOutputType | null
    _sum: LearningTaskSumAggregateOutputType | null
    _min: LearningTaskMinAggregateOutputType | null
    _max: LearningTaskMaxAggregateOutputType | null
  }

  export type LearningTaskAvgAggregateOutputType = {
    orderInDay: number | null
  }

  export type LearningTaskSumAggregateOutputType = {
    orderInDay: number | null
  }

  export type LearningTaskMinAggregateOutputType = {
    id: string | null
    planId: string | null
    date: Date | null
    questionId: string | null
    orderInDay: number | null
    isReviewDay: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LearningTaskMaxAggregateOutputType = {
    id: string | null
    planId: string | null
    date: Date | null
    questionId: string | null
    orderInDay: number | null
    isReviewDay: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LearningTaskCountAggregateOutputType = {
    id: number
    planId: number
    date: number
    questionId: number
    orderInDay: number
    isReviewDay: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LearningTaskAvgAggregateInputType = {
    orderInDay?: true
  }

  export type LearningTaskSumAggregateInputType = {
    orderInDay?: true
  }

  export type LearningTaskMinAggregateInputType = {
    id?: true
    planId?: true
    date?: true
    questionId?: true
    orderInDay?: true
    isReviewDay?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LearningTaskMaxAggregateInputType = {
    id?: true
    planId?: true
    date?: true
    questionId?: true
    orderInDay?: true
    isReviewDay?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LearningTaskCountAggregateInputType = {
    id?: true
    planId?: true
    date?: true
    questionId?: true
    orderInDay?: true
    isReviewDay?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LearningTaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LearningTask to aggregate.
     */
    where?: LearningTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningTasks to fetch.
     */
    orderBy?: LearningTaskOrderByWithRelationInput | LearningTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LearningTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LearningTasks
    **/
    _count?: true | LearningTaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LearningTaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LearningTaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LearningTaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LearningTaskMaxAggregateInputType
  }

  export type GetLearningTaskAggregateType<T extends LearningTaskAggregateArgs> = {
        [P in keyof T & keyof AggregateLearningTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLearningTask[P]>
      : GetScalarType<T[P], AggregateLearningTask[P]>
  }




  export type LearningTaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LearningTaskWhereInput
    orderBy?: LearningTaskOrderByWithAggregationInput | LearningTaskOrderByWithAggregationInput[]
    by: LearningTaskScalarFieldEnum[] | LearningTaskScalarFieldEnum
    having?: LearningTaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LearningTaskCountAggregateInputType | true
    _avg?: LearningTaskAvgAggregateInputType
    _sum?: LearningTaskSumAggregateInputType
    _min?: LearningTaskMinAggregateInputType
    _max?: LearningTaskMaxAggregateInputType
  }

  export type LearningTaskGroupByOutputType = {
    id: string
    planId: string
    date: Date
    questionId: string
    orderInDay: number
    isReviewDay: boolean
    createdAt: Date
    updatedAt: Date
    _count: LearningTaskCountAggregateOutputType | null
    _avg: LearningTaskAvgAggregateOutputType | null
    _sum: LearningTaskSumAggregateOutputType | null
    _min: LearningTaskMinAggregateOutputType | null
    _max: LearningTaskMaxAggregateOutputType | null
  }

  type GetLearningTaskGroupByPayload<T extends LearningTaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LearningTaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LearningTaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LearningTaskGroupByOutputType[P]>
            : GetScalarType<T[P], LearningTaskGroupByOutputType[P]>
        }
      >
    >


  export type LearningTaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planId?: boolean
    date?: boolean
    questionId?: boolean
    orderInDay?: boolean
    isReviewDay?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    learningPlan?: boolean | LearningPlanDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["learningTask"]>

  export type LearningTaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planId?: boolean
    date?: boolean
    questionId?: boolean
    orderInDay?: boolean
    isReviewDay?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    learningPlan?: boolean | LearningPlanDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["learningTask"]>

  export type LearningTaskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planId?: boolean
    date?: boolean
    questionId?: boolean
    orderInDay?: boolean
    isReviewDay?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    learningPlan?: boolean | LearningPlanDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["learningTask"]>

  export type LearningTaskSelectScalar = {
    id?: boolean
    planId?: boolean
    date?: boolean
    questionId?: boolean
    orderInDay?: boolean
    isReviewDay?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LearningTaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "planId" | "date" | "questionId" | "orderInDay" | "isReviewDay" | "createdAt" | "updatedAt", ExtArgs["result"]["learningTask"]>
  export type LearningTaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    learningPlan?: boolean | LearningPlanDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }
  export type LearningTaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    learningPlan?: boolean | LearningPlanDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }
  export type LearningTaskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    learningPlan?: boolean | LearningPlanDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }

  export type $LearningTaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LearningTask"
    objects: {
      learningPlan: Prisma.$LearningPlanPayload<ExtArgs>
      question: Prisma.$QuestionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      planId: string
      date: Date
      questionId: string
      orderInDay: number
      isReviewDay: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["learningTask"]>
    composites: {}
  }

  type LearningTaskGetPayload<S extends boolean | null | undefined | LearningTaskDefaultArgs> = $Result.GetResult<Prisma.$LearningTaskPayload, S>

  type LearningTaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LearningTaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LearningTaskCountAggregateInputType | true
    }

  export interface LearningTaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LearningTask'], meta: { name: 'LearningTask' } }
    /**
     * Find zero or one LearningTask that matches the filter.
     * @param {LearningTaskFindUniqueArgs} args - Arguments to find a LearningTask
     * @example
     * // Get one LearningTask
     * const learningTask = await prisma.learningTask.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LearningTaskFindUniqueArgs>(args: SelectSubset<T, LearningTaskFindUniqueArgs<ExtArgs>>): Prisma__LearningTaskClient<$Result.GetResult<Prisma.$LearningTaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LearningTask that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LearningTaskFindUniqueOrThrowArgs} args - Arguments to find a LearningTask
     * @example
     * // Get one LearningTask
     * const learningTask = await prisma.learningTask.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LearningTaskFindUniqueOrThrowArgs>(args: SelectSubset<T, LearningTaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LearningTaskClient<$Result.GetResult<Prisma.$LearningTaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LearningTask that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningTaskFindFirstArgs} args - Arguments to find a LearningTask
     * @example
     * // Get one LearningTask
     * const learningTask = await prisma.learningTask.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LearningTaskFindFirstArgs>(args?: SelectSubset<T, LearningTaskFindFirstArgs<ExtArgs>>): Prisma__LearningTaskClient<$Result.GetResult<Prisma.$LearningTaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LearningTask that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningTaskFindFirstOrThrowArgs} args - Arguments to find a LearningTask
     * @example
     * // Get one LearningTask
     * const learningTask = await prisma.learningTask.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LearningTaskFindFirstOrThrowArgs>(args?: SelectSubset<T, LearningTaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__LearningTaskClient<$Result.GetResult<Prisma.$LearningTaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LearningTasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningTaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LearningTasks
     * const learningTasks = await prisma.learningTask.findMany()
     * 
     * // Get first 10 LearningTasks
     * const learningTasks = await prisma.learningTask.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const learningTaskWithIdOnly = await prisma.learningTask.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LearningTaskFindManyArgs>(args?: SelectSubset<T, LearningTaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningTaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LearningTask.
     * @param {LearningTaskCreateArgs} args - Arguments to create a LearningTask.
     * @example
     * // Create one LearningTask
     * const LearningTask = await prisma.learningTask.create({
     *   data: {
     *     // ... data to create a LearningTask
     *   }
     * })
     * 
     */
    create<T extends LearningTaskCreateArgs>(args: SelectSubset<T, LearningTaskCreateArgs<ExtArgs>>): Prisma__LearningTaskClient<$Result.GetResult<Prisma.$LearningTaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LearningTasks.
     * @param {LearningTaskCreateManyArgs} args - Arguments to create many LearningTasks.
     * @example
     * // Create many LearningTasks
     * const learningTask = await prisma.learningTask.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LearningTaskCreateManyArgs>(args?: SelectSubset<T, LearningTaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LearningTasks and returns the data saved in the database.
     * @param {LearningTaskCreateManyAndReturnArgs} args - Arguments to create many LearningTasks.
     * @example
     * // Create many LearningTasks
     * const learningTask = await prisma.learningTask.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LearningTasks and only return the `id`
     * const learningTaskWithIdOnly = await prisma.learningTask.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LearningTaskCreateManyAndReturnArgs>(args?: SelectSubset<T, LearningTaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningTaskPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LearningTask.
     * @param {LearningTaskDeleteArgs} args - Arguments to delete one LearningTask.
     * @example
     * // Delete one LearningTask
     * const LearningTask = await prisma.learningTask.delete({
     *   where: {
     *     // ... filter to delete one LearningTask
     *   }
     * })
     * 
     */
    delete<T extends LearningTaskDeleteArgs>(args: SelectSubset<T, LearningTaskDeleteArgs<ExtArgs>>): Prisma__LearningTaskClient<$Result.GetResult<Prisma.$LearningTaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LearningTask.
     * @param {LearningTaskUpdateArgs} args - Arguments to update one LearningTask.
     * @example
     * // Update one LearningTask
     * const learningTask = await prisma.learningTask.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LearningTaskUpdateArgs>(args: SelectSubset<T, LearningTaskUpdateArgs<ExtArgs>>): Prisma__LearningTaskClient<$Result.GetResult<Prisma.$LearningTaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LearningTasks.
     * @param {LearningTaskDeleteManyArgs} args - Arguments to filter LearningTasks to delete.
     * @example
     * // Delete a few LearningTasks
     * const { count } = await prisma.learningTask.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LearningTaskDeleteManyArgs>(args?: SelectSubset<T, LearningTaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LearningTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningTaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LearningTasks
     * const learningTask = await prisma.learningTask.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LearningTaskUpdateManyArgs>(args: SelectSubset<T, LearningTaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LearningTasks and returns the data updated in the database.
     * @param {LearningTaskUpdateManyAndReturnArgs} args - Arguments to update many LearningTasks.
     * @example
     * // Update many LearningTasks
     * const learningTask = await prisma.learningTask.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LearningTasks and only return the `id`
     * const learningTaskWithIdOnly = await prisma.learningTask.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LearningTaskUpdateManyAndReturnArgs>(args: SelectSubset<T, LearningTaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LearningTaskPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LearningTask.
     * @param {LearningTaskUpsertArgs} args - Arguments to update or create a LearningTask.
     * @example
     * // Update or create a LearningTask
     * const learningTask = await prisma.learningTask.upsert({
     *   create: {
     *     // ... data to create a LearningTask
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LearningTask we want to update
     *   }
     * })
     */
    upsert<T extends LearningTaskUpsertArgs>(args: SelectSubset<T, LearningTaskUpsertArgs<ExtArgs>>): Prisma__LearningTaskClient<$Result.GetResult<Prisma.$LearningTaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LearningTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningTaskCountArgs} args - Arguments to filter LearningTasks to count.
     * @example
     * // Count the number of LearningTasks
     * const count = await prisma.learningTask.count({
     *   where: {
     *     // ... the filter for the LearningTasks we want to count
     *   }
     * })
    **/
    count<T extends LearningTaskCountArgs>(
      args?: Subset<T, LearningTaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LearningTaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LearningTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningTaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LearningTaskAggregateArgs>(args: Subset<T, LearningTaskAggregateArgs>): Prisma.PrismaPromise<GetLearningTaskAggregateType<T>>

    /**
     * Group by LearningTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LearningTaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LearningTaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LearningTaskGroupByArgs['orderBy'] }
        : { orderBy?: LearningTaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LearningTaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLearningTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LearningTask model
   */
  readonly fields: LearningTaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LearningTask.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LearningTaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    learningPlan<T extends LearningPlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LearningPlanDefaultArgs<ExtArgs>>): Prisma__LearningPlanClient<$Result.GetResult<Prisma.$LearningPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LearningTask model
   */
  interface LearningTaskFieldRefs {
    readonly id: FieldRef<"LearningTask", 'String'>
    readonly planId: FieldRef<"LearningTask", 'String'>
    readonly date: FieldRef<"LearningTask", 'DateTime'>
    readonly questionId: FieldRef<"LearningTask", 'String'>
    readonly orderInDay: FieldRef<"LearningTask", 'Int'>
    readonly isReviewDay: FieldRef<"LearningTask", 'Boolean'>
    readonly createdAt: FieldRef<"LearningTask", 'DateTime'>
    readonly updatedAt: FieldRef<"LearningTask", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LearningTask findUnique
   */
  export type LearningTaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningTask
     */
    select?: LearningTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningTask
     */
    omit?: LearningTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningTaskInclude<ExtArgs> | null
    /**
     * Filter, which LearningTask to fetch.
     */
    where: LearningTaskWhereUniqueInput
  }

  /**
   * LearningTask findUniqueOrThrow
   */
  export type LearningTaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningTask
     */
    select?: LearningTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningTask
     */
    omit?: LearningTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningTaskInclude<ExtArgs> | null
    /**
     * Filter, which LearningTask to fetch.
     */
    where: LearningTaskWhereUniqueInput
  }

  /**
   * LearningTask findFirst
   */
  export type LearningTaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningTask
     */
    select?: LearningTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningTask
     */
    omit?: LearningTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningTaskInclude<ExtArgs> | null
    /**
     * Filter, which LearningTask to fetch.
     */
    where?: LearningTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningTasks to fetch.
     */
    orderBy?: LearningTaskOrderByWithRelationInput | LearningTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LearningTasks.
     */
    cursor?: LearningTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LearningTasks.
     */
    distinct?: LearningTaskScalarFieldEnum | LearningTaskScalarFieldEnum[]
  }

  /**
   * LearningTask findFirstOrThrow
   */
  export type LearningTaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningTask
     */
    select?: LearningTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningTask
     */
    omit?: LearningTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningTaskInclude<ExtArgs> | null
    /**
     * Filter, which LearningTask to fetch.
     */
    where?: LearningTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningTasks to fetch.
     */
    orderBy?: LearningTaskOrderByWithRelationInput | LearningTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LearningTasks.
     */
    cursor?: LearningTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LearningTasks.
     */
    distinct?: LearningTaskScalarFieldEnum | LearningTaskScalarFieldEnum[]
  }

  /**
   * LearningTask findMany
   */
  export type LearningTaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningTask
     */
    select?: LearningTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningTask
     */
    omit?: LearningTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningTaskInclude<ExtArgs> | null
    /**
     * Filter, which LearningTasks to fetch.
     */
    where?: LearningTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LearningTasks to fetch.
     */
    orderBy?: LearningTaskOrderByWithRelationInput | LearningTaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LearningTasks.
     */
    cursor?: LearningTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LearningTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LearningTasks.
     */
    skip?: number
    distinct?: LearningTaskScalarFieldEnum | LearningTaskScalarFieldEnum[]
  }

  /**
   * LearningTask create
   */
  export type LearningTaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningTask
     */
    select?: LearningTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningTask
     */
    omit?: LearningTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningTaskInclude<ExtArgs> | null
    /**
     * The data needed to create a LearningTask.
     */
    data: XOR<LearningTaskCreateInput, LearningTaskUncheckedCreateInput>
  }

  /**
   * LearningTask createMany
   */
  export type LearningTaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LearningTasks.
     */
    data: LearningTaskCreateManyInput | LearningTaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LearningTask createManyAndReturn
   */
  export type LearningTaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningTask
     */
    select?: LearningTaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LearningTask
     */
    omit?: LearningTaskOmit<ExtArgs> | null
    /**
     * The data used to create many LearningTasks.
     */
    data: LearningTaskCreateManyInput | LearningTaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningTaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LearningTask update
   */
  export type LearningTaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningTask
     */
    select?: LearningTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningTask
     */
    omit?: LearningTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningTaskInclude<ExtArgs> | null
    /**
     * The data needed to update a LearningTask.
     */
    data: XOR<LearningTaskUpdateInput, LearningTaskUncheckedUpdateInput>
    /**
     * Choose, which LearningTask to update.
     */
    where: LearningTaskWhereUniqueInput
  }

  /**
   * LearningTask updateMany
   */
  export type LearningTaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LearningTasks.
     */
    data: XOR<LearningTaskUpdateManyMutationInput, LearningTaskUncheckedUpdateManyInput>
    /**
     * Filter which LearningTasks to update
     */
    where?: LearningTaskWhereInput
    /**
     * Limit how many LearningTasks to update.
     */
    limit?: number
  }

  /**
   * LearningTask updateManyAndReturn
   */
  export type LearningTaskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningTask
     */
    select?: LearningTaskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LearningTask
     */
    omit?: LearningTaskOmit<ExtArgs> | null
    /**
     * The data used to update LearningTasks.
     */
    data: XOR<LearningTaskUpdateManyMutationInput, LearningTaskUncheckedUpdateManyInput>
    /**
     * Filter which LearningTasks to update
     */
    where?: LearningTaskWhereInput
    /**
     * Limit how many LearningTasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningTaskIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LearningTask upsert
   */
  export type LearningTaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningTask
     */
    select?: LearningTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningTask
     */
    omit?: LearningTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningTaskInclude<ExtArgs> | null
    /**
     * The filter to search for the LearningTask to update in case it exists.
     */
    where: LearningTaskWhereUniqueInput
    /**
     * In case the LearningTask found by the `where` argument doesn't exist, create a new LearningTask with this data.
     */
    create: XOR<LearningTaskCreateInput, LearningTaskUncheckedCreateInput>
    /**
     * In case the LearningTask was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LearningTaskUpdateInput, LearningTaskUncheckedUpdateInput>
  }

  /**
   * LearningTask delete
   */
  export type LearningTaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningTask
     */
    select?: LearningTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningTask
     */
    omit?: LearningTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningTaskInclude<ExtArgs> | null
    /**
     * Filter which LearningTask to delete.
     */
    where: LearningTaskWhereUniqueInput
  }

  /**
   * LearningTask deleteMany
   */
  export type LearningTaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LearningTasks to delete
     */
    where?: LearningTaskWhereInput
    /**
     * Limit how many LearningTasks to delete.
     */
    limit?: number
  }

  /**
   * LearningTask without action
   */
  export type LearningTaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LearningTask
     */
    select?: LearningTaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LearningTask
     */
    omit?: LearningTaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LearningTaskInclude<ExtArgs> | null
  }


  /**
   * Model QuestionAttemptLog
   */

  export type AggregateQuestionAttemptLog = {
    _count: QuestionAttemptLogCountAggregateOutputType | null
    _min: QuestionAttemptLogMinAggregateOutputType | null
    _max: QuestionAttemptLogMaxAggregateOutputType | null
  }

  export type QuestionAttemptLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    questionId: string | null
    date: Date | null
    status: string | null
    source: string | null
    updatedAt: Date | null
  }

  export type QuestionAttemptLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    questionId: string | null
    date: Date | null
    status: string | null
    source: string | null
    updatedAt: Date | null
  }

  export type QuestionAttemptLogCountAggregateOutputType = {
    id: number
    userId: number
    questionId: number
    date: number
    status: number
    source: number
    updatedAt: number
    _all: number
  }


  export type QuestionAttemptLogMinAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
    date?: true
    status?: true
    source?: true
    updatedAt?: true
  }

  export type QuestionAttemptLogMaxAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
    date?: true
    status?: true
    source?: true
    updatedAt?: true
  }

  export type QuestionAttemptLogCountAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
    date?: true
    status?: true
    source?: true
    updatedAt?: true
    _all?: true
  }

  export type QuestionAttemptLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionAttemptLog to aggregate.
     */
    where?: QuestionAttemptLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionAttemptLogs to fetch.
     */
    orderBy?: QuestionAttemptLogOrderByWithRelationInput | QuestionAttemptLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionAttemptLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionAttemptLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionAttemptLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionAttemptLogs
    **/
    _count?: true | QuestionAttemptLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionAttemptLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionAttemptLogMaxAggregateInputType
  }

  export type GetQuestionAttemptLogAggregateType<T extends QuestionAttemptLogAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionAttemptLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionAttemptLog[P]>
      : GetScalarType<T[P], AggregateQuestionAttemptLog[P]>
  }




  export type QuestionAttemptLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionAttemptLogWhereInput
    orderBy?: QuestionAttemptLogOrderByWithAggregationInput | QuestionAttemptLogOrderByWithAggregationInput[]
    by: QuestionAttemptLogScalarFieldEnum[] | QuestionAttemptLogScalarFieldEnum
    having?: QuestionAttemptLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionAttemptLogCountAggregateInputType | true
    _min?: QuestionAttemptLogMinAggregateInputType
    _max?: QuestionAttemptLogMaxAggregateInputType
  }

  export type QuestionAttemptLogGroupByOutputType = {
    id: string
    userId: string
    questionId: string
    date: Date
    status: string
    source: string
    updatedAt: Date
    _count: QuestionAttemptLogCountAggregateOutputType | null
    _min: QuestionAttemptLogMinAggregateOutputType | null
    _max: QuestionAttemptLogMaxAggregateOutputType | null
  }

  type GetQuestionAttemptLogGroupByPayload<T extends QuestionAttemptLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionAttemptLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionAttemptLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionAttemptLogGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionAttemptLogGroupByOutputType[P]>
        }
      >
    >


  export type QuestionAttemptLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionId?: boolean
    date?: boolean
    status?: boolean
    source?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionAttemptLog"]>

  export type QuestionAttemptLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionId?: boolean
    date?: boolean
    status?: boolean
    source?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionAttemptLog"]>

  export type QuestionAttemptLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionId?: boolean
    date?: boolean
    status?: boolean
    source?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionAttemptLog"]>

  export type QuestionAttemptLogSelectScalar = {
    id?: boolean
    userId?: boolean
    questionId?: boolean
    date?: boolean
    status?: boolean
    source?: boolean
    updatedAt?: boolean
  }

  export type QuestionAttemptLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "questionId" | "date" | "status" | "source" | "updatedAt", ExtArgs["result"]["questionAttemptLog"]>
  export type QuestionAttemptLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }
  export type QuestionAttemptLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }
  export type QuestionAttemptLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }

  export type $QuestionAttemptLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionAttemptLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      question: Prisma.$QuestionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      questionId: string
      date: Date
      status: string
      source: string
      updatedAt: Date
    }, ExtArgs["result"]["questionAttemptLog"]>
    composites: {}
  }

  type QuestionAttemptLogGetPayload<S extends boolean | null | undefined | QuestionAttemptLogDefaultArgs> = $Result.GetResult<Prisma.$QuestionAttemptLogPayload, S>

  type QuestionAttemptLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionAttemptLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionAttemptLogCountAggregateInputType | true
    }

  export interface QuestionAttemptLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionAttemptLog'], meta: { name: 'QuestionAttemptLog' } }
    /**
     * Find zero or one QuestionAttemptLog that matches the filter.
     * @param {QuestionAttemptLogFindUniqueArgs} args - Arguments to find a QuestionAttemptLog
     * @example
     * // Get one QuestionAttemptLog
     * const questionAttemptLog = await prisma.questionAttemptLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionAttemptLogFindUniqueArgs>(args: SelectSubset<T, QuestionAttemptLogFindUniqueArgs<ExtArgs>>): Prisma__QuestionAttemptLogClient<$Result.GetResult<Prisma.$QuestionAttemptLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionAttemptLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionAttemptLogFindUniqueOrThrowArgs} args - Arguments to find a QuestionAttemptLog
     * @example
     * // Get one QuestionAttemptLog
     * const questionAttemptLog = await prisma.questionAttemptLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionAttemptLogFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionAttemptLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionAttemptLogClient<$Result.GetResult<Prisma.$QuestionAttemptLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionAttemptLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAttemptLogFindFirstArgs} args - Arguments to find a QuestionAttemptLog
     * @example
     * // Get one QuestionAttemptLog
     * const questionAttemptLog = await prisma.questionAttemptLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionAttemptLogFindFirstArgs>(args?: SelectSubset<T, QuestionAttemptLogFindFirstArgs<ExtArgs>>): Prisma__QuestionAttemptLogClient<$Result.GetResult<Prisma.$QuestionAttemptLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionAttemptLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAttemptLogFindFirstOrThrowArgs} args - Arguments to find a QuestionAttemptLog
     * @example
     * // Get one QuestionAttemptLog
     * const questionAttemptLog = await prisma.questionAttemptLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionAttemptLogFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionAttemptLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionAttemptLogClient<$Result.GetResult<Prisma.$QuestionAttemptLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionAttemptLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAttemptLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionAttemptLogs
     * const questionAttemptLogs = await prisma.questionAttemptLog.findMany()
     * 
     * // Get first 10 QuestionAttemptLogs
     * const questionAttemptLogs = await prisma.questionAttemptLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionAttemptLogWithIdOnly = await prisma.questionAttemptLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionAttemptLogFindManyArgs>(args?: SelectSubset<T, QuestionAttemptLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionAttemptLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionAttemptLog.
     * @param {QuestionAttemptLogCreateArgs} args - Arguments to create a QuestionAttemptLog.
     * @example
     * // Create one QuestionAttemptLog
     * const QuestionAttemptLog = await prisma.questionAttemptLog.create({
     *   data: {
     *     // ... data to create a QuestionAttemptLog
     *   }
     * })
     * 
     */
    create<T extends QuestionAttemptLogCreateArgs>(args: SelectSubset<T, QuestionAttemptLogCreateArgs<ExtArgs>>): Prisma__QuestionAttemptLogClient<$Result.GetResult<Prisma.$QuestionAttemptLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionAttemptLogs.
     * @param {QuestionAttemptLogCreateManyArgs} args - Arguments to create many QuestionAttemptLogs.
     * @example
     * // Create many QuestionAttemptLogs
     * const questionAttemptLog = await prisma.questionAttemptLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionAttemptLogCreateManyArgs>(args?: SelectSubset<T, QuestionAttemptLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionAttemptLogs and returns the data saved in the database.
     * @param {QuestionAttemptLogCreateManyAndReturnArgs} args - Arguments to create many QuestionAttemptLogs.
     * @example
     * // Create many QuestionAttemptLogs
     * const questionAttemptLog = await prisma.questionAttemptLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionAttemptLogs and only return the `id`
     * const questionAttemptLogWithIdOnly = await prisma.questionAttemptLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionAttemptLogCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionAttemptLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionAttemptLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionAttemptLog.
     * @param {QuestionAttemptLogDeleteArgs} args - Arguments to delete one QuestionAttemptLog.
     * @example
     * // Delete one QuestionAttemptLog
     * const QuestionAttemptLog = await prisma.questionAttemptLog.delete({
     *   where: {
     *     // ... filter to delete one QuestionAttemptLog
     *   }
     * })
     * 
     */
    delete<T extends QuestionAttemptLogDeleteArgs>(args: SelectSubset<T, QuestionAttemptLogDeleteArgs<ExtArgs>>): Prisma__QuestionAttemptLogClient<$Result.GetResult<Prisma.$QuestionAttemptLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionAttemptLog.
     * @param {QuestionAttemptLogUpdateArgs} args - Arguments to update one QuestionAttemptLog.
     * @example
     * // Update one QuestionAttemptLog
     * const questionAttemptLog = await prisma.questionAttemptLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionAttemptLogUpdateArgs>(args: SelectSubset<T, QuestionAttemptLogUpdateArgs<ExtArgs>>): Prisma__QuestionAttemptLogClient<$Result.GetResult<Prisma.$QuestionAttemptLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionAttemptLogs.
     * @param {QuestionAttemptLogDeleteManyArgs} args - Arguments to filter QuestionAttemptLogs to delete.
     * @example
     * // Delete a few QuestionAttemptLogs
     * const { count } = await prisma.questionAttemptLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionAttemptLogDeleteManyArgs>(args?: SelectSubset<T, QuestionAttemptLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionAttemptLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAttemptLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionAttemptLogs
     * const questionAttemptLog = await prisma.questionAttemptLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionAttemptLogUpdateManyArgs>(args: SelectSubset<T, QuestionAttemptLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionAttemptLogs and returns the data updated in the database.
     * @param {QuestionAttemptLogUpdateManyAndReturnArgs} args - Arguments to update many QuestionAttemptLogs.
     * @example
     * // Update many QuestionAttemptLogs
     * const questionAttemptLog = await prisma.questionAttemptLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionAttemptLogs and only return the `id`
     * const questionAttemptLogWithIdOnly = await prisma.questionAttemptLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionAttemptLogUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionAttemptLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionAttemptLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionAttemptLog.
     * @param {QuestionAttemptLogUpsertArgs} args - Arguments to update or create a QuestionAttemptLog.
     * @example
     * // Update or create a QuestionAttemptLog
     * const questionAttemptLog = await prisma.questionAttemptLog.upsert({
     *   create: {
     *     // ... data to create a QuestionAttemptLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionAttemptLog we want to update
     *   }
     * })
     */
    upsert<T extends QuestionAttemptLogUpsertArgs>(args: SelectSubset<T, QuestionAttemptLogUpsertArgs<ExtArgs>>): Prisma__QuestionAttemptLogClient<$Result.GetResult<Prisma.$QuestionAttemptLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionAttemptLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAttemptLogCountArgs} args - Arguments to filter QuestionAttemptLogs to count.
     * @example
     * // Count the number of QuestionAttemptLogs
     * const count = await prisma.questionAttemptLog.count({
     *   where: {
     *     // ... the filter for the QuestionAttemptLogs we want to count
     *   }
     * })
    **/
    count<T extends QuestionAttemptLogCountArgs>(
      args?: Subset<T, QuestionAttemptLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionAttemptLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionAttemptLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAttemptLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAttemptLogAggregateArgs>(args: Subset<T, QuestionAttemptLogAggregateArgs>): Prisma.PrismaPromise<GetQuestionAttemptLogAggregateType<T>>

    /**
     * Group by QuestionAttemptLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAttemptLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionAttemptLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionAttemptLogGroupByArgs['orderBy'] }
        : { orderBy?: QuestionAttemptLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionAttemptLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionAttemptLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionAttemptLog model
   */
  readonly fields: QuestionAttemptLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionAttemptLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionAttemptLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionAttemptLog model
   */
  interface QuestionAttemptLogFieldRefs {
    readonly id: FieldRef<"QuestionAttemptLog", 'String'>
    readonly userId: FieldRef<"QuestionAttemptLog", 'String'>
    readonly questionId: FieldRef<"QuestionAttemptLog", 'String'>
    readonly date: FieldRef<"QuestionAttemptLog", 'DateTime'>
    readonly status: FieldRef<"QuestionAttemptLog", 'String'>
    readonly source: FieldRef<"QuestionAttemptLog", 'String'>
    readonly updatedAt: FieldRef<"QuestionAttemptLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * QuestionAttemptLog findUnique
   */
  export type QuestionAttemptLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAttemptLog
     */
    select?: QuestionAttemptLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAttemptLog
     */
    omit?: QuestionAttemptLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAttemptLogInclude<ExtArgs> | null
    /**
     * Filter, which QuestionAttemptLog to fetch.
     */
    where: QuestionAttemptLogWhereUniqueInput
  }

  /**
   * QuestionAttemptLog findUniqueOrThrow
   */
  export type QuestionAttemptLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAttemptLog
     */
    select?: QuestionAttemptLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAttemptLog
     */
    omit?: QuestionAttemptLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAttemptLogInclude<ExtArgs> | null
    /**
     * Filter, which QuestionAttemptLog to fetch.
     */
    where: QuestionAttemptLogWhereUniqueInput
  }

  /**
   * QuestionAttemptLog findFirst
   */
  export type QuestionAttemptLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAttemptLog
     */
    select?: QuestionAttemptLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAttemptLog
     */
    omit?: QuestionAttemptLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAttemptLogInclude<ExtArgs> | null
    /**
     * Filter, which QuestionAttemptLog to fetch.
     */
    where?: QuestionAttemptLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionAttemptLogs to fetch.
     */
    orderBy?: QuestionAttemptLogOrderByWithRelationInput | QuestionAttemptLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionAttemptLogs.
     */
    cursor?: QuestionAttemptLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionAttemptLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionAttemptLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionAttemptLogs.
     */
    distinct?: QuestionAttemptLogScalarFieldEnum | QuestionAttemptLogScalarFieldEnum[]
  }

  /**
   * QuestionAttemptLog findFirstOrThrow
   */
  export type QuestionAttemptLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAttemptLog
     */
    select?: QuestionAttemptLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAttemptLog
     */
    omit?: QuestionAttemptLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAttemptLogInclude<ExtArgs> | null
    /**
     * Filter, which QuestionAttemptLog to fetch.
     */
    where?: QuestionAttemptLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionAttemptLogs to fetch.
     */
    orderBy?: QuestionAttemptLogOrderByWithRelationInput | QuestionAttemptLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionAttemptLogs.
     */
    cursor?: QuestionAttemptLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionAttemptLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionAttemptLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionAttemptLogs.
     */
    distinct?: QuestionAttemptLogScalarFieldEnum | QuestionAttemptLogScalarFieldEnum[]
  }

  /**
   * QuestionAttemptLog findMany
   */
  export type QuestionAttemptLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAttemptLog
     */
    select?: QuestionAttemptLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAttemptLog
     */
    omit?: QuestionAttemptLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAttemptLogInclude<ExtArgs> | null
    /**
     * Filter, which QuestionAttemptLogs to fetch.
     */
    where?: QuestionAttemptLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionAttemptLogs to fetch.
     */
    orderBy?: QuestionAttemptLogOrderByWithRelationInput | QuestionAttemptLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionAttemptLogs.
     */
    cursor?: QuestionAttemptLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionAttemptLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionAttemptLogs.
     */
    skip?: number
    distinct?: QuestionAttemptLogScalarFieldEnum | QuestionAttemptLogScalarFieldEnum[]
  }

  /**
   * QuestionAttemptLog create
   */
  export type QuestionAttemptLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAttemptLog
     */
    select?: QuestionAttemptLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAttemptLog
     */
    omit?: QuestionAttemptLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAttemptLogInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionAttemptLog.
     */
    data: XOR<QuestionAttemptLogCreateInput, QuestionAttemptLogUncheckedCreateInput>
  }

  /**
   * QuestionAttemptLog createMany
   */
  export type QuestionAttemptLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionAttemptLogs.
     */
    data: QuestionAttemptLogCreateManyInput | QuestionAttemptLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionAttemptLog createManyAndReturn
   */
  export type QuestionAttemptLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAttemptLog
     */
    select?: QuestionAttemptLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAttemptLog
     */
    omit?: QuestionAttemptLogOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionAttemptLogs.
     */
    data: QuestionAttemptLogCreateManyInput | QuestionAttemptLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAttemptLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionAttemptLog update
   */
  export type QuestionAttemptLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAttemptLog
     */
    select?: QuestionAttemptLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAttemptLog
     */
    omit?: QuestionAttemptLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAttemptLogInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionAttemptLog.
     */
    data: XOR<QuestionAttemptLogUpdateInput, QuestionAttemptLogUncheckedUpdateInput>
    /**
     * Choose, which QuestionAttemptLog to update.
     */
    where: QuestionAttemptLogWhereUniqueInput
  }

  /**
   * QuestionAttemptLog updateMany
   */
  export type QuestionAttemptLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionAttemptLogs.
     */
    data: XOR<QuestionAttemptLogUpdateManyMutationInput, QuestionAttemptLogUncheckedUpdateManyInput>
    /**
     * Filter which QuestionAttemptLogs to update
     */
    where?: QuestionAttemptLogWhereInput
    /**
     * Limit how many QuestionAttemptLogs to update.
     */
    limit?: number
  }

  /**
   * QuestionAttemptLog updateManyAndReturn
   */
  export type QuestionAttemptLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAttemptLog
     */
    select?: QuestionAttemptLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAttemptLog
     */
    omit?: QuestionAttemptLogOmit<ExtArgs> | null
    /**
     * The data used to update QuestionAttemptLogs.
     */
    data: XOR<QuestionAttemptLogUpdateManyMutationInput, QuestionAttemptLogUncheckedUpdateManyInput>
    /**
     * Filter which QuestionAttemptLogs to update
     */
    where?: QuestionAttemptLogWhereInput
    /**
     * Limit how many QuestionAttemptLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAttemptLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionAttemptLog upsert
   */
  export type QuestionAttemptLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAttemptLog
     */
    select?: QuestionAttemptLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAttemptLog
     */
    omit?: QuestionAttemptLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAttemptLogInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionAttemptLog to update in case it exists.
     */
    where: QuestionAttemptLogWhereUniqueInput
    /**
     * In case the QuestionAttemptLog found by the `where` argument doesn't exist, create a new QuestionAttemptLog with this data.
     */
    create: XOR<QuestionAttemptLogCreateInput, QuestionAttemptLogUncheckedCreateInput>
    /**
     * In case the QuestionAttemptLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionAttemptLogUpdateInput, QuestionAttemptLogUncheckedUpdateInput>
  }

  /**
   * QuestionAttemptLog delete
   */
  export type QuestionAttemptLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAttemptLog
     */
    select?: QuestionAttemptLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAttemptLog
     */
    omit?: QuestionAttemptLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAttemptLogInclude<ExtArgs> | null
    /**
     * Filter which QuestionAttemptLog to delete.
     */
    where: QuestionAttemptLogWhereUniqueInput
  }

  /**
   * QuestionAttemptLog deleteMany
   */
  export type QuestionAttemptLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionAttemptLogs to delete
     */
    where?: QuestionAttemptLogWhereInput
    /**
     * Limit how many QuestionAttemptLogs to delete.
     */
    limit?: number
  }

  /**
   * QuestionAttemptLog without action
   */
  export type QuestionAttemptLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAttemptLog
     */
    select?: QuestionAttemptLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAttemptLog
     */
    omit?: QuestionAttemptLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAttemptLogInclude<ExtArgs> | null
  }


  /**
   * Model PlanRevision
   */

  export type AggregatePlanRevision = {
    _count: PlanRevisionCountAggregateOutputType | null
    _min: PlanRevisionMinAggregateOutputType | null
    _max: PlanRevisionMaxAggregateOutputType | null
  }

  export type PlanRevisionMinAggregateOutputType = {
    id: string | null
    planId: string | null
    revisionType: string | null
    revisedAt: Date | null
  }

  export type PlanRevisionMaxAggregateOutputType = {
    id: string | null
    planId: string | null
    revisionType: string | null
    revisedAt: Date | null
  }

  export type PlanRevisionCountAggregateOutputType = {
    id: number
    planId: number
    revisionType: number
    selectedStatuses: number
    revisedAt: number
    _all: number
  }


  export type PlanRevisionMinAggregateInputType = {
    id?: true
    planId?: true
    revisionType?: true
    revisedAt?: true
  }

  export type PlanRevisionMaxAggregateInputType = {
    id?: true
    planId?: true
    revisionType?: true
    revisedAt?: true
  }

  export type PlanRevisionCountAggregateInputType = {
    id?: true
    planId?: true
    revisionType?: true
    selectedStatuses?: true
    revisedAt?: true
    _all?: true
  }

  export type PlanRevisionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlanRevision to aggregate.
     */
    where?: PlanRevisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanRevisions to fetch.
     */
    orderBy?: PlanRevisionOrderByWithRelationInput | PlanRevisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlanRevisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanRevisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanRevisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlanRevisions
    **/
    _count?: true | PlanRevisionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlanRevisionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlanRevisionMaxAggregateInputType
  }

  export type GetPlanRevisionAggregateType<T extends PlanRevisionAggregateArgs> = {
        [P in keyof T & keyof AggregatePlanRevision]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlanRevision[P]>
      : GetScalarType<T[P], AggregatePlanRevision[P]>
  }




  export type PlanRevisionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanRevisionWhereInput
    orderBy?: PlanRevisionOrderByWithAggregationInput | PlanRevisionOrderByWithAggregationInput[]
    by: PlanRevisionScalarFieldEnum[] | PlanRevisionScalarFieldEnum
    having?: PlanRevisionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlanRevisionCountAggregateInputType | true
    _min?: PlanRevisionMinAggregateInputType
    _max?: PlanRevisionMaxAggregateInputType
  }

  export type PlanRevisionGroupByOutputType = {
    id: string
    planId: string
    revisionType: string
    selectedStatuses: string[]
    revisedAt: Date
    _count: PlanRevisionCountAggregateOutputType | null
    _min: PlanRevisionMinAggregateOutputType | null
    _max: PlanRevisionMaxAggregateOutputType | null
  }

  type GetPlanRevisionGroupByPayload<T extends PlanRevisionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlanRevisionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlanRevisionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlanRevisionGroupByOutputType[P]>
            : GetScalarType<T[P], PlanRevisionGroupByOutputType[P]>
        }
      >
    >


  export type PlanRevisionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planId?: boolean
    revisionType?: boolean
    selectedStatuses?: boolean
    revisedAt?: boolean
    learningPlan?: boolean | LearningPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["planRevision"]>

  export type PlanRevisionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planId?: boolean
    revisionType?: boolean
    selectedStatuses?: boolean
    revisedAt?: boolean
    learningPlan?: boolean | LearningPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["planRevision"]>

  export type PlanRevisionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planId?: boolean
    revisionType?: boolean
    selectedStatuses?: boolean
    revisedAt?: boolean
    learningPlan?: boolean | LearningPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["planRevision"]>

  export type PlanRevisionSelectScalar = {
    id?: boolean
    planId?: boolean
    revisionType?: boolean
    selectedStatuses?: boolean
    revisedAt?: boolean
  }

  export type PlanRevisionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "planId" | "revisionType" | "selectedStatuses" | "revisedAt", ExtArgs["result"]["planRevision"]>
  export type PlanRevisionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    learningPlan?: boolean | LearningPlanDefaultArgs<ExtArgs>
  }
  export type PlanRevisionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    learningPlan?: boolean | LearningPlanDefaultArgs<ExtArgs>
  }
  export type PlanRevisionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    learningPlan?: boolean | LearningPlanDefaultArgs<ExtArgs>
  }

  export type $PlanRevisionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlanRevision"
    objects: {
      learningPlan: Prisma.$LearningPlanPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      planId: string
      revisionType: string
      selectedStatuses: string[]
      revisedAt: Date
    }, ExtArgs["result"]["planRevision"]>
    composites: {}
  }

  type PlanRevisionGetPayload<S extends boolean | null | undefined | PlanRevisionDefaultArgs> = $Result.GetResult<Prisma.$PlanRevisionPayload, S>

  type PlanRevisionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlanRevisionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlanRevisionCountAggregateInputType | true
    }

  export interface PlanRevisionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlanRevision'], meta: { name: 'PlanRevision' } }
    /**
     * Find zero or one PlanRevision that matches the filter.
     * @param {PlanRevisionFindUniqueArgs} args - Arguments to find a PlanRevision
     * @example
     * // Get one PlanRevision
     * const planRevision = await prisma.planRevision.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlanRevisionFindUniqueArgs>(args: SelectSubset<T, PlanRevisionFindUniqueArgs<ExtArgs>>): Prisma__PlanRevisionClient<$Result.GetResult<Prisma.$PlanRevisionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlanRevision that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlanRevisionFindUniqueOrThrowArgs} args - Arguments to find a PlanRevision
     * @example
     * // Get one PlanRevision
     * const planRevision = await prisma.planRevision.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlanRevisionFindUniqueOrThrowArgs>(args: SelectSubset<T, PlanRevisionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlanRevisionClient<$Result.GetResult<Prisma.$PlanRevisionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlanRevision that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanRevisionFindFirstArgs} args - Arguments to find a PlanRevision
     * @example
     * // Get one PlanRevision
     * const planRevision = await prisma.planRevision.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlanRevisionFindFirstArgs>(args?: SelectSubset<T, PlanRevisionFindFirstArgs<ExtArgs>>): Prisma__PlanRevisionClient<$Result.GetResult<Prisma.$PlanRevisionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlanRevision that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanRevisionFindFirstOrThrowArgs} args - Arguments to find a PlanRevision
     * @example
     * // Get one PlanRevision
     * const planRevision = await prisma.planRevision.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlanRevisionFindFirstOrThrowArgs>(args?: SelectSubset<T, PlanRevisionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlanRevisionClient<$Result.GetResult<Prisma.$PlanRevisionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlanRevisions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanRevisionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlanRevisions
     * const planRevisions = await prisma.planRevision.findMany()
     * 
     * // Get first 10 PlanRevisions
     * const planRevisions = await prisma.planRevision.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const planRevisionWithIdOnly = await prisma.planRevision.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlanRevisionFindManyArgs>(args?: SelectSubset<T, PlanRevisionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanRevisionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlanRevision.
     * @param {PlanRevisionCreateArgs} args - Arguments to create a PlanRevision.
     * @example
     * // Create one PlanRevision
     * const PlanRevision = await prisma.planRevision.create({
     *   data: {
     *     // ... data to create a PlanRevision
     *   }
     * })
     * 
     */
    create<T extends PlanRevisionCreateArgs>(args: SelectSubset<T, PlanRevisionCreateArgs<ExtArgs>>): Prisma__PlanRevisionClient<$Result.GetResult<Prisma.$PlanRevisionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlanRevisions.
     * @param {PlanRevisionCreateManyArgs} args - Arguments to create many PlanRevisions.
     * @example
     * // Create many PlanRevisions
     * const planRevision = await prisma.planRevision.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlanRevisionCreateManyArgs>(args?: SelectSubset<T, PlanRevisionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlanRevisions and returns the data saved in the database.
     * @param {PlanRevisionCreateManyAndReturnArgs} args - Arguments to create many PlanRevisions.
     * @example
     * // Create many PlanRevisions
     * const planRevision = await prisma.planRevision.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlanRevisions and only return the `id`
     * const planRevisionWithIdOnly = await prisma.planRevision.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlanRevisionCreateManyAndReturnArgs>(args?: SelectSubset<T, PlanRevisionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanRevisionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PlanRevision.
     * @param {PlanRevisionDeleteArgs} args - Arguments to delete one PlanRevision.
     * @example
     * // Delete one PlanRevision
     * const PlanRevision = await prisma.planRevision.delete({
     *   where: {
     *     // ... filter to delete one PlanRevision
     *   }
     * })
     * 
     */
    delete<T extends PlanRevisionDeleteArgs>(args: SelectSubset<T, PlanRevisionDeleteArgs<ExtArgs>>): Prisma__PlanRevisionClient<$Result.GetResult<Prisma.$PlanRevisionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlanRevision.
     * @param {PlanRevisionUpdateArgs} args - Arguments to update one PlanRevision.
     * @example
     * // Update one PlanRevision
     * const planRevision = await prisma.planRevision.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlanRevisionUpdateArgs>(args: SelectSubset<T, PlanRevisionUpdateArgs<ExtArgs>>): Prisma__PlanRevisionClient<$Result.GetResult<Prisma.$PlanRevisionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlanRevisions.
     * @param {PlanRevisionDeleteManyArgs} args - Arguments to filter PlanRevisions to delete.
     * @example
     * // Delete a few PlanRevisions
     * const { count } = await prisma.planRevision.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlanRevisionDeleteManyArgs>(args?: SelectSubset<T, PlanRevisionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlanRevisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanRevisionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlanRevisions
     * const planRevision = await prisma.planRevision.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlanRevisionUpdateManyArgs>(args: SelectSubset<T, PlanRevisionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlanRevisions and returns the data updated in the database.
     * @param {PlanRevisionUpdateManyAndReturnArgs} args - Arguments to update many PlanRevisions.
     * @example
     * // Update many PlanRevisions
     * const planRevision = await prisma.planRevision.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PlanRevisions and only return the `id`
     * const planRevisionWithIdOnly = await prisma.planRevision.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlanRevisionUpdateManyAndReturnArgs>(args: SelectSubset<T, PlanRevisionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanRevisionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PlanRevision.
     * @param {PlanRevisionUpsertArgs} args - Arguments to update or create a PlanRevision.
     * @example
     * // Update or create a PlanRevision
     * const planRevision = await prisma.planRevision.upsert({
     *   create: {
     *     // ... data to create a PlanRevision
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlanRevision we want to update
     *   }
     * })
     */
    upsert<T extends PlanRevisionUpsertArgs>(args: SelectSubset<T, PlanRevisionUpsertArgs<ExtArgs>>): Prisma__PlanRevisionClient<$Result.GetResult<Prisma.$PlanRevisionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlanRevisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanRevisionCountArgs} args - Arguments to filter PlanRevisions to count.
     * @example
     * // Count the number of PlanRevisions
     * const count = await prisma.planRevision.count({
     *   where: {
     *     // ... the filter for the PlanRevisions we want to count
     *   }
     * })
    **/
    count<T extends PlanRevisionCountArgs>(
      args?: Subset<T, PlanRevisionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlanRevisionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlanRevision.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanRevisionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlanRevisionAggregateArgs>(args: Subset<T, PlanRevisionAggregateArgs>): Prisma.PrismaPromise<GetPlanRevisionAggregateType<T>>

    /**
     * Group by PlanRevision.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanRevisionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlanRevisionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlanRevisionGroupByArgs['orderBy'] }
        : { orderBy?: PlanRevisionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlanRevisionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlanRevisionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlanRevision model
   */
  readonly fields: PlanRevisionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlanRevision.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlanRevisionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    learningPlan<T extends LearningPlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LearningPlanDefaultArgs<ExtArgs>>): Prisma__LearningPlanClient<$Result.GetResult<Prisma.$LearningPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlanRevision model
   */
  interface PlanRevisionFieldRefs {
    readonly id: FieldRef<"PlanRevision", 'String'>
    readonly planId: FieldRef<"PlanRevision", 'String'>
    readonly revisionType: FieldRef<"PlanRevision", 'String'>
    readonly selectedStatuses: FieldRef<"PlanRevision", 'String[]'>
    readonly revisedAt: FieldRef<"PlanRevision", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PlanRevision findUnique
   */
  export type PlanRevisionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanRevision
     */
    select?: PlanRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanRevision
     */
    omit?: PlanRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanRevisionInclude<ExtArgs> | null
    /**
     * Filter, which PlanRevision to fetch.
     */
    where: PlanRevisionWhereUniqueInput
  }

  /**
   * PlanRevision findUniqueOrThrow
   */
  export type PlanRevisionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanRevision
     */
    select?: PlanRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanRevision
     */
    omit?: PlanRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanRevisionInclude<ExtArgs> | null
    /**
     * Filter, which PlanRevision to fetch.
     */
    where: PlanRevisionWhereUniqueInput
  }

  /**
   * PlanRevision findFirst
   */
  export type PlanRevisionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanRevision
     */
    select?: PlanRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanRevision
     */
    omit?: PlanRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanRevisionInclude<ExtArgs> | null
    /**
     * Filter, which PlanRevision to fetch.
     */
    where?: PlanRevisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanRevisions to fetch.
     */
    orderBy?: PlanRevisionOrderByWithRelationInput | PlanRevisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlanRevisions.
     */
    cursor?: PlanRevisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanRevisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanRevisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlanRevisions.
     */
    distinct?: PlanRevisionScalarFieldEnum | PlanRevisionScalarFieldEnum[]
  }

  /**
   * PlanRevision findFirstOrThrow
   */
  export type PlanRevisionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanRevision
     */
    select?: PlanRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanRevision
     */
    omit?: PlanRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanRevisionInclude<ExtArgs> | null
    /**
     * Filter, which PlanRevision to fetch.
     */
    where?: PlanRevisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanRevisions to fetch.
     */
    orderBy?: PlanRevisionOrderByWithRelationInput | PlanRevisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlanRevisions.
     */
    cursor?: PlanRevisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanRevisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanRevisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlanRevisions.
     */
    distinct?: PlanRevisionScalarFieldEnum | PlanRevisionScalarFieldEnum[]
  }

  /**
   * PlanRevision findMany
   */
  export type PlanRevisionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanRevision
     */
    select?: PlanRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanRevision
     */
    omit?: PlanRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanRevisionInclude<ExtArgs> | null
    /**
     * Filter, which PlanRevisions to fetch.
     */
    where?: PlanRevisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanRevisions to fetch.
     */
    orderBy?: PlanRevisionOrderByWithRelationInput | PlanRevisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlanRevisions.
     */
    cursor?: PlanRevisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanRevisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanRevisions.
     */
    skip?: number
    distinct?: PlanRevisionScalarFieldEnum | PlanRevisionScalarFieldEnum[]
  }

  /**
   * PlanRevision create
   */
  export type PlanRevisionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanRevision
     */
    select?: PlanRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanRevision
     */
    omit?: PlanRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanRevisionInclude<ExtArgs> | null
    /**
     * The data needed to create a PlanRevision.
     */
    data: XOR<PlanRevisionCreateInput, PlanRevisionUncheckedCreateInput>
  }

  /**
   * PlanRevision createMany
   */
  export type PlanRevisionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlanRevisions.
     */
    data: PlanRevisionCreateManyInput | PlanRevisionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlanRevision createManyAndReturn
   */
  export type PlanRevisionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanRevision
     */
    select?: PlanRevisionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlanRevision
     */
    omit?: PlanRevisionOmit<ExtArgs> | null
    /**
     * The data used to create many PlanRevisions.
     */
    data: PlanRevisionCreateManyInput | PlanRevisionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanRevisionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlanRevision update
   */
  export type PlanRevisionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanRevision
     */
    select?: PlanRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanRevision
     */
    omit?: PlanRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanRevisionInclude<ExtArgs> | null
    /**
     * The data needed to update a PlanRevision.
     */
    data: XOR<PlanRevisionUpdateInput, PlanRevisionUncheckedUpdateInput>
    /**
     * Choose, which PlanRevision to update.
     */
    where: PlanRevisionWhereUniqueInput
  }

  /**
   * PlanRevision updateMany
   */
  export type PlanRevisionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlanRevisions.
     */
    data: XOR<PlanRevisionUpdateManyMutationInput, PlanRevisionUncheckedUpdateManyInput>
    /**
     * Filter which PlanRevisions to update
     */
    where?: PlanRevisionWhereInput
    /**
     * Limit how many PlanRevisions to update.
     */
    limit?: number
  }

  /**
   * PlanRevision updateManyAndReturn
   */
  export type PlanRevisionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanRevision
     */
    select?: PlanRevisionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlanRevision
     */
    omit?: PlanRevisionOmit<ExtArgs> | null
    /**
     * The data used to update PlanRevisions.
     */
    data: XOR<PlanRevisionUpdateManyMutationInput, PlanRevisionUncheckedUpdateManyInput>
    /**
     * Filter which PlanRevisions to update
     */
    where?: PlanRevisionWhereInput
    /**
     * Limit how many PlanRevisions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanRevisionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlanRevision upsert
   */
  export type PlanRevisionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanRevision
     */
    select?: PlanRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanRevision
     */
    omit?: PlanRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanRevisionInclude<ExtArgs> | null
    /**
     * The filter to search for the PlanRevision to update in case it exists.
     */
    where: PlanRevisionWhereUniqueInput
    /**
     * In case the PlanRevision found by the `where` argument doesn't exist, create a new PlanRevision with this data.
     */
    create: XOR<PlanRevisionCreateInput, PlanRevisionUncheckedCreateInput>
    /**
     * In case the PlanRevision was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlanRevisionUpdateInput, PlanRevisionUncheckedUpdateInput>
  }

  /**
   * PlanRevision delete
   */
  export type PlanRevisionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanRevision
     */
    select?: PlanRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanRevision
     */
    omit?: PlanRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanRevisionInclude<ExtArgs> | null
    /**
     * Filter which PlanRevision to delete.
     */
    where: PlanRevisionWhereUniqueInput
  }

  /**
   * PlanRevision deleteMany
   */
  export type PlanRevisionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlanRevisions to delete
     */
    where?: PlanRevisionWhereInput
    /**
     * Limit how many PlanRevisions to delete.
     */
    limit?: number
  }

  /**
   * PlanRevision without action
   */
  export type PlanRevisionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanRevision
     */
    select?: PlanRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanRevision
     */
    omit?: PlanRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanRevisionInclude<ExtArgs> | null
  }


  /**
   * Model DailyReflection
   */

  export type AggregateDailyReflection = {
    _count: DailyReflectionCountAggregateOutputType | null
    _min: DailyReflectionMinAggregateOutputType | null
    _max: DailyReflectionMaxAggregateOutputType | null
  }

  export type DailyReflectionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    date: Date | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DailyReflectionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    date: Date | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DailyReflectionCountAggregateOutputType = {
    id: number
    userId: number
    date: number
    content: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DailyReflectionMinAggregateInputType = {
    id?: true
    userId?: true
    date?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DailyReflectionMaxAggregateInputType = {
    id?: true
    userId?: true
    date?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DailyReflectionCountAggregateInputType = {
    id?: true
    userId?: true
    date?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DailyReflectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyReflection to aggregate.
     */
    where?: DailyReflectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyReflections to fetch.
     */
    orderBy?: DailyReflectionOrderByWithRelationInput | DailyReflectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DailyReflectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyReflections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyReflections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DailyReflections
    **/
    _count?: true | DailyReflectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DailyReflectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DailyReflectionMaxAggregateInputType
  }

  export type GetDailyReflectionAggregateType<T extends DailyReflectionAggregateArgs> = {
        [P in keyof T & keyof AggregateDailyReflection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDailyReflection[P]>
      : GetScalarType<T[P], AggregateDailyReflection[P]>
  }




  export type DailyReflectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyReflectionWhereInput
    orderBy?: DailyReflectionOrderByWithAggregationInput | DailyReflectionOrderByWithAggregationInput[]
    by: DailyReflectionScalarFieldEnum[] | DailyReflectionScalarFieldEnum
    having?: DailyReflectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DailyReflectionCountAggregateInputType | true
    _min?: DailyReflectionMinAggregateInputType
    _max?: DailyReflectionMaxAggregateInputType
  }

  export type DailyReflectionGroupByOutputType = {
    id: string
    userId: string
    date: Date
    content: string
    createdAt: Date
    updatedAt: Date
    _count: DailyReflectionCountAggregateOutputType | null
    _min: DailyReflectionMinAggregateOutputType | null
    _max: DailyReflectionMaxAggregateOutputType | null
  }

  type GetDailyReflectionGroupByPayload<T extends DailyReflectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DailyReflectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DailyReflectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DailyReflectionGroupByOutputType[P]>
            : GetScalarType<T[P], DailyReflectionGroupByOutputType[P]>
        }
      >
    >


  export type DailyReflectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    date?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dailyReflection"]>

  export type DailyReflectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    date?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dailyReflection"]>

  export type DailyReflectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    date?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dailyReflection"]>

  export type DailyReflectionSelectScalar = {
    id?: boolean
    userId?: boolean
    date?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DailyReflectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "date" | "content" | "createdAt" | "updatedAt", ExtArgs["result"]["dailyReflection"]>
  export type DailyReflectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DailyReflectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DailyReflectionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DailyReflectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DailyReflection"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      date: Date
      content: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dailyReflection"]>
    composites: {}
  }

  type DailyReflectionGetPayload<S extends boolean | null | undefined | DailyReflectionDefaultArgs> = $Result.GetResult<Prisma.$DailyReflectionPayload, S>

  type DailyReflectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DailyReflectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DailyReflectionCountAggregateInputType | true
    }

  export interface DailyReflectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DailyReflection'], meta: { name: 'DailyReflection' } }
    /**
     * Find zero or one DailyReflection that matches the filter.
     * @param {DailyReflectionFindUniqueArgs} args - Arguments to find a DailyReflection
     * @example
     * // Get one DailyReflection
     * const dailyReflection = await prisma.dailyReflection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DailyReflectionFindUniqueArgs>(args: SelectSubset<T, DailyReflectionFindUniqueArgs<ExtArgs>>): Prisma__DailyReflectionClient<$Result.GetResult<Prisma.$DailyReflectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DailyReflection that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DailyReflectionFindUniqueOrThrowArgs} args - Arguments to find a DailyReflection
     * @example
     * // Get one DailyReflection
     * const dailyReflection = await prisma.dailyReflection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DailyReflectionFindUniqueOrThrowArgs>(args: SelectSubset<T, DailyReflectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DailyReflectionClient<$Result.GetResult<Prisma.$DailyReflectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DailyReflection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReflectionFindFirstArgs} args - Arguments to find a DailyReflection
     * @example
     * // Get one DailyReflection
     * const dailyReflection = await prisma.dailyReflection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DailyReflectionFindFirstArgs>(args?: SelectSubset<T, DailyReflectionFindFirstArgs<ExtArgs>>): Prisma__DailyReflectionClient<$Result.GetResult<Prisma.$DailyReflectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DailyReflection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReflectionFindFirstOrThrowArgs} args - Arguments to find a DailyReflection
     * @example
     * // Get one DailyReflection
     * const dailyReflection = await prisma.dailyReflection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DailyReflectionFindFirstOrThrowArgs>(args?: SelectSubset<T, DailyReflectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__DailyReflectionClient<$Result.GetResult<Prisma.$DailyReflectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DailyReflections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReflectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DailyReflections
     * const dailyReflections = await prisma.dailyReflection.findMany()
     * 
     * // Get first 10 DailyReflections
     * const dailyReflections = await prisma.dailyReflection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dailyReflectionWithIdOnly = await prisma.dailyReflection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DailyReflectionFindManyArgs>(args?: SelectSubset<T, DailyReflectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyReflectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DailyReflection.
     * @param {DailyReflectionCreateArgs} args - Arguments to create a DailyReflection.
     * @example
     * // Create one DailyReflection
     * const DailyReflection = await prisma.dailyReflection.create({
     *   data: {
     *     // ... data to create a DailyReflection
     *   }
     * })
     * 
     */
    create<T extends DailyReflectionCreateArgs>(args: SelectSubset<T, DailyReflectionCreateArgs<ExtArgs>>): Prisma__DailyReflectionClient<$Result.GetResult<Prisma.$DailyReflectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DailyReflections.
     * @param {DailyReflectionCreateManyArgs} args - Arguments to create many DailyReflections.
     * @example
     * // Create many DailyReflections
     * const dailyReflection = await prisma.dailyReflection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DailyReflectionCreateManyArgs>(args?: SelectSubset<T, DailyReflectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DailyReflections and returns the data saved in the database.
     * @param {DailyReflectionCreateManyAndReturnArgs} args - Arguments to create many DailyReflections.
     * @example
     * // Create many DailyReflections
     * const dailyReflection = await prisma.dailyReflection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DailyReflections and only return the `id`
     * const dailyReflectionWithIdOnly = await prisma.dailyReflection.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DailyReflectionCreateManyAndReturnArgs>(args?: SelectSubset<T, DailyReflectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyReflectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DailyReflection.
     * @param {DailyReflectionDeleteArgs} args - Arguments to delete one DailyReflection.
     * @example
     * // Delete one DailyReflection
     * const DailyReflection = await prisma.dailyReflection.delete({
     *   where: {
     *     // ... filter to delete one DailyReflection
     *   }
     * })
     * 
     */
    delete<T extends DailyReflectionDeleteArgs>(args: SelectSubset<T, DailyReflectionDeleteArgs<ExtArgs>>): Prisma__DailyReflectionClient<$Result.GetResult<Prisma.$DailyReflectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DailyReflection.
     * @param {DailyReflectionUpdateArgs} args - Arguments to update one DailyReflection.
     * @example
     * // Update one DailyReflection
     * const dailyReflection = await prisma.dailyReflection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DailyReflectionUpdateArgs>(args: SelectSubset<T, DailyReflectionUpdateArgs<ExtArgs>>): Prisma__DailyReflectionClient<$Result.GetResult<Prisma.$DailyReflectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DailyReflections.
     * @param {DailyReflectionDeleteManyArgs} args - Arguments to filter DailyReflections to delete.
     * @example
     * // Delete a few DailyReflections
     * const { count } = await prisma.dailyReflection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DailyReflectionDeleteManyArgs>(args?: SelectSubset<T, DailyReflectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyReflections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReflectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DailyReflections
     * const dailyReflection = await prisma.dailyReflection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DailyReflectionUpdateManyArgs>(args: SelectSubset<T, DailyReflectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyReflections and returns the data updated in the database.
     * @param {DailyReflectionUpdateManyAndReturnArgs} args - Arguments to update many DailyReflections.
     * @example
     * // Update many DailyReflections
     * const dailyReflection = await prisma.dailyReflection.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DailyReflections and only return the `id`
     * const dailyReflectionWithIdOnly = await prisma.dailyReflection.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DailyReflectionUpdateManyAndReturnArgs>(args: SelectSubset<T, DailyReflectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyReflectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DailyReflection.
     * @param {DailyReflectionUpsertArgs} args - Arguments to update or create a DailyReflection.
     * @example
     * // Update or create a DailyReflection
     * const dailyReflection = await prisma.dailyReflection.upsert({
     *   create: {
     *     // ... data to create a DailyReflection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DailyReflection we want to update
     *   }
     * })
     */
    upsert<T extends DailyReflectionUpsertArgs>(args: SelectSubset<T, DailyReflectionUpsertArgs<ExtArgs>>): Prisma__DailyReflectionClient<$Result.GetResult<Prisma.$DailyReflectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DailyReflections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReflectionCountArgs} args - Arguments to filter DailyReflections to count.
     * @example
     * // Count the number of DailyReflections
     * const count = await prisma.dailyReflection.count({
     *   where: {
     *     // ... the filter for the DailyReflections we want to count
     *   }
     * })
    **/
    count<T extends DailyReflectionCountArgs>(
      args?: Subset<T, DailyReflectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DailyReflectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DailyReflection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReflectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DailyReflectionAggregateArgs>(args: Subset<T, DailyReflectionAggregateArgs>): Prisma.PrismaPromise<GetDailyReflectionAggregateType<T>>

    /**
     * Group by DailyReflection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReflectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DailyReflectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DailyReflectionGroupByArgs['orderBy'] }
        : { orderBy?: DailyReflectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DailyReflectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDailyReflectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DailyReflection model
   */
  readonly fields: DailyReflectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DailyReflection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DailyReflectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DailyReflection model
   */
  interface DailyReflectionFieldRefs {
    readonly id: FieldRef<"DailyReflection", 'String'>
    readonly userId: FieldRef<"DailyReflection", 'String'>
    readonly date: FieldRef<"DailyReflection", 'DateTime'>
    readonly content: FieldRef<"DailyReflection", 'String'>
    readonly createdAt: FieldRef<"DailyReflection", 'DateTime'>
    readonly updatedAt: FieldRef<"DailyReflection", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DailyReflection findUnique
   */
  export type DailyReflectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReflection
     */
    select?: DailyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReflection
     */
    omit?: DailyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReflectionInclude<ExtArgs> | null
    /**
     * Filter, which DailyReflection to fetch.
     */
    where: DailyReflectionWhereUniqueInput
  }

  /**
   * DailyReflection findUniqueOrThrow
   */
  export type DailyReflectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReflection
     */
    select?: DailyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReflection
     */
    omit?: DailyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReflectionInclude<ExtArgs> | null
    /**
     * Filter, which DailyReflection to fetch.
     */
    where: DailyReflectionWhereUniqueInput
  }

  /**
   * DailyReflection findFirst
   */
  export type DailyReflectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReflection
     */
    select?: DailyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReflection
     */
    omit?: DailyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReflectionInclude<ExtArgs> | null
    /**
     * Filter, which DailyReflection to fetch.
     */
    where?: DailyReflectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyReflections to fetch.
     */
    orderBy?: DailyReflectionOrderByWithRelationInput | DailyReflectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyReflections.
     */
    cursor?: DailyReflectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyReflections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyReflections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyReflections.
     */
    distinct?: DailyReflectionScalarFieldEnum | DailyReflectionScalarFieldEnum[]
  }

  /**
   * DailyReflection findFirstOrThrow
   */
  export type DailyReflectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReflection
     */
    select?: DailyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReflection
     */
    omit?: DailyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReflectionInclude<ExtArgs> | null
    /**
     * Filter, which DailyReflection to fetch.
     */
    where?: DailyReflectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyReflections to fetch.
     */
    orderBy?: DailyReflectionOrderByWithRelationInput | DailyReflectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyReflections.
     */
    cursor?: DailyReflectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyReflections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyReflections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyReflections.
     */
    distinct?: DailyReflectionScalarFieldEnum | DailyReflectionScalarFieldEnum[]
  }

  /**
   * DailyReflection findMany
   */
  export type DailyReflectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReflection
     */
    select?: DailyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReflection
     */
    omit?: DailyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReflectionInclude<ExtArgs> | null
    /**
     * Filter, which DailyReflections to fetch.
     */
    where?: DailyReflectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyReflections to fetch.
     */
    orderBy?: DailyReflectionOrderByWithRelationInput | DailyReflectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DailyReflections.
     */
    cursor?: DailyReflectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyReflections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyReflections.
     */
    skip?: number
    distinct?: DailyReflectionScalarFieldEnum | DailyReflectionScalarFieldEnum[]
  }

  /**
   * DailyReflection create
   */
  export type DailyReflectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReflection
     */
    select?: DailyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReflection
     */
    omit?: DailyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReflectionInclude<ExtArgs> | null
    /**
     * The data needed to create a DailyReflection.
     */
    data: XOR<DailyReflectionCreateInput, DailyReflectionUncheckedCreateInput>
  }

  /**
   * DailyReflection createMany
   */
  export type DailyReflectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DailyReflections.
     */
    data: DailyReflectionCreateManyInput | DailyReflectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DailyReflection createManyAndReturn
   */
  export type DailyReflectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReflection
     */
    select?: DailyReflectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReflection
     */
    omit?: DailyReflectionOmit<ExtArgs> | null
    /**
     * The data used to create many DailyReflections.
     */
    data: DailyReflectionCreateManyInput | DailyReflectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReflectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DailyReflection update
   */
  export type DailyReflectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReflection
     */
    select?: DailyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReflection
     */
    omit?: DailyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReflectionInclude<ExtArgs> | null
    /**
     * The data needed to update a DailyReflection.
     */
    data: XOR<DailyReflectionUpdateInput, DailyReflectionUncheckedUpdateInput>
    /**
     * Choose, which DailyReflection to update.
     */
    where: DailyReflectionWhereUniqueInput
  }

  /**
   * DailyReflection updateMany
   */
  export type DailyReflectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DailyReflections.
     */
    data: XOR<DailyReflectionUpdateManyMutationInput, DailyReflectionUncheckedUpdateManyInput>
    /**
     * Filter which DailyReflections to update
     */
    where?: DailyReflectionWhereInput
    /**
     * Limit how many DailyReflections to update.
     */
    limit?: number
  }

  /**
   * DailyReflection updateManyAndReturn
   */
  export type DailyReflectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReflection
     */
    select?: DailyReflectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReflection
     */
    omit?: DailyReflectionOmit<ExtArgs> | null
    /**
     * The data used to update DailyReflections.
     */
    data: XOR<DailyReflectionUpdateManyMutationInput, DailyReflectionUncheckedUpdateManyInput>
    /**
     * Filter which DailyReflections to update
     */
    where?: DailyReflectionWhereInput
    /**
     * Limit how many DailyReflections to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReflectionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DailyReflection upsert
   */
  export type DailyReflectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReflection
     */
    select?: DailyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReflection
     */
    omit?: DailyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReflectionInclude<ExtArgs> | null
    /**
     * The filter to search for the DailyReflection to update in case it exists.
     */
    where: DailyReflectionWhereUniqueInput
    /**
     * In case the DailyReflection found by the `where` argument doesn't exist, create a new DailyReflection with this data.
     */
    create: XOR<DailyReflectionCreateInput, DailyReflectionUncheckedCreateInput>
    /**
     * In case the DailyReflection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DailyReflectionUpdateInput, DailyReflectionUncheckedUpdateInput>
  }

  /**
   * DailyReflection delete
   */
  export type DailyReflectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReflection
     */
    select?: DailyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReflection
     */
    omit?: DailyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReflectionInclude<ExtArgs> | null
    /**
     * Filter which DailyReflection to delete.
     */
    where: DailyReflectionWhereUniqueInput
  }

  /**
   * DailyReflection deleteMany
   */
  export type DailyReflectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyReflections to delete
     */
    where?: DailyReflectionWhereInput
    /**
     * Limit how many DailyReflections to delete.
     */
    limit?: number
  }

  /**
   * DailyReflection without action
   */
  export type DailyReflectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReflection
     */
    select?: DailyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReflection
     */
    omit?: DailyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyReflectionInclude<ExtArgs> | null
  }


  /**
   * Model WeeklyReflection
   */

  export type AggregateWeeklyReflection = {
    _count: WeeklyReflectionCountAggregateOutputType | null
    _min: WeeklyReflectionMinAggregateOutputType | null
    _max: WeeklyReflectionMaxAggregateOutputType | null
  }

  export type WeeklyReflectionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    weekStart: Date | null
    weekEnd: Date | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WeeklyReflectionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    weekStart: Date | null
    weekEnd: Date | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WeeklyReflectionCountAggregateOutputType = {
    id: number
    userId: number
    weekStart: number
    weekEnd: number
    content: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WeeklyReflectionMinAggregateInputType = {
    id?: true
    userId?: true
    weekStart?: true
    weekEnd?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WeeklyReflectionMaxAggregateInputType = {
    id?: true
    userId?: true
    weekStart?: true
    weekEnd?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WeeklyReflectionCountAggregateInputType = {
    id?: true
    userId?: true
    weekStart?: true
    weekEnd?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WeeklyReflectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeeklyReflection to aggregate.
     */
    where?: WeeklyReflectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklyReflections to fetch.
     */
    orderBy?: WeeklyReflectionOrderByWithRelationInput | WeeklyReflectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WeeklyReflectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklyReflections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklyReflections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WeeklyReflections
    **/
    _count?: true | WeeklyReflectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WeeklyReflectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WeeklyReflectionMaxAggregateInputType
  }

  export type GetWeeklyReflectionAggregateType<T extends WeeklyReflectionAggregateArgs> = {
        [P in keyof T & keyof AggregateWeeklyReflection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeeklyReflection[P]>
      : GetScalarType<T[P], AggregateWeeklyReflection[P]>
  }




  export type WeeklyReflectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeeklyReflectionWhereInput
    orderBy?: WeeklyReflectionOrderByWithAggregationInput | WeeklyReflectionOrderByWithAggregationInput[]
    by: WeeklyReflectionScalarFieldEnum[] | WeeklyReflectionScalarFieldEnum
    having?: WeeklyReflectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WeeklyReflectionCountAggregateInputType | true
    _min?: WeeklyReflectionMinAggregateInputType
    _max?: WeeklyReflectionMaxAggregateInputType
  }

  export type WeeklyReflectionGroupByOutputType = {
    id: string
    userId: string
    weekStart: Date
    weekEnd: Date
    content: string
    createdAt: Date
    updatedAt: Date
    _count: WeeklyReflectionCountAggregateOutputType | null
    _min: WeeklyReflectionMinAggregateOutputType | null
    _max: WeeklyReflectionMaxAggregateOutputType | null
  }

  type GetWeeklyReflectionGroupByPayload<T extends WeeklyReflectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WeeklyReflectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WeeklyReflectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WeeklyReflectionGroupByOutputType[P]>
            : GetScalarType<T[P], WeeklyReflectionGroupByOutputType[P]>
        }
      >
    >


  export type WeeklyReflectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    weekStart?: boolean
    weekEnd?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weeklyReflection"]>

  export type WeeklyReflectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    weekStart?: boolean
    weekEnd?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weeklyReflection"]>

  export type WeeklyReflectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    weekStart?: boolean
    weekEnd?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weeklyReflection"]>

  export type WeeklyReflectionSelectScalar = {
    id?: boolean
    userId?: boolean
    weekStart?: boolean
    weekEnd?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WeeklyReflectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "weekStart" | "weekEnd" | "content" | "createdAt" | "updatedAt", ExtArgs["result"]["weeklyReflection"]>
  export type WeeklyReflectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WeeklyReflectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WeeklyReflectionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WeeklyReflectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WeeklyReflection"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      weekStart: Date
      weekEnd: Date
      content: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["weeklyReflection"]>
    composites: {}
  }

  type WeeklyReflectionGetPayload<S extends boolean | null | undefined | WeeklyReflectionDefaultArgs> = $Result.GetResult<Prisma.$WeeklyReflectionPayload, S>

  type WeeklyReflectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WeeklyReflectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WeeklyReflectionCountAggregateInputType | true
    }

  export interface WeeklyReflectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WeeklyReflection'], meta: { name: 'WeeklyReflection' } }
    /**
     * Find zero or one WeeklyReflection that matches the filter.
     * @param {WeeklyReflectionFindUniqueArgs} args - Arguments to find a WeeklyReflection
     * @example
     * // Get one WeeklyReflection
     * const weeklyReflection = await prisma.weeklyReflection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WeeklyReflectionFindUniqueArgs>(args: SelectSubset<T, WeeklyReflectionFindUniqueArgs<ExtArgs>>): Prisma__WeeklyReflectionClient<$Result.GetResult<Prisma.$WeeklyReflectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WeeklyReflection that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WeeklyReflectionFindUniqueOrThrowArgs} args - Arguments to find a WeeklyReflection
     * @example
     * // Get one WeeklyReflection
     * const weeklyReflection = await prisma.weeklyReflection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WeeklyReflectionFindUniqueOrThrowArgs>(args: SelectSubset<T, WeeklyReflectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WeeklyReflectionClient<$Result.GetResult<Prisma.$WeeklyReflectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WeeklyReflection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyReflectionFindFirstArgs} args - Arguments to find a WeeklyReflection
     * @example
     * // Get one WeeklyReflection
     * const weeklyReflection = await prisma.weeklyReflection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WeeklyReflectionFindFirstArgs>(args?: SelectSubset<T, WeeklyReflectionFindFirstArgs<ExtArgs>>): Prisma__WeeklyReflectionClient<$Result.GetResult<Prisma.$WeeklyReflectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WeeklyReflection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyReflectionFindFirstOrThrowArgs} args - Arguments to find a WeeklyReflection
     * @example
     * // Get one WeeklyReflection
     * const weeklyReflection = await prisma.weeklyReflection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WeeklyReflectionFindFirstOrThrowArgs>(args?: SelectSubset<T, WeeklyReflectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__WeeklyReflectionClient<$Result.GetResult<Prisma.$WeeklyReflectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WeeklyReflections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyReflectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WeeklyReflections
     * const weeklyReflections = await prisma.weeklyReflection.findMany()
     * 
     * // Get first 10 WeeklyReflections
     * const weeklyReflections = await prisma.weeklyReflection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const weeklyReflectionWithIdOnly = await prisma.weeklyReflection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WeeklyReflectionFindManyArgs>(args?: SelectSubset<T, WeeklyReflectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeeklyReflectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WeeklyReflection.
     * @param {WeeklyReflectionCreateArgs} args - Arguments to create a WeeklyReflection.
     * @example
     * // Create one WeeklyReflection
     * const WeeklyReflection = await prisma.weeklyReflection.create({
     *   data: {
     *     // ... data to create a WeeklyReflection
     *   }
     * })
     * 
     */
    create<T extends WeeklyReflectionCreateArgs>(args: SelectSubset<T, WeeklyReflectionCreateArgs<ExtArgs>>): Prisma__WeeklyReflectionClient<$Result.GetResult<Prisma.$WeeklyReflectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WeeklyReflections.
     * @param {WeeklyReflectionCreateManyArgs} args - Arguments to create many WeeklyReflections.
     * @example
     * // Create many WeeklyReflections
     * const weeklyReflection = await prisma.weeklyReflection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WeeklyReflectionCreateManyArgs>(args?: SelectSubset<T, WeeklyReflectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WeeklyReflections and returns the data saved in the database.
     * @param {WeeklyReflectionCreateManyAndReturnArgs} args - Arguments to create many WeeklyReflections.
     * @example
     * // Create many WeeklyReflections
     * const weeklyReflection = await prisma.weeklyReflection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WeeklyReflections and only return the `id`
     * const weeklyReflectionWithIdOnly = await prisma.weeklyReflection.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WeeklyReflectionCreateManyAndReturnArgs>(args?: SelectSubset<T, WeeklyReflectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeeklyReflectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WeeklyReflection.
     * @param {WeeklyReflectionDeleteArgs} args - Arguments to delete one WeeklyReflection.
     * @example
     * // Delete one WeeklyReflection
     * const WeeklyReflection = await prisma.weeklyReflection.delete({
     *   where: {
     *     // ... filter to delete one WeeklyReflection
     *   }
     * })
     * 
     */
    delete<T extends WeeklyReflectionDeleteArgs>(args: SelectSubset<T, WeeklyReflectionDeleteArgs<ExtArgs>>): Prisma__WeeklyReflectionClient<$Result.GetResult<Prisma.$WeeklyReflectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WeeklyReflection.
     * @param {WeeklyReflectionUpdateArgs} args - Arguments to update one WeeklyReflection.
     * @example
     * // Update one WeeklyReflection
     * const weeklyReflection = await prisma.weeklyReflection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WeeklyReflectionUpdateArgs>(args: SelectSubset<T, WeeklyReflectionUpdateArgs<ExtArgs>>): Prisma__WeeklyReflectionClient<$Result.GetResult<Prisma.$WeeklyReflectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WeeklyReflections.
     * @param {WeeklyReflectionDeleteManyArgs} args - Arguments to filter WeeklyReflections to delete.
     * @example
     * // Delete a few WeeklyReflections
     * const { count } = await prisma.weeklyReflection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WeeklyReflectionDeleteManyArgs>(args?: SelectSubset<T, WeeklyReflectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WeeklyReflections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyReflectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WeeklyReflections
     * const weeklyReflection = await prisma.weeklyReflection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WeeklyReflectionUpdateManyArgs>(args: SelectSubset<T, WeeklyReflectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WeeklyReflections and returns the data updated in the database.
     * @param {WeeklyReflectionUpdateManyAndReturnArgs} args - Arguments to update many WeeklyReflections.
     * @example
     * // Update many WeeklyReflections
     * const weeklyReflection = await prisma.weeklyReflection.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WeeklyReflections and only return the `id`
     * const weeklyReflectionWithIdOnly = await prisma.weeklyReflection.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WeeklyReflectionUpdateManyAndReturnArgs>(args: SelectSubset<T, WeeklyReflectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeeklyReflectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WeeklyReflection.
     * @param {WeeklyReflectionUpsertArgs} args - Arguments to update or create a WeeklyReflection.
     * @example
     * // Update or create a WeeklyReflection
     * const weeklyReflection = await prisma.weeklyReflection.upsert({
     *   create: {
     *     // ... data to create a WeeklyReflection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WeeklyReflection we want to update
     *   }
     * })
     */
    upsert<T extends WeeklyReflectionUpsertArgs>(args: SelectSubset<T, WeeklyReflectionUpsertArgs<ExtArgs>>): Prisma__WeeklyReflectionClient<$Result.GetResult<Prisma.$WeeklyReflectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WeeklyReflections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyReflectionCountArgs} args - Arguments to filter WeeklyReflections to count.
     * @example
     * // Count the number of WeeklyReflections
     * const count = await prisma.weeklyReflection.count({
     *   where: {
     *     // ... the filter for the WeeklyReflections we want to count
     *   }
     * })
    **/
    count<T extends WeeklyReflectionCountArgs>(
      args?: Subset<T, WeeklyReflectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WeeklyReflectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WeeklyReflection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyReflectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WeeklyReflectionAggregateArgs>(args: Subset<T, WeeklyReflectionAggregateArgs>): Prisma.PrismaPromise<GetWeeklyReflectionAggregateType<T>>

    /**
     * Group by WeeklyReflection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyReflectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WeeklyReflectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WeeklyReflectionGroupByArgs['orderBy'] }
        : { orderBy?: WeeklyReflectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WeeklyReflectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeeklyReflectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WeeklyReflection model
   */
  readonly fields: WeeklyReflectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WeeklyReflection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WeeklyReflectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WeeklyReflection model
   */
  interface WeeklyReflectionFieldRefs {
    readonly id: FieldRef<"WeeklyReflection", 'String'>
    readonly userId: FieldRef<"WeeklyReflection", 'String'>
    readonly weekStart: FieldRef<"WeeklyReflection", 'DateTime'>
    readonly weekEnd: FieldRef<"WeeklyReflection", 'DateTime'>
    readonly content: FieldRef<"WeeklyReflection", 'String'>
    readonly createdAt: FieldRef<"WeeklyReflection", 'DateTime'>
    readonly updatedAt: FieldRef<"WeeklyReflection", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WeeklyReflection findUnique
   */
  export type WeeklyReflectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyReflection
     */
    select?: WeeklyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklyReflection
     */
    omit?: WeeklyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyReflectionInclude<ExtArgs> | null
    /**
     * Filter, which WeeklyReflection to fetch.
     */
    where: WeeklyReflectionWhereUniqueInput
  }

  /**
   * WeeklyReflection findUniqueOrThrow
   */
  export type WeeklyReflectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyReflection
     */
    select?: WeeklyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklyReflection
     */
    omit?: WeeklyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyReflectionInclude<ExtArgs> | null
    /**
     * Filter, which WeeklyReflection to fetch.
     */
    where: WeeklyReflectionWhereUniqueInput
  }

  /**
   * WeeklyReflection findFirst
   */
  export type WeeklyReflectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyReflection
     */
    select?: WeeklyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklyReflection
     */
    omit?: WeeklyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyReflectionInclude<ExtArgs> | null
    /**
     * Filter, which WeeklyReflection to fetch.
     */
    where?: WeeklyReflectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklyReflections to fetch.
     */
    orderBy?: WeeklyReflectionOrderByWithRelationInput | WeeklyReflectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeeklyReflections.
     */
    cursor?: WeeklyReflectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklyReflections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklyReflections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeeklyReflections.
     */
    distinct?: WeeklyReflectionScalarFieldEnum | WeeklyReflectionScalarFieldEnum[]
  }

  /**
   * WeeklyReflection findFirstOrThrow
   */
  export type WeeklyReflectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyReflection
     */
    select?: WeeklyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklyReflection
     */
    omit?: WeeklyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyReflectionInclude<ExtArgs> | null
    /**
     * Filter, which WeeklyReflection to fetch.
     */
    where?: WeeklyReflectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklyReflections to fetch.
     */
    orderBy?: WeeklyReflectionOrderByWithRelationInput | WeeklyReflectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeeklyReflections.
     */
    cursor?: WeeklyReflectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklyReflections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklyReflections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeeklyReflections.
     */
    distinct?: WeeklyReflectionScalarFieldEnum | WeeklyReflectionScalarFieldEnum[]
  }

  /**
   * WeeklyReflection findMany
   */
  export type WeeklyReflectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyReflection
     */
    select?: WeeklyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklyReflection
     */
    omit?: WeeklyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyReflectionInclude<ExtArgs> | null
    /**
     * Filter, which WeeklyReflections to fetch.
     */
    where?: WeeklyReflectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklyReflections to fetch.
     */
    orderBy?: WeeklyReflectionOrderByWithRelationInput | WeeklyReflectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WeeklyReflections.
     */
    cursor?: WeeklyReflectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklyReflections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklyReflections.
     */
    skip?: number
    distinct?: WeeklyReflectionScalarFieldEnum | WeeklyReflectionScalarFieldEnum[]
  }

  /**
   * WeeklyReflection create
   */
  export type WeeklyReflectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyReflection
     */
    select?: WeeklyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklyReflection
     */
    omit?: WeeklyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyReflectionInclude<ExtArgs> | null
    /**
     * The data needed to create a WeeklyReflection.
     */
    data: XOR<WeeklyReflectionCreateInput, WeeklyReflectionUncheckedCreateInput>
  }

  /**
   * WeeklyReflection createMany
   */
  export type WeeklyReflectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WeeklyReflections.
     */
    data: WeeklyReflectionCreateManyInput | WeeklyReflectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WeeklyReflection createManyAndReturn
   */
  export type WeeklyReflectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyReflection
     */
    select?: WeeklyReflectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklyReflection
     */
    omit?: WeeklyReflectionOmit<ExtArgs> | null
    /**
     * The data used to create many WeeklyReflections.
     */
    data: WeeklyReflectionCreateManyInput | WeeklyReflectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyReflectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WeeklyReflection update
   */
  export type WeeklyReflectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyReflection
     */
    select?: WeeklyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklyReflection
     */
    omit?: WeeklyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyReflectionInclude<ExtArgs> | null
    /**
     * The data needed to update a WeeklyReflection.
     */
    data: XOR<WeeklyReflectionUpdateInput, WeeklyReflectionUncheckedUpdateInput>
    /**
     * Choose, which WeeklyReflection to update.
     */
    where: WeeklyReflectionWhereUniqueInput
  }

  /**
   * WeeklyReflection updateMany
   */
  export type WeeklyReflectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WeeklyReflections.
     */
    data: XOR<WeeklyReflectionUpdateManyMutationInput, WeeklyReflectionUncheckedUpdateManyInput>
    /**
     * Filter which WeeklyReflections to update
     */
    where?: WeeklyReflectionWhereInput
    /**
     * Limit how many WeeklyReflections to update.
     */
    limit?: number
  }

  /**
   * WeeklyReflection updateManyAndReturn
   */
  export type WeeklyReflectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyReflection
     */
    select?: WeeklyReflectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklyReflection
     */
    omit?: WeeklyReflectionOmit<ExtArgs> | null
    /**
     * The data used to update WeeklyReflections.
     */
    data: XOR<WeeklyReflectionUpdateManyMutationInput, WeeklyReflectionUncheckedUpdateManyInput>
    /**
     * Filter which WeeklyReflections to update
     */
    where?: WeeklyReflectionWhereInput
    /**
     * Limit how many WeeklyReflections to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyReflectionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WeeklyReflection upsert
   */
  export type WeeklyReflectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyReflection
     */
    select?: WeeklyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklyReflection
     */
    omit?: WeeklyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyReflectionInclude<ExtArgs> | null
    /**
     * The filter to search for the WeeklyReflection to update in case it exists.
     */
    where: WeeklyReflectionWhereUniqueInput
    /**
     * In case the WeeklyReflection found by the `where` argument doesn't exist, create a new WeeklyReflection with this data.
     */
    create: XOR<WeeklyReflectionCreateInput, WeeklyReflectionUncheckedCreateInput>
    /**
     * In case the WeeklyReflection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WeeklyReflectionUpdateInput, WeeklyReflectionUncheckedUpdateInput>
  }

  /**
   * WeeklyReflection delete
   */
  export type WeeklyReflectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyReflection
     */
    select?: WeeklyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklyReflection
     */
    omit?: WeeklyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyReflectionInclude<ExtArgs> | null
    /**
     * Filter which WeeklyReflection to delete.
     */
    where: WeeklyReflectionWhereUniqueInput
  }

  /**
   * WeeklyReflection deleteMany
   */
  export type WeeklyReflectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeeklyReflections to delete
     */
    where?: WeeklyReflectionWhereInput
    /**
     * Limit how many WeeklyReflections to delete.
     */
    limit?: number
  }

  /**
   * WeeklyReflection without action
   */
  export type WeeklyReflectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklyReflection
     */
    select?: WeeklyReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklyReflection
     */
    omit?: WeeklyReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyReflectionInclude<ExtArgs> | null
  }


  /**
   * Model ValuePrompt
   */

  export type AggregateValuePrompt = {
    _count: ValuePromptCountAggregateOutputType | null
    _min: ValuePromptMinAggregateOutputType | null
    _max: ValuePromptMaxAggregateOutputType | null
  }

  export type ValuePromptMinAggregateOutputType = {
    id: string | null
    userId: string | null
    promptType: string | null
    content: string | null
    response: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ValuePromptMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    promptType: string | null
    content: string | null
    response: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ValuePromptCountAggregateOutputType = {
    id: number
    userId: number
    promptType: number
    content: number
    response: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ValuePromptMinAggregateInputType = {
    id?: true
    userId?: true
    promptType?: true
    content?: true
    response?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ValuePromptMaxAggregateInputType = {
    id?: true
    userId?: true
    promptType?: true
    content?: true
    response?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ValuePromptCountAggregateInputType = {
    id?: true
    userId?: true
    promptType?: true
    content?: true
    response?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ValuePromptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ValuePrompt to aggregate.
     */
    where?: ValuePromptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValuePrompts to fetch.
     */
    orderBy?: ValuePromptOrderByWithRelationInput | ValuePromptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ValuePromptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValuePrompts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValuePrompts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ValuePrompts
    **/
    _count?: true | ValuePromptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ValuePromptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ValuePromptMaxAggregateInputType
  }

  export type GetValuePromptAggregateType<T extends ValuePromptAggregateArgs> = {
        [P in keyof T & keyof AggregateValuePrompt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateValuePrompt[P]>
      : GetScalarType<T[P], AggregateValuePrompt[P]>
  }




  export type ValuePromptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValuePromptWhereInput
    orderBy?: ValuePromptOrderByWithAggregationInput | ValuePromptOrderByWithAggregationInput[]
    by: ValuePromptScalarFieldEnum[] | ValuePromptScalarFieldEnum
    having?: ValuePromptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ValuePromptCountAggregateInputType | true
    _min?: ValuePromptMinAggregateInputType
    _max?: ValuePromptMaxAggregateInputType
  }

  export type ValuePromptGroupByOutputType = {
    id: string
    userId: string
    promptType: string
    content: string
    response: string | null
    createdAt: Date
    updatedAt: Date
    _count: ValuePromptCountAggregateOutputType | null
    _min: ValuePromptMinAggregateOutputType | null
    _max: ValuePromptMaxAggregateOutputType | null
  }

  type GetValuePromptGroupByPayload<T extends ValuePromptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ValuePromptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ValuePromptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ValuePromptGroupByOutputType[P]>
            : GetScalarType<T[P], ValuePromptGroupByOutputType[P]>
        }
      >
    >


  export type ValuePromptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    promptType?: boolean
    content?: boolean
    response?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["valuePrompt"]>

  export type ValuePromptSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    promptType?: boolean
    content?: boolean
    response?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["valuePrompt"]>

  export type ValuePromptSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    promptType?: boolean
    content?: boolean
    response?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["valuePrompt"]>

  export type ValuePromptSelectScalar = {
    id?: boolean
    userId?: boolean
    promptType?: boolean
    content?: boolean
    response?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ValuePromptOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "promptType" | "content" | "response" | "createdAt" | "updatedAt", ExtArgs["result"]["valuePrompt"]>
  export type ValuePromptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ValuePromptIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ValuePromptIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ValuePromptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ValuePrompt"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      promptType: string
      content: string
      response: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["valuePrompt"]>
    composites: {}
  }

  type ValuePromptGetPayload<S extends boolean | null | undefined | ValuePromptDefaultArgs> = $Result.GetResult<Prisma.$ValuePromptPayload, S>

  type ValuePromptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ValuePromptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ValuePromptCountAggregateInputType | true
    }

  export interface ValuePromptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ValuePrompt'], meta: { name: 'ValuePrompt' } }
    /**
     * Find zero or one ValuePrompt that matches the filter.
     * @param {ValuePromptFindUniqueArgs} args - Arguments to find a ValuePrompt
     * @example
     * // Get one ValuePrompt
     * const valuePrompt = await prisma.valuePrompt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ValuePromptFindUniqueArgs>(args: SelectSubset<T, ValuePromptFindUniqueArgs<ExtArgs>>): Prisma__ValuePromptClient<$Result.GetResult<Prisma.$ValuePromptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ValuePrompt that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ValuePromptFindUniqueOrThrowArgs} args - Arguments to find a ValuePrompt
     * @example
     * // Get one ValuePrompt
     * const valuePrompt = await prisma.valuePrompt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ValuePromptFindUniqueOrThrowArgs>(args: SelectSubset<T, ValuePromptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ValuePromptClient<$Result.GetResult<Prisma.$ValuePromptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ValuePrompt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuePromptFindFirstArgs} args - Arguments to find a ValuePrompt
     * @example
     * // Get one ValuePrompt
     * const valuePrompt = await prisma.valuePrompt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ValuePromptFindFirstArgs>(args?: SelectSubset<T, ValuePromptFindFirstArgs<ExtArgs>>): Prisma__ValuePromptClient<$Result.GetResult<Prisma.$ValuePromptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ValuePrompt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuePromptFindFirstOrThrowArgs} args - Arguments to find a ValuePrompt
     * @example
     * // Get one ValuePrompt
     * const valuePrompt = await prisma.valuePrompt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ValuePromptFindFirstOrThrowArgs>(args?: SelectSubset<T, ValuePromptFindFirstOrThrowArgs<ExtArgs>>): Prisma__ValuePromptClient<$Result.GetResult<Prisma.$ValuePromptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ValuePrompts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuePromptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ValuePrompts
     * const valuePrompts = await prisma.valuePrompt.findMany()
     * 
     * // Get first 10 ValuePrompts
     * const valuePrompts = await prisma.valuePrompt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const valuePromptWithIdOnly = await prisma.valuePrompt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ValuePromptFindManyArgs>(args?: SelectSubset<T, ValuePromptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValuePromptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ValuePrompt.
     * @param {ValuePromptCreateArgs} args - Arguments to create a ValuePrompt.
     * @example
     * // Create one ValuePrompt
     * const ValuePrompt = await prisma.valuePrompt.create({
     *   data: {
     *     // ... data to create a ValuePrompt
     *   }
     * })
     * 
     */
    create<T extends ValuePromptCreateArgs>(args: SelectSubset<T, ValuePromptCreateArgs<ExtArgs>>): Prisma__ValuePromptClient<$Result.GetResult<Prisma.$ValuePromptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ValuePrompts.
     * @param {ValuePromptCreateManyArgs} args - Arguments to create many ValuePrompts.
     * @example
     * // Create many ValuePrompts
     * const valuePrompt = await prisma.valuePrompt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ValuePromptCreateManyArgs>(args?: SelectSubset<T, ValuePromptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ValuePrompts and returns the data saved in the database.
     * @param {ValuePromptCreateManyAndReturnArgs} args - Arguments to create many ValuePrompts.
     * @example
     * // Create many ValuePrompts
     * const valuePrompt = await prisma.valuePrompt.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ValuePrompts and only return the `id`
     * const valuePromptWithIdOnly = await prisma.valuePrompt.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ValuePromptCreateManyAndReturnArgs>(args?: SelectSubset<T, ValuePromptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValuePromptPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ValuePrompt.
     * @param {ValuePromptDeleteArgs} args - Arguments to delete one ValuePrompt.
     * @example
     * // Delete one ValuePrompt
     * const ValuePrompt = await prisma.valuePrompt.delete({
     *   where: {
     *     // ... filter to delete one ValuePrompt
     *   }
     * })
     * 
     */
    delete<T extends ValuePromptDeleteArgs>(args: SelectSubset<T, ValuePromptDeleteArgs<ExtArgs>>): Prisma__ValuePromptClient<$Result.GetResult<Prisma.$ValuePromptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ValuePrompt.
     * @param {ValuePromptUpdateArgs} args - Arguments to update one ValuePrompt.
     * @example
     * // Update one ValuePrompt
     * const valuePrompt = await prisma.valuePrompt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ValuePromptUpdateArgs>(args: SelectSubset<T, ValuePromptUpdateArgs<ExtArgs>>): Prisma__ValuePromptClient<$Result.GetResult<Prisma.$ValuePromptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ValuePrompts.
     * @param {ValuePromptDeleteManyArgs} args - Arguments to filter ValuePrompts to delete.
     * @example
     * // Delete a few ValuePrompts
     * const { count } = await prisma.valuePrompt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ValuePromptDeleteManyArgs>(args?: SelectSubset<T, ValuePromptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ValuePrompts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuePromptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ValuePrompts
     * const valuePrompt = await prisma.valuePrompt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ValuePromptUpdateManyArgs>(args: SelectSubset<T, ValuePromptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ValuePrompts and returns the data updated in the database.
     * @param {ValuePromptUpdateManyAndReturnArgs} args - Arguments to update many ValuePrompts.
     * @example
     * // Update many ValuePrompts
     * const valuePrompt = await prisma.valuePrompt.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ValuePrompts and only return the `id`
     * const valuePromptWithIdOnly = await prisma.valuePrompt.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ValuePromptUpdateManyAndReturnArgs>(args: SelectSubset<T, ValuePromptUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValuePromptPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ValuePrompt.
     * @param {ValuePromptUpsertArgs} args - Arguments to update or create a ValuePrompt.
     * @example
     * // Update or create a ValuePrompt
     * const valuePrompt = await prisma.valuePrompt.upsert({
     *   create: {
     *     // ... data to create a ValuePrompt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ValuePrompt we want to update
     *   }
     * })
     */
    upsert<T extends ValuePromptUpsertArgs>(args: SelectSubset<T, ValuePromptUpsertArgs<ExtArgs>>): Prisma__ValuePromptClient<$Result.GetResult<Prisma.$ValuePromptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ValuePrompts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuePromptCountArgs} args - Arguments to filter ValuePrompts to count.
     * @example
     * // Count the number of ValuePrompts
     * const count = await prisma.valuePrompt.count({
     *   where: {
     *     // ... the filter for the ValuePrompts we want to count
     *   }
     * })
    **/
    count<T extends ValuePromptCountArgs>(
      args?: Subset<T, ValuePromptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ValuePromptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ValuePrompt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuePromptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ValuePromptAggregateArgs>(args: Subset<T, ValuePromptAggregateArgs>): Prisma.PrismaPromise<GetValuePromptAggregateType<T>>

    /**
     * Group by ValuePrompt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuePromptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ValuePromptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ValuePromptGroupByArgs['orderBy'] }
        : { orderBy?: ValuePromptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ValuePromptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetValuePromptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ValuePrompt model
   */
  readonly fields: ValuePromptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ValuePrompt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ValuePromptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ValuePrompt model
   */
  interface ValuePromptFieldRefs {
    readonly id: FieldRef<"ValuePrompt", 'String'>
    readonly userId: FieldRef<"ValuePrompt", 'String'>
    readonly promptType: FieldRef<"ValuePrompt", 'String'>
    readonly content: FieldRef<"ValuePrompt", 'String'>
    readonly response: FieldRef<"ValuePrompt", 'String'>
    readonly createdAt: FieldRef<"ValuePrompt", 'DateTime'>
    readonly updatedAt: FieldRef<"ValuePrompt", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ValuePrompt findUnique
   */
  export type ValuePromptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuePrompt
     */
    select?: ValuePromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuePrompt
     */
    omit?: ValuePromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuePromptInclude<ExtArgs> | null
    /**
     * Filter, which ValuePrompt to fetch.
     */
    where: ValuePromptWhereUniqueInput
  }

  /**
   * ValuePrompt findUniqueOrThrow
   */
  export type ValuePromptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuePrompt
     */
    select?: ValuePromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuePrompt
     */
    omit?: ValuePromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuePromptInclude<ExtArgs> | null
    /**
     * Filter, which ValuePrompt to fetch.
     */
    where: ValuePromptWhereUniqueInput
  }

  /**
   * ValuePrompt findFirst
   */
  export type ValuePromptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuePrompt
     */
    select?: ValuePromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuePrompt
     */
    omit?: ValuePromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuePromptInclude<ExtArgs> | null
    /**
     * Filter, which ValuePrompt to fetch.
     */
    where?: ValuePromptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValuePrompts to fetch.
     */
    orderBy?: ValuePromptOrderByWithRelationInput | ValuePromptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ValuePrompts.
     */
    cursor?: ValuePromptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValuePrompts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValuePrompts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ValuePrompts.
     */
    distinct?: ValuePromptScalarFieldEnum | ValuePromptScalarFieldEnum[]
  }

  /**
   * ValuePrompt findFirstOrThrow
   */
  export type ValuePromptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuePrompt
     */
    select?: ValuePromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuePrompt
     */
    omit?: ValuePromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuePromptInclude<ExtArgs> | null
    /**
     * Filter, which ValuePrompt to fetch.
     */
    where?: ValuePromptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValuePrompts to fetch.
     */
    orderBy?: ValuePromptOrderByWithRelationInput | ValuePromptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ValuePrompts.
     */
    cursor?: ValuePromptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValuePrompts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValuePrompts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ValuePrompts.
     */
    distinct?: ValuePromptScalarFieldEnum | ValuePromptScalarFieldEnum[]
  }

  /**
   * ValuePrompt findMany
   */
  export type ValuePromptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuePrompt
     */
    select?: ValuePromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuePrompt
     */
    omit?: ValuePromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuePromptInclude<ExtArgs> | null
    /**
     * Filter, which ValuePrompts to fetch.
     */
    where?: ValuePromptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValuePrompts to fetch.
     */
    orderBy?: ValuePromptOrderByWithRelationInput | ValuePromptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ValuePrompts.
     */
    cursor?: ValuePromptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValuePrompts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValuePrompts.
     */
    skip?: number
    distinct?: ValuePromptScalarFieldEnum | ValuePromptScalarFieldEnum[]
  }

  /**
   * ValuePrompt create
   */
  export type ValuePromptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuePrompt
     */
    select?: ValuePromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuePrompt
     */
    omit?: ValuePromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuePromptInclude<ExtArgs> | null
    /**
     * The data needed to create a ValuePrompt.
     */
    data: XOR<ValuePromptCreateInput, ValuePromptUncheckedCreateInput>
  }

  /**
   * ValuePrompt createMany
   */
  export type ValuePromptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ValuePrompts.
     */
    data: ValuePromptCreateManyInput | ValuePromptCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ValuePrompt createManyAndReturn
   */
  export type ValuePromptCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuePrompt
     */
    select?: ValuePromptSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ValuePrompt
     */
    omit?: ValuePromptOmit<ExtArgs> | null
    /**
     * The data used to create many ValuePrompts.
     */
    data: ValuePromptCreateManyInput | ValuePromptCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuePromptIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ValuePrompt update
   */
  export type ValuePromptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuePrompt
     */
    select?: ValuePromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuePrompt
     */
    omit?: ValuePromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuePromptInclude<ExtArgs> | null
    /**
     * The data needed to update a ValuePrompt.
     */
    data: XOR<ValuePromptUpdateInput, ValuePromptUncheckedUpdateInput>
    /**
     * Choose, which ValuePrompt to update.
     */
    where: ValuePromptWhereUniqueInput
  }

  /**
   * ValuePrompt updateMany
   */
  export type ValuePromptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ValuePrompts.
     */
    data: XOR<ValuePromptUpdateManyMutationInput, ValuePromptUncheckedUpdateManyInput>
    /**
     * Filter which ValuePrompts to update
     */
    where?: ValuePromptWhereInput
    /**
     * Limit how many ValuePrompts to update.
     */
    limit?: number
  }

  /**
   * ValuePrompt updateManyAndReturn
   */
  export type ValuePromptUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuePrompt
     */
    select?: ValuePromptSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ValuePrompt
     */
    omit?: ValuePromptOmit<ExtArgs> | null
    /**
     * The data used to update ValuePrompts.
     */
    data: XOR<ValuePromptUpdateManyMutationInput, ValuePromptUncheckedUpdateManyInput>
    /**
     * Filter which ValuePrompts to update
     */
    where?: ValuePromptWhereInput
    /**
     * Limit how many ValuePrompts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuePromptIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ValuePrompt upsert
   */
  export type ValuePromptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuePrompt
     */
    select?: ValuePromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuePrompt
     */
    omit?: ValuePromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuePromptInclude<ExtArgs> | null
    /**
     * The filter to search for the ValuePrompt to update in case it exists.
     */
    where: ValuePromptWhereUniqueInput
    /**
     * In case the ValuePrompt found by the `where` argument doesn't exist, create a new ValuePrompt with this data.
     */
    create: XOR<ValuePromptCreateInput, ValuePromptUncheckedCreateInput>
    /**
     * In case the ValuePrompt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ValuePromptUpdateInput, ValuePromptUncheckedUpdateInput>
  }

  /**
   * ValuePrompt delete
   */
  export type ValuePromptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuePrompt
     */
    select?: ValuePromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuePrompt
     */
    omit?: ValuePromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuePromptInclude<ExtArgs> | null
    /**
     * Filter which ValuePrompt to delete.
     */
    where: ValuePromptWhereUniqueInput
  }

  /**
   * ValuePrompt deleteMany
   */
  export type ValuePromptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ValuePrompts to delete
     */
    where?: ValuePromptWhereInput
    /**
     * Limit how many ValuePrompts to delete.
     */
    limit?: number
  }

  /**
   * ValuePrompt without action
   */
  export type ValuePromptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuePrompt
     */
    select?: ValuePromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuePrompt
     */
    omit?: ValuePromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuePromptInclude<ExtArgs> | null
  }


  /**
   * Model ReflectionBadge
   */

  export type AggregateReflectionBadge = {
    _count: ReflectionBadgeCountAggregateOutputType | null
    _min: ReflectionBadgeMinAggregateOutputType | null
    _max: ReflectionBadgeMaxAggregateOutputType | null
  }

  export type ReflectionBadgeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    badgeType: string | null
    awardedAt: Date | null
  }

  export type ReflectionBadgeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    badgeType: string | null
    awardedAt: Date | null
  }

  export type ReflectionBadgeCountAggregateOutputType = {
    id: number
    userId: number
    badgeType: number
    awardedAt: number
    _all: number
  }


  export type ReflectionBadgeMinAggregateInputType = {
    id?: true
    userId?: true
    badgeType?: true
    awardedAt?: true
  }

  export type ReflectionBadgeMaxAggregateInputType = {
    id?: true
    userId?: true
    badgeType?: true
    awardedAt?: true
  }

  export type ReflectionBadgeCountAggregateInputType = {
    id?: true
    userId?: true
    badgeType?: true
    awardedAt?: true
    _all?: true
  }

  export type ReflectionBadgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReflectionBadge to aggregate.
     */
    where?: ReflectionBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReflectionBadges to fetch.
     */
    orderBy?: ReflectionBadgeOrderByWithRelationInput | ReflectionBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReflectionBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReflectionBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReflectionBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReflectionBadges
    **/
    _count?: true | ReflectionBadgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReflectionBadgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReflectionBadgeMaxAggregateInputType
  }

  export type GetReflectionBadgeAggregateType<T extends ReflectionBadgeAggregateArgs> = {
        [P in keyof T & keyof AggregateReflectionBadge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReflectionBadge[P]>
      : GetScalarType<T[P], AggregateReflectionBadge[P]>
  }




  export type ReflectionBadgeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReflectionBadgeWhereInput
    orderBy?: ReflectionBadgeOrderByWithAggregationInput | ReflectionBadgeOrderByWithAggregationInput[]
    by: ReflectionBadgeScalarFieldEnum[] | ReflectionBadgeScalarFieldEnum
    having?: ReflectionBadgeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReflectionBadgeCountAggregateInputType | true
    _min?: ReflectionBadgeMinAggregateInputType
    _max?: ReflectionBadgeMaxAggregateInputType
  }

  export type ReflectionBadgeGroupByOutputType = {
    id: string
    userId: string
    badgeType: string
    awardedAt: Date
    _count: ReflectionBadgeCountAggregateOutputType | null
    _min: ReflectionBadgeMinAggregateOutputType | null
    _max: ReflectionBadgeMaxAggregateOutputType | null
  }

  type GetReflectionBadgeGroupByPayload<T extends ReflectionBadgeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReflectionBadgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReflectionBadgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReflectionBadgeGroupByOutputType[P]>
            : GetScalarType<T[P], ReflectionBadgeGroupByOutputType[P]>
        }
      >
    >


  export type ReflectionBadgeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    badgeType?: boolean
    awardedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reflectionBadge"]>

  export type ReflectionBadgeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    badgeType?: boolean
    awardedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reflectionBadge"]>

  export type ReflectionBadgeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    badgeType?: boolean
    awardedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reflectionBadge"]>

  export type ReflectionBadgeSelectScalar = {
    id?: boolean
    userId?: boolean
    badgeType?: boolean
    awardedAt?: boolean
  }

  export type ReflectionBadgeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "badgeType" | "awardedAt", ExtArgs["result"]["reflectionBadge"]>
  export type ReflectionBadgeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReflectionBadgeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReflectionBadgeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ReflectionBadgePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReflectionBadge"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      badgeType: string
      awardedAt: Date
    }, ExtArgs["result"]["reflectionBadge"]>
    composites: {}
  }

  type ReflectionBadgeGetPayload<S extends boolean | null | undefined | ReflectionBadgeDefaultArgs> = $Result.GetResult<Prisma.$ReflectionBadgePayload, S>

  type ReflectionBadgeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReflectionBadgeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReflectionBadgeCountAggregateInputType | true
    }

  export interface ReflectionBadgeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReflectionBadge'], meta: { name: 'ReflectionBadge' } }
    /**
     * Find zero or one ReflectionBadge that matches the filter.
     * @param {ReflectionBadgeFindUniqueArgs} args - Arguments to find a ReflectionBadge
     * @example
     * // Get one ReflectionBadge
     * const reflectionBadge = await prisma.reflectionBadge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReflectionBadgeFindUniqueArgs>(args: SelectSubset<T, ReflectionBadgeFindUniqueArgs<ExtArgs>>): Prisma__ReflectionBadgeClient<$Result.GetResult<Prisma.$ReflectionBadgePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReflectionBadge that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReflectionBadgeFindUniqueOrThrowArgs} args - Arguments to find a ReflectionBadge
     * @example
     * // Get one ReflectionBadge
     * const reflectionBadge = await prisma.reflectionBadge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReflectionBadgeFindUniqueOrThrowArgs>(args: SelectSubset<T, ReflectionBadgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReflectionBadgeClient<$Result.GetResult<Prisma.$ReflectionBadgePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReflectionBadge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReflectionBadgeFindFirstArgs} args - Arguments to find a ReflectionBadge
     * @example
     * // Get one ReflectionBadge
     * const reflectionBadge = await prisma.reflectionBadge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReflectionBadgeFindFirstArgs>(args?: SelectSubset<T, ReflectionBadgeFindFirstArgs<ExtArgs>>): Prisma__ReflectionBadgeClient<$Result.GetResult<Prisma.$ReflectionBadgePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReflectionBadge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReflectionBadgeFindFirstOrThrowArgs} args - Arguments to find a ReflectionBadge
     * @example
     * // Get one ReflectionBadge
     * const reflectionBadge = await prisma.reflectionBadge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReflectionBadgeFindFirstOrThrowArgs>(args?: SelectSubset<T, ReflectionBadgeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReflectionBadgeClient<$Result.GetResult<Prisma.$ReflectionBadgePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReflectionBadges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReflectionBadgeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReflectionBadges
     * const reflectionBadges = await prisma.reflectionBadge.findMany()
     * 
     * // Get first 10 ReflectionBadges
     * const reflectionBadges = await prisma.reflectionBadge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reflectionBadgeWithIdOnly = await prisma.reflectionBadge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReflectionBadgeFindManyArgs>(args?: SelectSubset<T, ReflectionBadgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReflectionBadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReflectionBadge.
     * @param {ReflectionBadgeCreateArgs} args - Arguments to create a ReflectionBadge.
     * @example
     * // Create one ReflectionBadge
     * const ReflectionBadge = await prisma.reflectionBadge.create({
     *   data: {
     *     // ... data to create a ReflectionBadge
     *   }
     * })
     * 
     */
    create<T extends ReflectionBadgeCreateArgs>(args: SelectSubset<T, ReflectionBadgeCreateArgs<ExtArgs>>): Prisma__ReflectionBadgeClient<$Result.GetResult<Prisma.$ReflectionBadgePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReflectionBadges.
     * @param {ReflectionBadgeCreateManyArgs} args - Arguments to create many ReflectionBadges.
     * @example
     * // Create many ReflectionBadges
     * const reflectionBadge = await prisma.reflectionBadge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReflectionBadgeCreateManyArgs>(args?: SelectSubset<T, ReflectionBadgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReflectionBadges and returns the data saved in the database.
     * @param {ReflectionBadgeCreateManyAndReturnArgs} args - Arguments to create many ReflectionBadges.
     * @example
     * // Create many ReflectionBadges
     * const reflectionBadge = await prisma.reflectionBadge.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReflectionBadges and only return the `id`
     * const reflectionBadgeWithIdOnly = await prisma.reflectionBadge.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReflectionBadgeCreateManyAndReturnArgs>(args?: SelectSubset<T, ReflectionBadgeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReflectionBadgePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReflectionBadge.
     * @param {ReflectionBadgeDeleteArgs} args - Arguments to delete one ReflectionBadge.
     * @example
     * // Delete one ReflectionBadge
     * const ReflectionBadge = await prisma.reflectionBadge.delete({
     *   where: {
     *     // ... filter to delete one ReflectionBadge
     *   }
     * })
     * 
     */
    delete<T extends ReflectionBadgeDeleteArgs>(args: SelectSubset<T, ReflectionBadgeDeleteArgs<ExtArgs>>): Prisma__ReflectionBadgeClient<$Result.GetResult<Prisma.$ReflectionBadgePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReflectionBadge.
     * @param {ReflectionBadgeUpdateArgs} args - Arguments to update one ReflectionBadge.
     * @example
     * // Update one ReflectionBadge
     * const reflectionBadge = await prisma.reflectionBadge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReflectionBadgeUpdateArgs>(args: SelectSubset<T, ReflectionBadgeUpdateArgs<ExtArgs>>): Prisma__ReflectionBadgeClient<$Result.GetResult<Prisma.$ReflectionBadgePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReflectionBadges.
     * @param {ReflectionBadgeDeleteManyArgs} args - Arguments to filter ReflectionBadges to delete.
     * @example
     * // Delete a few ReflectionBadges
     * const { count } = await prisma.reflectionBadge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReflectionBadgeDeleteManyArgs>(args?: SelectSubset<T, ReflectionBadgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReflectionBadges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReflectionBadgeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReflectionBadges
     * const reflectionBadge = await prisma.reflectionBadge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReflectionBadgeUpdateManyArgs>(args: SelectSubset<T, ReflectionBadgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReflectionBadges and returns the data updated in the database.
     * @param {ReflectionBadgeUpdateManyAndReturnArgs} args - Arguments to update many ReflectionBadges.
     * @example
     * // Update many ReflectionBadges
     * const reflectionBadge = await prisma.reflectionBadge.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReflectionBadges and only return the `id`
     * const reflectionBadgeWithIdOnly = await prisma.reflectionBadge.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReflectionBadgeUpdateManyAndReturnArgs>(args: SelectSubset<T, ReflectionBadgeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReflectionBadgePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReflectionBadge.
     * @param {ReflectionBadgeUpsertArgs} args - Arguments to update or create a ReflectionBadge.
     * @example
     * // Update or create a ReflectionBadge
     * const reflectionBadge = await prisma.reflectionBadge.upsert({
     *   create: {
     *     // ... data to create a ReflectionBadge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReflectionBadge we want to update
     *   }
     * })
     */
    upsert<T extends ReflectionBadgeUpsertArgs>(args: SelectSubset<T, ReflectionBadgeUpsertArgs<ExtArgs>>): Prisma__ReflectionBadgeClient<$Result.GetResult<Prisma.$ReflectionBadgePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReflectionBadges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReflectionBadgeCountArgs} args - Arguments to filter ReflectionBadges to count.
     * @example
     * // Count the number of ReflectionBadges
     * const count = await prisma.reflectionBadge.count({
     *   where: {
     *     // ... the filter for the ReflectionBadges we want to count
     *   }
     * })
    **/
    count<T extends ReflectionBadgeCountArgs>(
      args?: Subset<T, ReflectionBadgeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReflectionBadgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReflectionBadge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReflectionBadgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReflectionBadgeAggregateArgs>(args: Subset<T, ReflectionBadgeAggregateArgs>): Prisma.PrismaPromise<GetReflectionBadgeAggregateType<T>>

    /**
     * Group by ReflectionBadge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReflectionBadgeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReflectionBadgeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReflectionBadgeGroupByArgs['orderBy'] }
        : { orderBy?: ReflectionBadgeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReflectionBadgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReflectionBadgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReflectionBadge model
   */
  readonly fields: ReflectionBadgeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReflectionBadge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReflectionBadgeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReflectionBadge model
   */
  interface ReflectionBadgeFieldRefs {
    readonly id: FieldRef<"ReflectionBadge", 'String'>
    readonly userId: FieldRef<"ReflectionBadge", 'String'>
    readonly badgeType: FieldRef<"ReflectionBadge", 'String'>
    readonly awardedAt: FieldRef<"ReflectionBadge", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReflectionBadge findUnique
   */
  export type ReflectionBadgeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReflectionBadge
     */
    select?: ReflectionBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReflectionBadge
     */
    omit?: ReflectionBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionBadgeInclude<ExtArgs> | null
    /**
     * Filter, which ReflectionBadge to fetch.
     */
    where: ReflectionBadgeWhereUniqueInput
  }

  /**
   * ReflectionBadge findUniqueOrThrow
   */
  export type ReflectionBadgeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReflectionBadge
     */
    select?: ReflectionBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReflectionBadge
     */
    omit?: ReflectionBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionBadgeInclude<ExtArgs> | null
    /**
     * Filter, which ReflectionBadge to fetch.
     */
    where: ReflectionBadgeWhereUniqueInput
  }

  /**
   * ReflectionBadge findFirst
   */
  export type ReflectionBadgeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReflectionBadge
     */
    select?: ReflectionBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReflectionBadge
     */
    omit?: ReflectionBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionBadgeInclude<ExtArgs> | null
    /**
     * Filter, which ReflectionBadge to fetch.
     */
    where?: ReflectionBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReflectionBadges to fetch.
     */
    orderBy?: ReflectionBadgeOrderByWithRelationInput | ReflectionBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReflectionBadges.
     */
    cursor?: ReflectionBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReflectionBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReflectionBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReflectionBadges.
     */
    distinct?: ReflectionBadgeScalarFieldEnum | ReflectionBadgeScalarFieldEnum[]
  }

  /**
   * ReflectionBadge findFirstOrThrow
   */
  export type ReflectionBadgeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReflectionBadge
     */
    select?: ReflectionBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReflectionBadge
     */
    omit?: ReflectionBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionBadgeInclude<ExtArgs> | null
    /**
     * Filter, which ReflectionBadge to fetch.
     */
    where?: ReflectionBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReflectionBadges to fetch.
     */
    orderBy?: ReflectionBadgeOrderByWithRelationInput | ReflectionBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReflectionBadges.
     */
    cursor?: ReflectionBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReflectionBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReflectionBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReflectionBadges.
     */
    distinct?: ReflectionBadgeScalarFieldEnum | ReflectionBadgeScalarFieldEnum[]
  }

  /**
   * ReflectionBadge findMany
   */
  export type ReflectionBadgeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReflectionBadge
     */
    select?: ReflectionBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReflectionBadge
     */
    omit?: ReflectionBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionBadgeInclude<ExtArgs> | null
    /**
     * Filter, which ReflectionBadges to fetch.
     */
    where?: ReflectionBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReflectionBadges to fetch.
     */
    orderBy?: ReflectionBadgeOrderByWithRelationInput | ReflectionBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReflectionBadges.
     */
    cursor?: ReflectionBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReflectionBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReflectionBadges.
     */
    skip?: number
    distinct?: ReflectionBadgeScalarFieldEnum | ReflectionBadgeScalarFieldEnum[]
  }

  /**
   * ReflectionBadge create
   */
  export type ReflectionBadgeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReflectionBadge
     */
    select?: ReflectionBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReflectionBadge
     */
    omit?: ReflectionBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionBadgeInclude<ExtArgs> | null
    /**
     * The data needed to create a ReflectionBadge.
     */
    data: XOR<ReflectionBadgeCreateInput, ReflectionBadgeUncheckedCreateInput>
  }

  /**
   * ReflectionBadge createMany
   */
  export type ReflectionBadgeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReflectionBadges.
     */
    data: ReflectionBadgeCreateManyInput | ReflectionBadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReflectionBadge createManyAndReturn
   */
  export type ReflectionBadgeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReflectionBadge
     */
    select?: ReflectionBadgeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReflectionBadge
     */
    omit?: ReflectionBadgeOmit<ExtArgs> | null
    /**
     * The data used to create many ReflectionBadges.
     */
    data: ReflectionBadgeCreateManyInput | ReflectionBadgeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionBadgeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReflectionBadge update
   */
  export type ReflectionBadgeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReflectionBadge
     */
    select?: ReflectionBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReflectionBadge
     */
    omit?: ReflectionBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionBadgeInclude<ExtArgs> | null
    /**
     * The data needed to update a ReflectionBadge.
     */
    data: XOR<ReflectionBadgeUpdateInput, ReflectionBadgeUncheckedUpdateInput>
    /**
     * Choose, which ReflectionBadge to update.
     */
    where: ReflectionBadgeWhereUniqueInput
  }

  /**
   * ReflectionBadge updateMany
   */
  export type ReflectionBadgeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReflectionBadges.
     */
    data: XOR<ReflectionBadgeUpdateManyMutationInput, ReflectionBadgeUncheckedUpdateManyInput>
    /**
     * Filter which ReflectionBadges to update
     */
    where?: ReflectionBadgeWhereInput
    /**
     * Limit how many ReflectionBadges to update.
     */
    limit?: number
  }

  /**
   * ReflectionBadge updateManyAndReturn
   */
  export type ReflectionBadgeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReflectionBadge
     */
    select?: ReflectionBadgeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReflectionBadge
     */
    omit?: ReflectionBadgeOmit<ExtArgs> | null
    /**
     * The data used to update ReflectionBadges.
     */
    data: XOR<ReflectionBadgeUpdateManyMutationInput, ReflectionBadgeUncheckedUpdateManyInput>
    /**
     * Filter which ReflectionBadges to update
     */
    where?: ReflectionBadgeWhereInput
    /**
     * Limit how many ReflectionBadges to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionBadgeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReflectionBadge upsert
   */
  export type ReflectionBadgeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReflectionBadge
     */
    select?: ReflectionBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReflectionBadge
     */
    omit?: ReflectionBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionBadgeInclude<ExtArgs> | null
    /**
     * The filter to search for the ReflectionBadge to update in case it exists.
     */
    where: ReflectionBadgeWhereUniqueInput
    /**
     * In case the ReflectionBadge found by the `where` argument doesn't exist, create a new ReflectionBadge with this data.
     */
    create: XOR<ReflectionBadgeCreateInput, ReflectionBadgeUncheckedCreateInput>
    /**
     * In case the ReflectionBadge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReflectionBadgeUpdateInput, ReflectionBadgeUncheckedUpdateInput>
  }

  /**
   * ReflectionBadge delete
   */
  export type ReflectionBadgeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReflectionBadge
     */
    select?: ReflectionBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReflectionBadge
     */
    omit?: ReflectionBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionBadgeInclude<ExtArgs> | null
    /**
     * Filter which ReflectionBadge to delete.
     */
    where: ReflectionBadgeWhereUniqueInput
  }

  /**
   * ReflectionBadge deleteMany
   */
  export type ReflectionBadgeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReflectionBadges to delete
     */
    where?: ReflectionBadgeWhereInput
    /**
     * Limit how many ReflectionBadges to delete.
     */
    limit?: number
  }

  /**
   * ReflectionBadge without action
   */
  export type ReflectionBadgeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReflectionBadge
     */
    select?: ReflectionBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReflectionBadge
     */
    omit?: ReflectionBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionBadgeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AvatarScalarFieldEnum: {
    id: 'id',
    label: 'label',
    imagePath: 'imagePath'
  };

  export type AvatarScalarFieldEnum = (typeof AvatarScalarFieldEnum)[keyof typeof AvatarScalarFieldEnum]


  export const TestNameOptionScalarFieldEnum: {
    id: 'id',
    label: 'label',
    category: 'category',
    isCustom: 'isCustom'
  };

  export type TestNameOptionScalarFieldEnum = (typeof TestNameOptionScalarFieldEnum)[keyof typeof TestNameOptionScalarFieldEnum]


  export const ReasonOptionScalarFieldEnum: {
    id: 'id',
    label: 'label',
    category: 'category',
    isCustom: 'isCustom'
  };

  export type ReasonOptionScalarFieldEnum = (typeof ReasonOptionScalarFieldEnum)[keyof typeof ReasonOptionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    displayName: 'displayName',
    avatarKey: 'avatarKey',
    onboardingCompleted: 'onboardingCompleted',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const GoalScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    testName: 'testName',
    testStartDate: 'testStartDate',
    testEndDate: 'testEndDate',
    totalStudents: 'totalStudents',
    targetRank: 'targetRank',
    reasonType: 'reasonType',
    reasonText: 'reasonText',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GoalScalarFieldEnum = (typeof GoalScalarFieldEnum)[keyof typeof GoalScalarFieldEnum]


  export const TextbookScalarFieldEnum: {
    id: 'id',
    title: 'title',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TextbookScalarFieldEnum = (typeof TextbookScalarFieldEnum)[keyof typeof TextbookScalarFieldEnum]


  export const ChapterScalarFieldEnum: {
    id: 'id',
    textbookId: 'textbookId',
    title: 'title',
    orderIndex: 'orderIndex',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChapterScalarFieldEnum = (typeof ChapterScalarFieldEnum)[keyof typeof ChapterScalarFieldEnum]


  export const SectionScalarFieldEnum: {
    id: 'id',
    chapterId: 'chapterId',
    title: 'title',
    orderIndex: 'orderIndex',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SectionScalarFieldEnum = (typeof SectionScalarFieldEnum)[keyof typeof SectionScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    sectionId: 'sectionId',
    content: 'content',
    difficulty: 'difficulty',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const LearningPlanScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    goalId: 'goalId',
    generatedBy: 'generatedBy',
    maxDays: 'maxDays',
    baseDays: 'baseDays',
    finalStudyDate: 'finalStudyDate',
    reviewDays: 'reviewDays',
    reviewWeekdays: 'reviewWeekdays',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LearningPlanScalarFieldEnum = (typeof LearningPlanScalarFieldEnum)[keyof typeof LearningPlanScalarFieldEnum]


  export const LearningTaskScalarFieldEnum: {
    id: 'id',
    planId: 'planId',
    date: 'date',
    questionId: 'questionId',
    orderInDay: 'orderInDay',
    isReviewDay: 'isReviewDay',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LearningTaskScalarFieldEnum = (typeof LearningTaskScalarFieldEnum)[keyof typeof LearningTaskScalarFieldEnum]


  export const QuestionAttemptLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    questionId: 'questionId',
    date: 'date',
    status: 'status',
    source: 'source',
    updatedAt: 'updatedAt'
  };

  export type QuestionAttemptLogScalarFieldEnum = (typeof QuestionAttemptLogScalarFieldEnum)[keyof typeof QuestionAttemptLogScalarFieldEnum]


  export const PlanRevisionScalarFieldEnum: {
    id: 'id',
    planId: 'planId',
    revisionType: 'revisionType',
    selectedStatuses: 'selectedStatuses',
    revisedAt: 'revisedAt'
  };

  export type PlanRevisionScalarFieldEnum = (typeof PlanRevisionScalarFieldEnum)[keyof typeof PlanRevisionScalarFieldEnum]


  export const DailyReflectionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    date: 'date',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DailyReflectionScalarFieldEnum = (typeof DailyReflectionScalarFieldEnum)[keyof typeof DailyReflectionScalarFieldEnum]


  export const WeeklyReflectionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    weekStart: 'weekStart',
    weekEnd: 'weekEnd',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WeeklyReflectionScalarFieldEnum = (typeof WeeklyReflectionScalarFieldEnum)[keyof typeof WeeklyReflectionScalarFieldEnum]


  export const ValuePromptScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    promptType: 'promptType',
    content: 'content',
    response: 'response',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ValuePromptScalarFieldEnum = (typeof ValuePromptScalarFieldEnum)[keyof typeof ValuePromptScalarFieldEnum]


  export const ReflectionBadgeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    badgeType: 'badgeType',
    awardedAt: 'awardedAt'
  };

  export type ReflectionBadgeScalarFieldEnum = (typeof ReflectionBadgeScalarFieldEnum)[keyof typeof ReflectionBadgeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AvatarWhereInput = {
    AND?: AvatarWhereInput | AvatarWhereInput[]
    OR?: AvatarWhereInput[]
    NOT?: AvatarWhereInput | AvatarWhereInput[]
    id?: StringFilter<"Avatar"> | string
    label?: StringFilter<"Avatar"> | string
    imagePath?: StringFilter<"Avatar"> | string
    users?: UserListRelationFilter
  }

  export type AvatarOrderByWithRelationInput = {
    id?: SortOrder
    label?: SortOrder
    imagePath?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type AvatarWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AvatarWhereInput | AvatarWhereInput[]
    OR?: AvatarWhereInput[]
    NOT?: AvatarWhereInput | AvatarWhereInput[]
    label?: StringFilter<"Avatar"> | string
    imagePath?: StringFilter<"Avatar"> | string
    users?: UserListRelationFilter
  }, "id">

  export type AvatarOrderByWithAggregationInput = {
    id?: SortOrder
    label?: SortOrder
    imagePath?: SortOrder
    _count?: AvatarCountOrderByAggregateInput
    _max?: AvatarMaxOrderByAggregateInput
    _min?: AvatarMinOrderByAggregateInput
  }

  export type AvatarScalarWhereWithAggregatesInput = {
    AND?: AvatarScalarWhereWithAggregatesInput | AvatarScalarWhereWithAggregatesInput[]
    OR?: AvatarScalarWhereWithAggregatesInput[]
    NOT?: AvatarScalarWhereWithAggregatesInput | AvatarScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Avatar"> | string
    label?: StringWithAggregatesFilter<"Avatar"> | string
    imagePath?: StringWithAggregatesFilter<"Avatar"> | string
  }

  export type TestNameOptionWhereInput = {
    AND?: TestNameOptionWhereInput | TestNameOptionWhereInput[]
    OR?: TestNameOptionWhereInput[]
    NOT?: TestNameOptionWhereInput | TestNameOptionWhereInput[]
    id?: StringFilter<"TestNameOption"> | string
    label?: StringFilter<"TestNameOption"> | string
    category?: StringFilter<"TestNameOption"> | string
    isCustom?: BoolFilter<"TestNameOption"> | boolean
  }

  export type TestNameOptionOrderByWithRelationInput = {
    id?: SortOrder
    label?: SortOrder
    category?: SortOrder
    isCustom?: SortOrder
  }

  export type TestNameOptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TestNameOptionWhereInput | TestNameOptionWhereInput[]
    OR?: TestNameOptionWhereInput[]
    NOT?: TestNameOptionWhereInput | TestNameOptionWhereInput[]
    label?: StringFilter<"TestNameOption"> | string
    category?: StringFilter<"TestNameOption"> | string
    isCustom?: BoolFilter<"TestNameOption"> | boolean
  }, "id">

  export type TestNameOptionOrderByWithAggregationInput = {
    id?: SortOrder
    label?: SortOrder
    category?: SortOrder
    isCustom?: SortOrder
    _count?: TestNameOptionCountOrderByAggregateInput
    _max?: TestNameOptionMaxOrderByAggregateInput
    _min?: TestNameOptionMinOrderByAggregateInput
  }

  export type TestNameOptionScalarWhereWithAggregatesInput = {
    AND?: TestNameOptionScalarWhereWithAggregatesInput | TestNameOptionScalarWhereWithAggregatesInput[]
    OR?: TestNameOptionScalarWhereWithAggregatesInput[]
    NOT?: TestNameOptionScalarWhereWithAggregatesInput | TestNameOptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TestNameOption"> | string
    label?: StringWithAggregatesFilter<"TestNameOption"> | string
    category?: StringWithAggregatesFilter<"TestNameOption"> | string
    isCustom?: BoolWithAggregatesFilter<"TestNameOption"> | boolean
  }

  export type ReasonOptionWhereInput = {
    AND?: ReasonOptionWhereInput | ReasonOptionWhereInput[]
    OR?: ReasonOptionWhereInput[]
    NOT?: ReasonOptionWhereInput | ReasonOptionWhereInput[]
    id?: StringFilter<"ReasonOption"> | string
    label?: StringFilter<"ReasonOption"> | string
    category?: StringFilter<"ReasonOption"> | string
    isCustom?: BoolFilter<"ReasonOption"> | boolean
  }

  export type ReasonOptionOrderByWithRelationInput = {
    id?: SortOrder
    label?: SortOrder
    category?: SortOrder
    isCustom?: SortOrder
  }

  export type ReasonOptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReasonOptionWhereInput | ReasonOptionWhereInput[]
    OR?: ReasonOptionWhereInput[]
    NOT?: ReasonOptionWhereInput | ReasonOptionWhereInput[]
    label?: StringFilter<"ReasonOption"> | string
    category?: StringFilter<"ReasonOption"> | string
    isCustom?: BoolFilter<"ReasonOption"> | boolean
  }, "id">

  export type ReasonOptionOrderByWithAggregationInput = {
    id?: SortOrder
    label?: SortOrder
    category?: SortOrder
    isCustom?: SortOrder
    _count?: ReasonOptionCountOrderByAggregateInput
    _max?: ReasonOptionMaxOrderByAggregateInput
    _min?: ReasonOptionMinOrderByAggregateInput
  }

  export type ReasonOptionScalarWhereWithAggregatesInput = {
    AND?: ReasonOptionScalarWhereWithAggregatesInput | ReasonOptionScalarWhereWithAggregatesInput[]
    OR?: ReasonOptionScalarWhereWithAggregatesInput[]
    NOT?: ReasonOptionScalarWhereWithAggregatesInput | ReasonOptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReasonOption"> | string
    label?: StringWithAggregatesFilter<"ReasonOption"> | string
    category?: StringWithAggregatesFilter<"ReasonOption"> | string
    isCustom?: BoolWithAggregatesFilter<"ReasonOption"> | boolean
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    displayName?: StringFilter<"User"> | string
    avatarKey?: StringNullableFilter<"User"> | string | null
    onboardingCompleted?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    avatar?: XOR<AvatarNullableScalarRelationFilter, AvatarWhereInput> | null
    goals?: GoalListRelationFilter
    learningPlans?: LearningPlanListRelationFilter
    attemptLogs?: QuestionAttemptLogListRelationFilter
    dailyReflections?: DailyReflectionListRelationFilter
    weeklyReflections?: WeeklyReflectionListRelationFilter
    valuePrompts?: ValuePromptListRelationFilter
    reflectionBadges?: ReflectionBadgeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    displayName?: SortOrder
    avatarKey?: SortOrderInput | SortOrder
    onboardingCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatar?: AvatarOrderByWithRelationInput
    goals?: GoalOrderByRelationAggregateInput
    learningPlans?: LearningPlanOrderByRelationAggregateInput
    attemptLogs?: QuestionAttemptLogOrderByRelationAggregateInput
    dailyReflections?: DailyReflectionOrderByRelationAggregateInput
    weeklyReflections?: WeeklyReflectionOrderByRelationAggregateInput
    valuePrompts?: ValuePromptOrderByRelationAggregateInput
    reflectionBadges?: ReflectionBadgeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    displayName?: StringFilter<"User"> | string
    avatarKey?: StringNullableFilter<"User"> | string | null
    onboardingCompleted?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    avatar?: XOR<AvatarNullableScalarRelationFilter, AvatarWhereInput> | null
    goals?: GoalListRelationFilter
    learningPlans?: LearningPlanListRelationFilter
    attemptLogs?: QuestionAttemptLogListRelationFilter
    dailyReflections?: DailyReflectionListRelationFilter
    weeklyReflections?: WeeklyReflectionListRelationFilter
    valuePrompts?: ValuePromptListRelationFilter
    reflectionBadges?: ReflectionBadgeListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    displayName?: SortOrder
    avatarKey?: SortOrderInput | SortOrder
    onboardingCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    displayName?: StringWithAggregatesFilter<"User"> | string
    avatarKey?: StringNullableWithAggregatesFilter<"User"> | string | null
    onboardingCompleted?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type GoalWhereInput = {
    AND?: GoalWhereInput | GoalWhereInput[]
    OR?: GoalWhereInput[]
    NOT?: GoalWhereInput | GoalWhereInput[]
    id?: StringFilter<"Goal"> | string
    userId?: StringFilter<"Goal"> | string
    testName?: StringFilter<"Goal"> | string
    testStartDate?: DateTimeFilter<"Goal"> | Date | string
    testEndDate?: DateTimeFilter<"Goal"> | Date | string
    totalStudents?: IntFilter<"Goal"> | number
    targetRank?: IntFilter<"Goal"> | number
    reasonType?: StringFilter<"Goal"> | string
    reasonText?: StringFilter<"Goal"> | string
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    learningPlans?: LearningPlanListRelationFilter
  }

  export type GoalOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    testName?: SortOrder
    testStartDate?: SortOrder
    testEndDate?: SortOrder
    totalStudents?: SortOrder
    targetRank?: SortOrder
    reasonType?: SortOrder
    reasonText?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    learningPlans?: LearningPlanOrderByRelationAggregateInput
  }

  export type GoalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GoalWhereInput | GoalWhereInput[]
    OR?: GoalWhereInput[]
    NOT?: GoalWhereInput | GoalWhereInput[]
    userId?: StringFilter<"Goal"> | string
    testName?: StringFilter<"Goal"> | string
    testStartDate?: DateTimeFilter<"Goal"> | Date | string
    testEndDate?: DateTimeFilter<"Goal"> | Date | string
    totalStudents?: IntFilter<"Goal"> | number
    targetRank?: IntFilter<"Goal"> | number
    reasonType?: StringFilter<"Goal"> | string
    reasonText?: StringFilter<"Goal"> | string
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    learningPlans?: LearningPlanListRelationFilter
  }, "id">

  export type GoalOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    testName?: SortOrder
    testStartDate?: SortOrder
    testEndDate?: SortOrder
    totalStudents?: SortOrder
    targetRank?: SortOrder
    reasonType?: SortOrder
    reasonText?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GoalCountOrderByAggregateInput
    _avg?: GoalAvgOrderByAggregateInput
    _max?: GoalMaxOrderByAggregateInput
    _min?: GoalMinOrderByAggregateInput
    _sum?: GoalSumOrderByAggregateInput
  }

  export type GoalScalarWhereWithAggregatesInput = {
    AND?: GoalScalarWhereWithAggregatesInput | GoalScalarWhereWithAggregatesInput[]
    OR?: GoalScalarWhereWithAggregatesInput[]
    NOT?: GoalScalarWhereWithAggregatesInput | GoalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Goal"> | string
    userId?: StringWithAggregatesFilter<"Goal"> | string
    testName?: StringWithAggregatesFilter<"Goal"> | string
    testStartDate?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
    testEndDate?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
    totalStudents?: IntWithAggregatesFilter<"Goal"> | number
    targetRank?: IntWithAggregatesFilter<"Goal"> | number
    reasonType?: StringWithAggregatesFilter<"Goal"> | string
    reasonText?: StringWithAggregatesFilter<"Goal"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
  }

  export type TextbookWhereInput = {
    AND?: TextbookWhereInput | TextbookWhereInput[]
    OR?: TextbookWhereInput[]
    NOT?: TextbookWhereInput | TextbookWhereInput[]
    id?: StringFilter<"Textbook"> | string
    title?: StringFilter<"Textbook"> | string
    createdAt?: DateTimeFilter<"Textbook"> | Date | string
    updatedAt?: DateTimeFilter<"Textbook"> | Date | string
    chapters?: ChapterListRelationFilter
  }

  export type TextbookOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chapters?: ChapterOrderByRelationAggregateInput
  }

  export type TextbookWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TextbookWhereInput | TextbookWhereInput[]
    OR?: TextbookWhereInput[]
    NOT?: TextbookWhereInput | TextbookWhereInput[]
    title?: StringFilter<"Textbook"> | string
    createdAt?: DateTimeFilter<"Textbook"> | Date | string
    updatedAt?: DateTimeFilter<"Textbook"> | Date | string
    chapters?: ChapterListRelationFilter
  }, "id">

  export type TextbookOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TextbookCountOrderByAggregateInput
    _max?: TextbookMaxOrderByAggregateInput
    _min?: TextbookMinOrderByAggregateInput
  }

  export type TextbookScalarWhereWithAggregatesInput = {
    AND?: TextbookScalarWhereWithAggregatesInput | TextbookScalarWhereWithAggregatesInput[]
    OR?: TextbookScalarWhereWithAggregatesInput[]
    NOT?: TextbookScalarWhereWithAggregatesInput | TextbookScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Textbook"> | string
    title?: StringWithAggregatesFilter<"Textbook"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Textbook"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Textbook"> | Date | string
  }

  export type ChapterWhereInput = {
    AND?: ChapterWhereInput | ChapterWhereInput[]
    OR?: ChapterWhereInput[]
    NOT?: ChapterWhereInput | ChapterWhereInput[]
    id?: StringFilter<"Chapter"> | string
    textbookId?: StringFilter<"Chapter"> | string
    title?: StringFilter<"Chapter"> | string
    orderIndex?: IntFilter<"Chapter"> | number
    createdAt?: DateTimeFilter<"Chapter"> | Date | string
    updatedAt?: DateTimeFilter<"Chapter"> | Date | string
    textbook?: XOR<TextbookScalarRelationFilter, TextbookWhereInput>
    sections?: SectionListRelationFilter
  }

  export type ChapterOrderByWithRelationInput = {
    id?: SortOrder
    textbookId?: SortOrder
    title?: SortOrder
    orderIndex?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    textbook?: TextbookOrderByWithRelationInput
    sections?: SectionOrderByRelationAggregateInput
  }

  export type ChapterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChapterWhereInput | ChapterWhereInput[]
    OR?: ChapterWhereInput[]
    NOT?: ChapterWhereInput | ChapterWhereInput[]
    textbookId?: StringFilter<"Chapter"> | string
    title?: StringFilter<"Chapter"> | string
    orderIndex?: IntFilter<"Chapter"> | number
    createdAt?: DateTimeFilter<"Chapter"> | Date | string
    updatedAt?: DateTimeFilter<"Chapter"> | Date | string
    textbook?: XOR<TextbookScalarRelationFilter, TextbookWhereInput>
    sections?: SectionListRelationFilter
  }, "id">

  export type ChapterOrderByWithAggregationInput = {
    id?: SortOrder
    textbookId?: SortOrder
    title?: SortOrder
    orderIndex?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChapterCountOrderByAggregateInput
    _avg?: ChapterAvgOrderByAggregateInput
    _max?: ChapterMaxOrderByAggregateInput
    _min?: ChapterMinOrderByAggregateInput
    _sum?: ChapterSumOrderByAggregateInput
  }

  export type ChapterScalarWhereWithAggregatesInput = {
    AND?: ChapterScalarWhereWithAggregatesInput | ChapterScalarWhereWithAggregatesInput[]
    OR?: ChapterScalarWhereWithAggregatesInput[]
    NOT?: ChapterScalarWhereWithAggregatesInput | ChapterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Chapter"> | string
    textbookId?: StringWithAggregatesFilter<"Chapter"> | string
    title?: StringWithAggregatesFilter<"Chapter"> | string
    orderIndex?: IntWithAggregatesFilter<"Chapter"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Chapter"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Chapter"> | Date | string
  }

  export type SectionWhereInput = {
    AND?: SectionWhereInput | SectionWhereInput[]
    OR?: SectionWhereInput[]
    NOT?: SectionWhereInput | SectionWhereInput[]
    id?: StringFilter<"Section"> | string
    chapterId?: StringFilter<"Section"> | string
    title?: StringFilter<"Section"> | string
    orderIndex?: IntFilter<"Section"> | number
    createdAt?: DateTimeFilter<"Section"> | Date | string
    updatedAt?: DateTimeFilter<"Section"> | Date | string
    chapter?: XOR<ChapterScalarRelationFilter, ChapterWhereInput>
    questions?: QuestionListRelationFilter
  }

  export type SectionOrderByWithRelationInput = {
    id?: SortOrder
    chapterId?: SortOrder
    title?: SortOrder
    orderIndex?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chapter?: ChapterOrderByWithRelationInput
    questions?: QuestionOrderByRelationAggregateInput
  }

  export type SectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SectionWhereInput | SectionWhereInput[]
    OR?: SectionWhereInput[]
    NOT?: SectionWhereInput | SectionWhereInput[]
    chapterId?: StringFilter<"Section"> | string
    title?: StringFilter<"Section"> | string
    orderIndex?: IntFilter<"Section"> | number
    createdAt?: DateTimeFilter<"Section"> | Date | string
    updatedAt?: DateTimeFilter<"Section"> | Date | string
    chapter?: XOR<ChapterScalarRelationFilter, ChapterWhereInput>
    questions?: QuestionListRelationFilter
  }, "id">

  export type SectionOrderByWithAggregationInput = {
    id?: SortOrder
    chapterId?: SortOrder
    title?: SortOrder
    orderIndex?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SectionCountOrderByAggregateInput
    _avg?: SectionAvgOrderByAggregateInput
    _max?: SectionMaxOrderByAggregateInput
    _min?: SectionMinOrderByAggregateInput
    _sum?: SectionSumOrderByAggregateInput
  }

  export type SectionScalarWhereWithAggregatesInput = {
    AND?: SectionScalarWhereWithAggregatesInput | SectionScalarWhereWithAggregatesInput[]
    OR?: SectionScalarWhereWithAggregatesInput[]
    NOT?: SectionScalarWhereWithAggregatesInput | SectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Section"> | string
    chapterId?: StringWithAggregatesFilter<"Section"> | string
    title?: StringWithAggregatesFilter<"Section"> | string
    orderIndex?: IntWithAggregatesFilter<"Section"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Section"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Section"> | Date | string
  }

  export type QuestionWhereInput = {
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    id?: StringFilter<"Question"> | string
    sectionId?: StringFilter<"Question"> | string
    content?: StringFilter<"Question"> | string
    difficulty?: IntFilter<"Question"> | number
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
    section?: XOR<SectionScalarRelationFilter, SectionWhereInput>
    learningTasks?: LearningTaskListRelationFilter
    attemptLogs?: QuestionAttemptLogListRelationFilter
  }

  export type QuestionOrderByWithRelationInput = {
    id?: SortOrder
    sectionId?: SortOrder
    content?: SortOrder
    difficulty?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    section?: SectionOrderByWithRelationInput
    learningTasks?: LearningTaskOrderByRelationAggregateInput
    attemptLogs?: QuestionAttemptLogOrderByRelationAggregateInput
  }

  export type QuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    sectionId?: StringFilter<"Question"> | string
    content?: StringFilter<"Question"> | string
    difficulty?: IntFilter<"Question"> | number
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
    section?: XOR<SectionScalarRelationFilter, SectionWhereInput>
    learningTasks?: LearningTaskListRelationFilter
    attemptLogs?: QuestionAttemptLogListRelationFilter
  }, "id">

  export type QuestionOrderByWithAggregationInput = {
    id?: SortOrder
    sectionId?: SortOrder
    content?: SortOrder
    difficulty?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _avg?: QuestionAvgOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
    _sum?: QuestionSumOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    OR?: QuestionScalarWhereWithAggregatesInput[]
    NOT?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Question"> | string
    sectionId?: StringWithAggregatesFilter<"Question"> | string
    content?: StringWithAggregatesFilter<"Question"> | string
    difficulty?: IntWithAggregatesFilter<"Question"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Question"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Question"> | Date | string
  }

  export type LearningPlanWhereInput = {
    AND?: LearningPlanWhereInput | LearningPlanWhereInput[]
    OR?: LearningPlanWhereInput[]
    NOT?: LearningPlanWhereInput | LearningPlanWhereInput[]
    id?: StringFilter<"LearningPlan"> | string
    userId?: StringFilter<"LearningPlan"> | string
    goalId?: StringFilter<"LearningPlan"> | string
    generatedBy?: StringFilter<"LearningPlan"> | string
    maxDays?: IntFilter<"LearningPlan"> | number
    baseDays?: IntFilter<"LearningPlan"> | number
    finalStudyDate?: DateTimeFilter<"LearningPlan"> | Date | string
    reviewDays?: IntFilter<"LearningPlan"> | number
    reviewWeekdays?: StringNullableListFilter<"LearningPlan">
    createdAt?: DateTimeFilter<"LearningPlan"> | Date | string
    updatedAt?: DateTimeFilter<"LearningPlan"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    goal?: XOR<GoalScalarRelationFilter, GoalWhereInput>
    learningTasks?: LearningTaskListRelationFilter
    planRevisions?: PlanRevisionListRelationFilter
  }

  export type LearningPlanOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    goalId?: SortOrder
    generatedBy?: SortOrder
    maxDays?: SortOrder
    baseDays?: SortOrder
    finalStudyDate?: SortOrder
    reviewDays?: SortOrder
    reviewWeekdays?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    goal?: GoalOrderByWithRelationInput
    learningTasks?: LearningTaskOrderByRelationAggregateInput
    planRevisions?: PlanRevisionOrderByRelationAggregateInput
  }

  export type LearningPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LearningPlanWhereInput | LearningPlanWhereInput[]
    OR?: LearningPlanWhereInput[]
    NOT?: LearningPlanWhereInput | LearningPlanWhereInput[]
    userId?: StringFilter<"LearningPlan"> | string
    goalId?: StringFilter<"LearningPlan"> | string
    generatedBy?: StringFilter<"LearningPlan"> | string
    maxDays?: IntFilter<"LearningPlan"> | number
    baseDays?: IntFilter<"LearningPlan"> | number
    finalStudyDate?: DateTimeFilter<"LearningPlan"> | Date | string
    reviewDays?: IntFilter<"LearningPlan"> | number
    reviewWeekdays?: StringNullableListFilter<"LearningPlan">
    createdAt?: DateTimeFilter<"LearningPlan"> | Date | string
    updatedAt?: DateTimeFilter<"LearningPlan"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    goal?: XOR<GoalScalarRelationFilter, GoalWhereInput>
    learningTasks?: LearningTaskListRelationFilter
    planRevisions?: PlanRevisionListRelationFilter
  }, "id">

  export type LearningPlanOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    goalId?: SortOrder
    generatedBy?: SortOrder
    maxDays?: SortOrder
    baseDays?: SortOrder
    finalStudyDate?: SortOrder
    reviewDays?: SortOrder
    reviewWeekdays?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LearningPlanCountOrderByAggregateInput
    _avg?: LearningPlanAvgOrderByAggregateInput
    _max?: LearningPlanMaxOrderByAggregateInput
    _min?: LearningPlanMinOrderByAggregateInput
    _sum?: LearningPlanSumOrderByAggregateInput
  }

  export type LearningPlanScalarWhereWithAggregatesInput = {
    AND?: LearningPlanScalarWhereWithAggregatesInput | LearningPlanScalarWhereWithAggregatesInput[]
    OR?: LearningPlanScalarWhereWithAggregatesInput[]
    NOT?: LearningPlanScalarWhereWithAggregatesInput | LearningPlanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LearningPlan"> | string
    userId?: StringWithAggregatesFilter<"LearningPlan"> | string
    goalId?: StringWithAggregatesFilter<"LearningPlan"> | string
    generatedBy?: StringWithAggregatesFilter<"LearningPlan"> | string
    maxDays?: IntWithAggregatesFilter<"LearningPlan"> | number
    baseDays?: IntWithAggregatesFilter<"LearningPlan"> | number
    finalStudyDate?: DateTimeWithAggregatesFilter<"LearningPlan"> | Date | string
    reviewDays?: IntWithAggregatesFilter<"LearningPlan"> | number
    reviewWeekdays?: StringNullableListFilter<"LearningPlan">
    createdAt?: DateTimeWithAggregatesFilter<"LearningPlan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LearningPlan"> | Date | string
  }

  export type LearningTaskWhereInput = {
    AND?: LearningTaskWhereInput | LearningTaskWhereInput[]
    OR?: LearningTaskWhereInput[]
    NOT?: LearningTaskWhereInput | LearningTaskWhereInput[]
    id?: StringFilter<"LearningTask"> | string
    planId?: StringFilter<"LearningTask"> | string
    date?: DateTimeFilter<"LearningTask"> | Date | string
    questionId?: StringFilter<"LearningTask"> | string
    orderInDay?: IntFilter<"LearningTask"> | number
    isReviewDay?: BoolFilter<"LearningTask"> | boolean
    createdAt?: DateTimeFilter<"LearningTask"> | Date | string
    updatedAt?: DateTimeFilter<"LearningTask"> | Date | string
    learningPlan?: XOR<LearningPlanScalarRelationFilter, LearningPlanWhereInput>
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
  }

  export type LearningTaskOrderByWithRelationInput = {
    id?: SortOrder
    planId?: SortOrder
    date?: SortOrder
    questionId?: SortOrder
    orderInDay?: SortOrder
    isReviewDay?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    learningPlan?: LearningPlanOrderByWithRelationInput
    question?: QuestionOrderByWithRelationInput
  }

  export type LearningTaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LearningTaskWhereInput | LearningTaskWhereInput[]
    OR?: LearningTaskWhereInput[]
    NOT?: LearningTaskWhereInput | LearningTaskWhereInput[]
    planId?: StringFilter<"LearningTask"> | string
    date?: DateTimeFilter<"LearningTask"> | Date | string
    questionId?: StringFilter<"LearningTask"> | string
    orderInDay?: IntFilter<"LearningTask"> | number
    isReviewDay?: BoolFilter<"LearningTask"> | boolean
    createdAt?: DateTimeFilter<"LearningTask"> | Date | string
    updatedAt?: DateTimeFilter<"LearningTask"> | Date | string
    learningPlan?: XOR<LearningPlanScalarRelationFilter, LearningPlanWhereInput>
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
  }, "id">

  export type LearningTaskOrderByWithAggregationInput = {
    id?: SortOrder
    planId?: SortOrder
    date?: SortOrder
    questionId?: SortOrder
    orderInDay?: SortOrder
    isReviewDay?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LearningTaskCountOrderByAggregateInput
    _avg?: LearningTaskAvgOrderByAggregateInput
    _max?: LearningTaskMaxOrderByAggregateInput
    _min?: LearningTaskMinOrderByAggregateInput
    _sum?: LearningTaskSumOrderByAggregateInput
  }

  export type LearningTaskScalarWhereWithAggregatesInput = {
    AND?: LearningTaskScalarWhereWithAggregatesInput | LearningTaskScalarWhereWithAggregatesInput[]
    OR?: LearningTaskScalarWhereWithAggregatesInput[]
    NOT?: LearningTaskScalarWhereWithAggregatesInput | LearningTaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LearningTask"> | string
    planId?: StringWithAggregatesFilter<"LearningTask"> | string
    date?: DateTimeWithAggregatesFilter<"LearningTask"> | Date | string
    questionId?: StringWithAggregatesFilter<"LearningTask"> | string
    orderInDay?: IntWithAggregatesFilter<"LearningTask"> | number
    isReviewDay?: BoolWithAggregatesFilter<"LearningTask"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"LearningTask"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LearningTask"> | Date | string
  }

  export type QuestionAttemptLogWhereInput = {
    AND?: QuestionAttemptLogWhereInput | QuestionAttemptLogWhereInput[]
    OR?: QuestionAttemptLogWhereInput[]
    NOT?: QuestionAttemptLogWhereInput | QuestionAttemptLogWhereInput[]
    id?: StringFilter<"QuestionAttemptLog"> | string
    userId?: StringFilter<"QuestionAttemptLog"> | string
    questionId?: StringFilter<"QuestionAttemptLog"> | string
    date?: DateTimeFilter<"QuestionAttemptLog"> | Date | string
    status?: StringFilter<"QuestionAttemptLog"> | string
    source?: StringFilter<"QuestionAttemptLog"> | string
    updatedAt?: DateTimeFilter<"QuestionAttemptLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
  }

  export type QuestionAttemptLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    date?: SortOrder
    status?: SortOrder
    source?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    question?: QuestionOrderByWithRelationInput
  }

  export type QuestionAttemptLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionAttemptLogWhereInput | QuestionAttemptLogWhereInput[]
    OR?: QuestionAttemptLogWhereInput[]
    NOT?: QuestionAttemptLogWhereInput | QuestionAttemptLogWhereInput[]
    userId?: StringFilter<"QuestionAttemptLog"> | string
    questionId?: StringFilter<"QuestionAttemptLog"> | string
    date?: DateTimeFilter<"QuestionAttemptLog"> | Date | string
    status?: StringFilter<"QuestionAttemptLog"> | string
    source?: StringFilter<"QuestionAttemptLog"> | string
    updatedAt?: DateTimeFilter<"QuestionAttemptLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
  }, "id">

  export type QuestionAttemptLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    date?: SortOrder
    status?: SortOrder
    source?: SortOrder
    updatedAt?: SortOrder
    _count?: QuestionAttemptLogCountOrderByAggregateInput
    _max?: QuestionAttemptLogMaxOrderByAggregateInput
    _min?: QuestionAttemptLogMinOrderByAggregateInput
  }

  export type QuestionAttemptLogScalarWhereWithAggregatesInput = {
    AND?: QuestionAttemptLogScalarWhereWithAggregatesInput | QuestionAttemptLogScalarWhereWithAggregatesInput[]
    OR?: QuestionAttemptLogScalarWhereWithAggregatesInput[]
    NOT?: QuestionAttemptLogScalarWhereWithAggregatesInput | QuestionAttemptLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QuestionAttemptLog"> | string
    userId?: StringWithAggregatesFilter<"QuestionAttemptLog"> | string
    questionId?: StringWithAggregatesFilter<"QuestionAttemptLog"> | string
    date?: DateTimeWithAggregatesFilter<"QuestionAttemptLog"> | Date | string
    status?: StringWithAggregatesFilter<"QuestionAttemptLog"> | string
    source?: StringWithAggregatesFilter<"QuestionAttemptLog"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"QuestionAttemptLog"> | Date | string
  }

  export type PlanRevisionWhereInput = {
    AND?: PlanRevisionWhereInput | PlanRevisionWhereInput[]
    OR?: PlanRevisionWhereInput[]
    NOT?: PlanRevisionWhereInput | PlanRevisionWhereInput[]
    id?: StringFilter<"PlanRevision"> | string
    planId?: StringFilter<"PlanRevision"> | string
    revisionType?: StringFilter<"PlanRevision"> | string
    selectedStatuses?: StringNullableListFilter<"PlanRevision">
    revisedAt?: DateTimeFilter<"PlanRevision"> | Date | string
    learningPlan?: XOR<LearningPlanScalarRelationFilter, LearningPlanWhereInput>
  }

  export type PlanRevisionOrderByWithRelationInput = {
    id?: SortOrder
    planId?: SortOrder
    revisionType?: SortOrder
    selectedStatuses?: SortOrder
    revisedAt?: SortOrder
    learningPlan?: LearningPlanOrderByWithRelationInput
  }

  export type PlanRevisionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlanRevisionWhereInput | PlanRevisionWhereInput[]
    OR?: PlanRevisionWhereInput[]
    NOT?: PlanRevisionWhereInput | PlanRevisionWhereInput[]
    planId?: StringFilter<"PlanRevision"> | string
    revisionType?: StringFilter<"PlanRevision"> | string
    selectedStatuses?: StringNullableListFilter<"PlanRevision">
    revisedAt?: DateTimeFilter<"PlanRevision"> | Date | string
    learningPlan?: XOR<LearningPlanScalarRelationFilter, LearningPlanWhereInput>
  }, "id">

  export type PlanRevisionOrderByWithAggregationInput = {
    id?: SortOrder
    planId?: SortOrder
    revisionType?: SortOrder
    selectedStatuses?: SortOrder
    revisedAt?: SortOrder
    _count?: PlanRevisionCountOrderByAggregateInput
    _max?: PlanRevisionMaxOrderByAggregateInput
    _min?: PlanRevisionMinOrderByAggregateInput
  }

  export type PlanRevisionScalarWhereWithAggregatesInput = {
    AND?: PlanRevisionScalarWhereWithAggregatesInput | PlanRevisionScalarWhereWithAggregatesInput[]
    OR?: PlanRevisionScalarWhereWithAggregatesInput[]
    NOT?: PlanRevisionScalarWhereWithAggregatesInput | PlanRevisionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlanRevision"> | string
    planId?: StringWithAggregatesFilter<"PlanRevision"> | string
    revisionType?: StringWithAggregatesFilter<"PlanRevision"> | string
    selectedStatuses?: StringNullableListFilter<"PlanRevision">
    revisedAt?: DateTimeWithAggregatesFilter<"PlanRevision"> | Date | string
  }

  export type DailyReflectionWhereInput = {
    AND?: DailyReflectionWhereInput | DailyReflectionWhereInput[]
    OR?: DailyReflectionWhereInput[]
    NOT?: DailyReflectionWhereInput | DailyReflectionWhereInput[]
    id?: StringFilter<"DailyReflection"> | string
    userId?: StringFilter<"DailyReflection"> | string
    date?: DateTimeFilter<"DailyReflection"> | Date | string
    content?: StringFilter<"DailyReflection"> | string
    createdAt?: DateTimeFilter<"DailyReflection"> | Date | string
    updatedAt?: DateTimeFilter<"DailyReflection"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DailyReflectionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type DailyReflectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DailyReflectionWhereInput | DailyReflectionWhereInput[]
    OR?: DailyReflectionWhereInput[]
    NOT?: DailyReflectionWhereInput | DailyReflectionWhereInput[]
    userId?: StringFilter<"DailyReflection"> | string
    date?: DateTimeFilter<"DailyReflection"> | Date | string
    content?: StringFilter<"DailyReflection"> | string
    createdAt?: DateTimeFilter<"DailyReflection"> | Date | string
    updatedAt?: DateTimeFilter<"DailyReflection"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type DailyReflectionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DailyReflectionCountOrderByAggregateInput
    _max?: DailyReflectionMaxOrderByAggregateInput
    _min?: DailyReflectionMinOrderByAggregateInput
  }

  export type DailyReflectionScalarWhereWithAggregatesInput = {
    AND?: DailyReflectionScalarWhereWithAggregatesInput | DailyReflectionScalarWhereWithAggregatesInput[]
    OR?: DailyReflectionScalarWhereWithAggregatesInput[]
    NOT?: DailyReflectionScalarWhereWithAggregatesInput | DailyReflectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DailyReflection"> | string
    userId?: StringWithAggregatesFilter<"DailyReflection"> | string
    date?: DateTimeWithAggregatesFilter<"DailyReflection"> | Date | string
    content?: StringWithAggregatesFilter<"DailyReflection"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DailyReflection"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DailyReflection"> | Date | string
  }

  export type WeeklyReflectionWhereInput = {
    AND?: WeeklyReflectionWhereInput | WeeklyReflectionWhereInput[]
    OR?: WeeklyReflectionWhereInput[]
    NOT?: WeeklyReflectionWhereInput | WeeklyReflectionWhereInput[]
    id?: StringFilter<"WeeklyReflection"> | string
    userId?: StringFilter<"WeeklyReflection"> | string
    weekStart?: DateTimeFilter<"WeeklyReflection"> | Date | string
    weekEnd?: DateTimeFilter<"WeeklyReflection"> | Date | string
    content?: StringFilter<"WeeklyReflection"> | string
    createdAt?: DateTimeFilter<"WeeklyReflection"> | Date | string
    updatedAt?: DateTimeFilter<"WeeklyReflection"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type WeeklyReflectionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    weekStart?: SortOrder
    weekEnd?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type WeeklyReflectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WeeklyReflectionWhereInput | WeeklyReflectionWhereInput[]
    OR?: WeeklyReflectionWhereInput[]
    NOT?: WeeklyReflectionWhereInput | WeeklyReflectionWhereInput[]
    userId?: StringFilter<"WeeklyReflection"> | string
    weekStart?: DateTimeFilter<"WeeklyReflection"> | Date | string
    weekEnd?: DateTimeFilter<"WeeklyReflection"> | Date | string
    content?: StringFilter<"WeeklyReflection"> | string
    createdAt?: DateTimeFilter<"WeeklyReflection"> | Date | string
    updatedAt?: DateTimeFilter<"WeeklyReflection"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type WeeklyReflectionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    weekStart?: SortOrder
    weekEnd?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WeeklyReflectionCountOrderByAggregateInput
    _max?: WeeklyReflectionMaxOrderByAggregateInput
    _min?: WeeklyReflectionMinOrderByAggregateInput
  }

  export type WeeklyReflectionScalarWhereWithAggregatesInput = {
    AND?: WeeklyReflectionScalarWhereWithAggregatesInput | WeeklyReflectionScalarWhereWithAggregatesInput[]
    OR?: WeeklyReflectionScalarWhereWithAggregatesInput[]
    NOT?: WeeklyReflectionScalarWhereWithAggregatesInput | WeeklyReflectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WeeklyReflection"> | string
    userId?: StringWithAggregatesFilter<"WeeklyReflection"> | string
    weekStart?: DateTimeWithAggregatesFilter<"WeeklyReflection"> | Date | string
    weekEnd?: DateTimeWithAggregatesFilter<"WeeklyReflection"> | Date | string
    content?: StringWithAggregatesFilter<"WeeklyReflection"> | string
    createdAt?: DateTimeWithAggregatesFilter<"WeeklyReflection"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WeeklyReflection"> | Date | string
  }

  export type ValuePromptWhereInput = {
    AND?: ValuePromptWhereInput | ValuePromptWhereInput[]
    OR?: ValuePromptWhereInput[]
    NOT?: ValuePromptWhereInput | ValuePromptWhereInput[]
    id?: StringFilter<"ValuePrompt"> | string
    userId?: StringFilter<"ValuePrompt"> | string
    promptType?: StringFilter<"ValuePrompt"> | string
    content?: StringFilter<"ValuePrompt"> | string
    response?: StringNullableFilter<"ValuePrompt"> | string | null
    createdAt?: DateTimeFilter<"ValuePrompt"> | Date | string
    updatedAt?: DateTimeFilter<"ValuePrompt"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ValuePromptOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    promptType?: SortOrder
    content?: SortOrder
    response?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ValuePromptWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ValuePromptWhereInput | ValuePromptWhereInput[]
    OR?: ValuePromptWhereInput[]
    NOT?: ValuePromptWhereInput | ValuePromptWhereInput[]
    userId?: StringFilter<"ValuePrompt"> | string
    promptType?: StringFilter<"ValuePrompt"> | string
    content?: StringFilter<"ValuePrompt"> | string
    response?: StringNullableFilter<"ValuePrompt"> | string | null
    createdAt?: DateTimeFilter<"ValuePrompt"> | Date | string
    updatedAt?: DateTimeFilter<"ValuePrompt"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ValuePromptOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    promptType?: SortOrder
    content?: SortOrder
    response?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ValuePromptCountOrderByAggregateInput
    _max?: ValuePromptMaxOrderByAggregateInput
    _min?: ValuePromptMinOrderByAggregateInput
  }

  export type ValuePromptScalarWhereWithAggregatesInput = {
    AND?: ValuePromptScalarWhereWithAggregatesInput | ValuePromptScalarWhereWithAggregatesInput[]
    OR?: ValuePromptScalarWhereWithAggregatesInput[]
    NOT?: ValuePromptScalarWhereWithAggregatesInput | ValuePromptScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ValuePrompt"> | string
    userId?: StringWithAggregatesFilter<"ValuePrompt"> | string
    promptType?: StringWithAggregatesFilter<"ValuePrompt"> | string
    content?: StringWithAggregatesFilter<"ValuePrompt"> | string
    response?: StringNullableWithAggregatesFilter<"ValuePrompt"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ValuePrompt"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ValuePrompt"> | Date | string
  }

  export type ReflectionBadgeWhereInput = {
    AND?: ReflectionBadgeWhereInput | ReflectionBadgeWhereInput[]
    OR?: ReflectionBadgeWhereInput[]
    NOT?: ReflectionBadgeWhereInput | ReflectionBadgeWhereInput[]
    id?: StringFilter<"ReflectionBadge"> | string
    userId?: StringFilter<"ReflectionBadge"> | string
    badgeType?: StringFilter<"ReflectionBadge"> | string
    awardedAt?: DateTimeFilter<"ReflectionBadge"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ReflectionBadgeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeType?: SortOrder
    awardedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ReflectionBadgeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReflectionBadgeWhereInput | ReflectionBadgeWhereInput[]
    OR?: ReflectionBadgeWhereInput[]
    NOT?: ReflectionBadgeWhereInput | ReflectionBadgeWhereInput[]
    userId?: StringFilter<"ReflectionBadge"> | string
    badgeType?: StringFilter<"ReflectionBadge"> | string
    awardedAt?: DateTimeFilter<"ReflectionBadge"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ReflectionBadgeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeType?: SortOrder
    awardedAt?: SortOrder
    _count?: ReflectionBadgeCountOrderByAggregateInput
    _max?: ReflectionBadgeMaxOrderByAggregateInput
    _min?: ReflectionBadgeMinOrderByAggregateInput
  }

  export type ReflectionBadgeScalarWhereWithAggregatesInput = {
    AND?: ReflectionBadgeScalarWhereWithAggregatesInput | ReflectionBadgeScalarWhereWithAggregatesInput[]
    OR?: ReflectionBadgeScalarWhereWithAggregatesInput[]
    NOT?: ReflectionBadgeScalarWhereWithAggregatesInput | ReflectionBadgeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReflectionBadge"> | string
    userId?: StringWithAggregatesFilter<"ReflectionBadge"> | string
    badgeType?: StringWithAggregatesFilter<"ReflectionBadge"> | string
    awardedAt?: DateTimeWithAggregatesFilter<"ReflectionBadge"> | Date | string
  }

  export type AvatarCreateInput = {
    id: string
    label: string
    imagePath: string
    users?: UserCreateNestedManyWithoutAvatarInput
  }

  export type AvatarUncheckedCreateInput = {
    id: string
    label: string
    imagePath: string
    users?: UserUncheckedCreateNestedManyWithoutAvatarInput
  }

  export type AvatarUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutAvatarNestedInput
  }

  export type AvatarUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutAvatarNestedInput
  }

  export type AvatarCreateManyInput = {
    id: string
    label: string
    imagePath: string
  }

  export type AvatarUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
  }

  export type AvatarUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
  }

  export type TestNameOptionCreateInput = {
    id?: string
    label: string
    category: string
    isCustom: boolean
  }

  export type TestNameOptionUncheckedCreateInput = {
    id?: string
    label: string
    category: string
    isCustom: boolean
  }

  export type TestNameOptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isCustom?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TestNameOptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isCustom?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TestNameOptionCreateManyInput = {
    id?: string
    label: string
    category: string
    isCustom: boolean
  }

  export type TestNameOptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isCustom?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TestNameOptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isCustom?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReasonOptionCreateInput = {
    id?: string
    label: string
    category: string
    isCustom: boolean
  }

  export type ReasonOptionUncheckedCreateInput = {
    id?: string
    label: string
    category: string
    isCustom: boolean
  }

  export type ReasonOptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isCustom?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReasonOptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isCustom?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReasonOptionCreateManyInput = {
    id?: string
    label: string
    category: string
    isCustom: boolean
  }

  export type ReasonOptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isCustom?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReasonOptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isCustom?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserCreateInput = {
    id?: string
    email: string
    displayName: string
    onboardingCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: AvatarCreateNestedOneWithoutUsersInput
    goals?: GoalCreateNestedManyWithoutUserInput
    learningPlans?: LearningPlanCreateNestedManyWithoutUserInput
    attemptLogs?: QuestionAttemptLogCreateNestedManyWithoutUserInput
    dailyReflections?: DailyReflectionCreateNestedManyWithoutUserInput
    weeklyReflections?: WeeklyReflectionCreateNestedManyWithoutUserInput
    valuePrompts?: ValuePromptCreateNestedManyWithoutUserInput
    reflectionBadges?: ReflectionBadgeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    displayName: string
    avatarKey?: string | null
    onboardingCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    learningPlans?: LearningPlanUncheckedCreateNestedManyWithoutUserInput
    attemptLogs?: QuestionAttemptLogUncheckedCreateNestedManyWithoutUserInput
    dailyReflections?: DailyReflectionUncheckedCreateNestedManyWithoutUserInput
    weeklyReflections?: WeeklyReflectionUncheckedCreateNestedManyWithoutUserInput
    valuePrompts?: ValuePromptUncheckedCreateNestedManyWithoutUserInput
    reflectionBadges?: ReflectionBadgeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: AvatarUpdateOneWithoutUsersNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    learningPlans?: LearningPlanUpdateManyWithoutUserNestedInput
    attemptLogs?: QuestionAttemptLogUpdateManyWithoutUserNestedInput
    dailyReflections?: DailyReflectionUpdateManyWithoutUserNestedInput
    weeklyReflections?: WeeklyReflectionUpdateManyWithoutUserNestedInput
    valuePrompts?: ValuePromptUpdateManyWithoutUserNestedInput
    reflectionBadges?: ReflectionBadgeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    avatarKey?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    learningPlans?: LearningPlanUncheckedUpdateManyWithoutUserNestedInput
    attemptLogs?: QuestionAttemptLogUncheckedUpdateManyWithoutUserNestedInput
    dailyReflections?: DailyReflectionUncheckedUpdateManyWithoutUserNestedInput
    weeklyReflections?: WeeklyReflectionUncheckedUpdateManyWithoutUserNestedInput
    valuePrompts?: ValuePromptUncheckedUpdateManyWithoutUserNestedInput
    reflectionBadges?: ReflectionBadgeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    displayName: string
    avatarKey?: string | null
    onboardingCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    avatarKey?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalCreateInput = {
    id?: string
    testName: string
    testStartDate: Date | string
    testEndDate: Date | string
    totalStudents: number
    targetRank: number
    reasonType: string
    reasonText: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutGoalsInput
    learningPlans?: LearningPlanCreateNestedManyWithoutGoalInput
  }

  export type GoalUncheckedCreateInput = {
    id?: string
    userId: string
    testName: string
    testStartDate: Date | string
    testEndDate: Date | string
    totalStudents: number
    targetRank: number
    reasonType: string
    reasonText: string
    createdAt?: Date | string
    updatedAt?: Date | string
    learningPlans?: LearningPlanUncheckedCreateNestedManyWithoutGoalInput
  }

  export type GoalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    testName?: StringFieldUpdateOperationsInput | string
    testStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    testEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalStudents?: IntFieldUpdateOperationsInput | number
    targetRank?: IntFieldUpdateOperationsInput | number
    reasonType?: StringFieldUpdateOperationsInput | string
    reasonText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGoalsNestedInput
    learningPlans?: LearningPlanUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    testName?: StringFieldUpdateOperationsInput | string
    testStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    testEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalStudents?: IntFieldUpdateOperationsInput | number
    targetRank?: IntFieldUpdateOperationsInput | number
    reasonType?: StringFieldUpdateOperationsInput | string
    reasonText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    learningPlans?: LearningPlanUncheckedUpdateManyWithoutGoalNestedInput
  }

  export type GoalCreateManyInput = {
    id?: string
    userId: string
    testName: string
    testStartDate: Date | string
    testEndDate: Date | string
    totalStudents: number
    targetRank: number
    reasonType: string
    reasonText: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GoalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    testName?: StringFieldUpdateOperationsInput | string
    testStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    testEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalStudents?: IntFieldUpdateOperationsInput | number
    targetRank?: IntFieldUpdateOperationsInput | number
    reasonType?: StringFieldUpdateOperationsInput | string
    reasonText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    testName?: StringFieldUpdateOperationsInput | string
    testStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    testEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalStudents?: IntFieldUpdateOperationsInput | number
    targetRank?: IntFieldUpdateOperationsInput | number
    reasonType?: StringFieldUpdateOperationsInput | string
    reasonText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TextbookCreateInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chapters?: ChapterCreateNestedManyWithoutTextbookInput
  }

  export type TextbookUncheckedCreateInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chapters?: ChapterUncheckedCreateNestedManyWithoutTextbookInput
  }

  export type TextbookUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chapters?: ChapterUpdateManyWithoutTextbookNestedInput
  }

  export type TextbookUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chapters?: ChapterUncheckedUpdateManyWithoutTextbookNestedInput
  }

  export type TextbookCreateManyInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TextbookUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TextbookUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChapterCreateInput = {
    id?: string
    title: string
    orderIndex: number
    createdAt?: Date | string
    updatedAt?: Date | string
    textbook: TextbookCreateNestedOneWithoutChaptersInput
    sections?: SectionCreateNestedManyWithoutChapterInput
  }

  export type ChapterUncheckedCreateInput = {
    id?: string
    textbookId: string
    title: string
    orderIndex: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: SectionUncheckedCreateNestedManyWithoutChapterInput
  }

  export type ChapterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    textbook?: TextbookUpdateOneRequiredWithoutChaptersNestedInput
    sections?: SectionUpdateManyWithoutChapterNestedInput
  }

  export type ChapterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    textbookId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: SectionUncheckedUpdateManyWithoutChapterNestedInput
  }

  export type ChapterCreateManyInput = {
    id?: string
    textbookId: string
    title: string
    orderIndex: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChapterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChapterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    textbookId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionCreateInput = {
    id?: string
    title: string
    orderIndex: number
    createdAt?: Date | string
    updatedAt?: Date | string
    chapter: ChapterCreateNestedOneWithoutSectionsInput
    questions?: QuestionCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateInput = {
    id?: string
    chapterId: string
    title: string
    orderIndex: number
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chapter?: ChapterUpdateOneRequiredWithoutSectionsNestedInput
    questions?: QuestionUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    chapterId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type SectionCreateManyInput = {
    id?: string
    chapterId: string
    title: string
    orderIndex: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    chapterId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionCreateInput = {
    id?: string
    content: string
    difficulty: number
    createdAt?: Date | string
    updatedAt?: Date | string
    section: SectionCreateNestedOneWithoutQuestionsInput
    learningTasks?: LearningTaskCreateNestedManyWithoutQuestionInput
    attemptLogs?: QuestionAttemptLogCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateInput = {
    id?: string
    sectionId: string
    content: string
    difficulty: number
    createdAt?: Date | string
    updatedAt?: Date | string
    learningTasks?: LearningTaskUncheckedCreateNestedManyWithoutQuestionInput
    attemptLogs?: QuestionAttemptLogUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    difficulty?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    section?: SectionUpdateOneRequiredWithoutQuestionsNestedInput
    learningTasks?: LearningTaskUpdateManyWithoutQuestionNestedInput
    attemptLogs?: QuestionAttemptLogUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sectionId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    difficulty?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    learningTasks?: LearningTaskUncheckedUpdateManyWithoutQuestionNestedInput
    attemptLogs?: QuestionAttemptLogUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionCreateManyInput = {
    id?: string
    sectionId: string
    content: string
    difficulty: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    difficulty?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sectionId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    difficulty?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningPlanCreateInput = {
    id?: string
    generatedBy: string
    maxDays: number
    baseDays: number
    finalStudyDate: Date | string
    reviewDays: number
    reviewWeekdays?: LearningPlanCreatereviewWeekdaysInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutLearningPlansInput
    goal: GoalCreateNestedOneWithoutLearningPlansInput
    learningTasks?: LearningTaskCreateNestedManyWithoutLearningPlanInput
    planRevisions?: PlanRevisionCreateNestedManyWithoutLearningPlanInput
  }

  export type LearningPlanUncheckedCreateInput = {
    id?: string
    userId: string
    goalId: string
    generatedBy: string
    maxDays: number
    baseDays: number
    finalStudyDate: Date | string
    reviewDays: number
    reviewWeekdays?: LearningPlanCreatereviewWeekdaysInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    learningTasks?: LearningTaskUncheckedCreateNestedManyWithoutLearningPlanInput
    planRevisions?: PlanRevisionUncheckedCreateNestedManyWithoutLearningPlanInput
  }

  export type LearningPlanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    generatedBy?: StringFieldUpdateOperationsInput | string
    maxDays?: IntFieldUpdateOperationsInput | number
    baseDays?: IntFieldUpdateOperationsInput | number
    finalStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDays?: IntFieldUpdateOperationsInput | number
    reviewWeekdays?: LearningPlanUpdatereviewWeekdaysInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLearningPlansNestedInput
    goal?: GoalUpdateOneRequiredWithoutLearningPlansNestedInput
    learningTasks?: LearningTaskUpdateManyWithoutLearningPlanNestedInput
    planRevisions?: PlanRevisionUpdateManyWithoutLearningPlanNestedInput
  }

  export type LearningPlanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    generatedBy?: StringFieldUpdateOperationsInput | string
    maxDays?: IntFieldUpdateOperationsInput | number
    baseDays?: IntFieldUpdateOperationsInput | number
    finalStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDays?: IntFieldUpdateOperationsInput | number
    reviewWeekdays?: LearningPlanUpdatereviewWeekdaysInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    learningTasks?: LearningTaskUncheckedUpdateManyWithoutLearningPlanNestedInput
    planRevisions?: PlanRevisionUncheckedUpdateManyWithoutLearningPlanNestedInput
  }

  export type LearningPlanCreateManyInput = {
    id?: string
    userId: string
    goalId: string
    generatedBy: string
    maxDays: number
    baseDays: number
    finalStudyDate: Date | string
    reviewDays: number
    reviewWeekdays?: LearningPlanCreatereviewWeekdaysInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LearningPlanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    generatedBy?: StringFieldUpdateOperationsInput | string
    maxDays?: IntFieldUpdateOperationsInput | number
    baseDays?: IntFieldUpdateOperationsInput | number
    finalStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDays?: IntFieldUpdateOperationsInput | number
    reviewWeekdays?: LearningPlanUpdatereviewWeekdaysInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningPlanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    generatedBy?: StringFieldUpdateOperationsInput | string
    maxDays?: IntFieldUpdateOperationsInput | number
    baseDays?: IntFieldUpdateOperationsInput | number
    finalStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDays?: IntFieldUpdateOperationsInput | number
    reviewWeekdays?: LearningPlanUpdatereviewWeekdaysInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningTaskCreateInput = {
    id?: string
    date: Date | string
    orderInDay: number
    isReviewDay: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    learningPlan: LearningPlanCreateNestedOneWithoutLearningTasksInput
    question: QuestionCreateNestedOneWithoutLearningTasksInput
  }

  export type LearningTaskUncheckedCreateInput = {
    id?: string
    planId: string
    date: Date | string
    questionId: string
    orderInDay: number
    isReviewDay: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LearningTaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    orderInDay?: IntFieldUpdateOperationsInput | number
    isReviewDay?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    learningPlan?: LearningPlanUpdateOneRequiredWithoutLearningTasksNestedInput
    question?: QuestionUpdateOneRequiredWithoutLearningTasksNestedInput
  }

  export type LearningTaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    questionId?: StringFieldUpdateOperationsInput | string
    orderInDay?: IntFieldUpdateOperationsInput | number
    isReviewDay?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningTaskCreateManyInput = {
    id?: string
    planId: string
    date: Date | string
    questionId: string
    orderInDay: number
    isReviewDay: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LearningTaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    orderInDay?: IntFieldUpdateOperationsInput | number
    isReviewDay?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningTaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    questionId?: StringFieldUpdateOperationsInput | string
    orderInDay?: IntFieldUpdateOperationsInput | number
    isReviewDay?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionAttemptLogCreateInput = {
    id?: string
    date: Date | string
    status: string
    source: string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAttemptLogsInput
    question: QuestionCreateNestedOneWithoutAttemptLogsInput
  }

  export type QuestionAttemptLogUncheckedCreateInput = {
    id?: string
    userId: string
    questionId: string
    date: Date | string
    status: string
    source: string
    updatedAt?: Date | string
  }

  export type QuestionAttemptLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAttemptLogsNestedInput
    question?: QuestionUpdateOneRequiredWithoutAttemptLogsNestedInput
  }

  export type QuestionAttemptLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionAttemptLogCreateManyInput = {
    id?: string
    userId: string
    questionId: string
    date: Date | string
    status: string
    source: string
    updatedAt?: Date | string
  }

  export type QuestionAttemptLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionAttemptLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanRevisionCreateInput = {
    id?: string
    revisionType: string
    selectedStatuses?: PlanRevisionCreateselectedStatusesInput | string[]
    revisedAt?: Date | string
    learningPlan: LearningPlanCreateNestedOneWithoutPlanRevisionsInput
  }

  export type PlanRevisionUncheckedCreateInput = {
    id?: string
    planId: string
    revisionType: string
    selectedStatuses?: PlanRevisionCreateselectedStatusesInput | string[]
    revisedAt?: Date | string
  }

  export type PlanRevisionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    revisionType?: StringFieldUpdateOperationsInput | string
    selectedStatuses?: PlanRevisionUpdateselectedStatusesInput | string[]
    revisedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    learningPlan?: LearningPlanUpdateOneRequiredWithoutPlanRevisionsNestedInput
  }

  export type PlanRevisionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    revisionType?: StringFieldUpdateOperationsInput | string
    selectedStatuses?: PlanRevisionUpdateselectedStatusesInput | string[]
    revisedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanRevisionCreateManyInput = {
    id?: string
    planId: string
    revisionType: string
    selectedStatuses?: PlanRevisionCreateselectedStatusesInput | string[]
    revisedAt?: Date | string
  }

  export type PlanRevisionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    revisionType?: StringFieldUpdateOperationsInput | string
    selectedStatuses?: PlanRevisionUpdateselectedStatusesInput | string[]
    revisedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanRevisionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    revisionType?: StringFieldUpdateOperationsInput | string
    selectedStatuses?: PlanRevisionUpdateselectedStatusesInput | string[]
    revisedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyReflectionCreateInput = {
    id?: string
    date: Date | string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDailyReflectionsInput
  }

  export type DailyReflectionUncheckedCreateInput = {
    id?: string
    userId: string
    date: Date | string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailyReflectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDailyReflectionsNestedInput
  }

  export type DailyReflectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyReflectionCreateManyInput = {
    id?: string
    userId: string
    date: Date | string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailyReflectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyReflectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeeklyReflectionCreateInput = {
    id?: string
    weekStart: Date | string
    weekEnd: Date | string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWeeklyReflectionsInput
  }

  export type WeeklyReflectionUncheckedCreateInput = {
    id?: string
    userId: string
    weekStart: Date | string
    weekEnd: Date | string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WeeklyReflectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekStart?: DateTimeFieldUpdateOperationsInput | Date | string
    weekEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWeeklyReflectionsNestedInput
  }

  export type WeeklyReflectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    weekStart?: DateTimeFieldUpdateOperationsInput | Date | string
    weekEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeeklyReflectionCreateManyInput = {
    id?: string
    userId: string
    weekStart: Date | string
    weekEnd: Date | string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WeeklyReflectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekStart?: DateTimeFieldUpdateOperationsInput | Date | string
    weekEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeeklyReflectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    weekStart?: DateTimeFieldUpdateOperationsInput | Date | string
    weekEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValuePromptCreateInput = {
    id?: string
    promptType: string
    content: string
    response?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutValuePromptsInput
  }

  export type ValuePromptUncheckedCreateInput = {
    id?: string
    userId: string
    promptType: string
    content: string
    response?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValuePromptUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    promptType?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutValuePromptsNestedInput
  }

  export type ValuePromptUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    promptType?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValuePromptCreateManyInput = {
    id?: string
    userId: string
    promptType: string
    content: string
    response?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValuePromptUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    promptType?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValuePromptUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    promptType?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReflectionBadgeCreateInput = {
    id?: string
    badgeType: string
    awardedAt?: Date | string
    user: UserCreateNestedOneWithoutReflectionBadgesInput
  }

  export type ReflectionBadgeUncheckedCreateInput = {
    id?: string
    userId: string
    badgeType: string
    awardedAt?: Date | string
  }

  export type ReflectionBadgeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    badgeType?: StringFieldUpdateOperationsInput | string
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReflectionBadgesNestedInput
  }

  export type ReflectionBadgeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    badgeType?: StringFieldUpdateOperationsInput | string
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReflectionBadgeCreateManyInput = {
    id?: string
    userId: string
    badgeType: string
    awardedAt?: Date | string
  }

  export type ReflectionBadgeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    badgeType?: StringFieldUpdateOperationsInput | string
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReflectionBadgeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    badgeType?: StringFieldUpdateOperationsInput | string
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AvatarCountOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    imagePath?: SortOrder
  }

  export type AvatarMaxOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    imagePath?: SortOrder
  }

  export type AvatarMinOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    imagePath?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type TestNameOptionCountOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    category?: SortOrder
    isCustom?: SortOrder
  }

  export type TestNameOptionMaxOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    category?: SortOrder
    isCustom?: SortOrder
  }

  export type TestNameOptionMinOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    category?: SortOrder
    isCustom?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ReasonOptionCountOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    category?: SortOrder
    isCustom?: SortOrder
  }

  export type ReasonOptionMaxOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    category?: SortOrder
    isCustom?: SortOrder
  }

  export type ReasonOptionMinOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    category?: SortOrder
    isCustom?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AvatarNullableScalarRelationFilter = {
    is?: AvatarWhereInput | null
    isNot?: AvatarWhereInput | null
  }

  export type GoalListRelationFilter = {
    every?: GoalWhereInput
    some?: GoalWhereInput
    none?: GoalWhereInput
  }

  export type LearningPlanListRelationFilter = {
    every?: LearningPlanWhereInput
    some?: LearningPlanWhereInput
    none?: LearningPlanWhereInput
  }

  export type QuestionAttemptLogListRelationFilter = {
    every?: QuestionAttemptLogWhereInput
    some?: QuestionAttemptLogWhereInput
    none?: QuestionAttemptLogWhereInput
  }

  export type DailyReflectionListRelationFilter = {
    every?: DailyReflectionWhereInput
    some?: DailyReflectionWhereInput
    none?: DailyReflectionWhereInput
  }

  export type WeeklyReflectionListRelationFilter = {
    every?: WeeklyReflectionWhereInput
    some?: WeeklyReflectionWhereInput
    none?: WeeklyReflectionWhereInput
  }

  export type ValuePromptListRelationFilter = {
    every?: ValuePromptWhereInput
    some?: ValuePromptWhereInput
    none?: ValuePromptWhereInput
  }

  export type ReflectionBadgeListRelationFilter = {
    every?: ReflectionBadgeWhereInput
    some?: ReflectionBadgeWhereInput
    none?: ReflectionBadgeWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type GoalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LearningPlanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionAttemptLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DailyReflectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WeeklyReflectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ValuePromptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReflectionBadgeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    displayName?: SortOrder
    avatarKey?: SortOrder
    onboardingCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    displayName?: SortOrder
    avatarKey?: SortOrder
    onboardingCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    displayName?: SortOrder
    avatarKey?: SortOrder
    onboardingCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type GoalCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    testName?: SortOrder
    testStartDate?: SortOrder
    testEndDate?: SortOrder
    totalStudents?: SortOrder
    targetRank?: SortOrder
    reasonType?: SortOrder
    reasonText?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GoalAvgOrderByAggregateInput = {
    totalStudents?: SortOrder
    targetRank?: SortOrder
  }

  export type GoalMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    testName?: SortOrder
    testStartDate?: SortOrder
    testEndDate?: SortOrder
    totalStudents?: SortOrder
    targetRank?: SortOrder
    reasonType?: SortOrder
    reasonText?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GoalMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    testName?: SortOrder
    testStartDate?: SortOrder
    testEndDate?: SortOrder
    totalStudents?: SortOrder
    targetRank?: SortOrder
    reasonType?: SortOrder
    reasonText?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GoalSumOrderByAggregateInput = {
    totalStudents?: SortOrder
    targetRank?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ChapterListRelationFilter = {
    every?: ChapterWhereInput
    some?: ChapterWhereInput
    none?: ChapterWhereInput
  }

  export type ChapterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TextbookCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TextbookMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TextbookMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TextbookScalarRelationFilter = {
    is?: TextbookWhereInput
    isNot?: TextbookWhereInput
  }

  export type SectionListRelationFilter = {
    every?: SectionWhereInput
    some?: SectionWhereInput
    none?: SectionWhereInput
  }

  export type SectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChapterCountOrderByAggregateInput = {
    id?: SortOrder
    textbookId?: SortOrder
    title?: SortOrder
    orderIndex?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChapterAvgOrderByAggregateInput = {
    orderIndex?: SortOrder
  }

  export type ChapterMaxOrderByAggregateInput = {
    id?: SortOrder
    textbookId?: SortOrder
    title?: SortOrder
    orderIndex?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChapterMinOrderByAggregateInput = {
    id?: SortOrder
    textbookId?: SortOrder
    title?: SortOrder
    orderIndex?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChapterSumOrderByAggregateInput = {
    orderIndex?: SortOrder
  }

  export type ChapterScalarRelationFilter = {
    is?: ChapterWhereInput
    isNot?: ChapterWhereInput
  }

  export type QuestionListRelationFilter = {
    every?: QuestionWhereInput
    some?: QuestionWhereInput
    none?: QuestionWhereInput
  }

  export type QuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SectionCountOrderByAggregateInput = {
    id?: SortOrder
    chapterId?: SortOrder
    title?: SortOrder
    orderIndex?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SectionAvgOrderByAggregateInput = {
    orderIndex?: SortOrder
  }

  export type SectionMaxOrderByAggregateInput = {
    id?: SortOrder
    chapterId?: SortOrder
    title?: SortOrder
    orderIndex?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SectionMinOrderByAggregateInput = {
    id?: SortOrder
    chapterId?: SortOrder
    title?: SortOrder
    orderIndex?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SectionSumOrderByAggregateInput = {
    orderIndex?: SortOrder
  }

  export type SectionScalarRelationFilter = {
    is?: SectionWhereInput
    isNot?: SectionWhereInput
  }

  export type LearningTaskListRelationFilter = {
    every?: LearningTaskWhereInput
    some?: LearningTaskWhereInput
    none?: LearningTaskWhereInput
  }

  export type LearningTaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionCountOrderByAggregateInput = {
    id?: SortOrder
    sectionId?: SortOrder
    content?: SortOrder
    difficulty?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionAvgOrderByAggregateInput = {
    difficulty?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    sectionId?: SortOrder
    content?: SortOrder
    difficulty?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    id?: SortOrder
    sectionId?: SortOrder
    content?: SortOrder
    difficulty?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionSumOrderByAggregateInput = {
    difficulty?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type GoalScalarRelationFilter = {
    is?: GoalWhereInput
    isNot?: GoalWhereInput
  }

  export type PlanRevisionListRelationFilter = {
    every?: PlanRevisionWhereInput
    some?: PlanRevisionWhereInput
    none?: PlanRevisionWhereInput
  }

  export type PlanRevisionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LearningPlanCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    goalId?: SortOrder
    generatedBy?: SortOrder
    maxDays?: SortOrder
    baseDays?: SortOrder
    finalStudyDate?: SortOrder
    reviewDays?: SortOrder
    reviewWeekdays?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LearningPlanAvgOrderByAggregateInput = {
    maxDays?: SortOrder
    baseDays?: SortOrder
    reviewDays?: SortOrder
  }

  export type LearningPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    goalId?: SortOrder
    generatedBy?: SortOrder
    maxDays?: SortOrder
    baseDays?: SortOrder
    finalStudyDate?: SortOrder
    reviewDays?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LearningPlanMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    goalId?: SortOrder
    generatedBy?: SortOrder
    maxDays?: SortOrder
    baseDays?: SortOrder
    finalStudyDate?: SortOrder
    reviewDays?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LearningPlanSumOrderByAggregateInput = {
    maxDays?: SortOrder
    baseDays?: SortOrder
    reviewDays?: SortOrder
  }

  export type LearningPlanScalarRelationFilter = {
    is?: LearningPlanWhereInput
    isNot?: LearningPlanWhereInput
  }

  export type QuestionScalarRelationFilter = {
    is?: QuestionWhereInput
    isNot?: QuestionWhereInput
  }

  export type LearningTaskCountOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    date?: SortOrder
    questionId?: SortOrder
    orderInDay?: SortOrder
    isReviewDay?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LearningTaskAvgOrderByAggregateInput = {
    orderInDay?: SortOrder
  }

  export type LearningTaskMaxOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    date?: SortOrder
    questionId?: SortOrder
    orderInDay?: SortOrder
    isReviewDay?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LearningTaskMinOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    date?: SortOrder
    questionId?: SortOrder
    orderInDay?: SortOrder
    isReviewDay?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LearningTaskSumOrderByAggregateInput = {
    orderInDay?: SortOrder
  }

  export type QuestionAttemptLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    date?: SortOrder
    status?: SortOrder
    source?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionAttemptLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    date?: SortOrder
    status?: SortOrder
    source?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionAttemptLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    date?: SortOrder
    status?: SortOrder
    source?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlanRevisionCountOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    revisionType?: SortOrder
    selectedStatuses?: SortOrder
    revisedAt?: SortOrder
  }

  export type PlanRevisionMaxOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    revisionType?: SortOrder
    revisedAt?: SortOrder
  }

  export type PlanRevisionMinOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    revisionType?: SortOrder
    revisedAt?: SortOrder
  }

  export type DailyReflectionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DailyReflectionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DailyReflectionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WeeklyReflectionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    weekStart?: SortOrder
    weekEnd?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WeeklyReflectionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    weekStart?: SortOrder
    weekEnd?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WeeklyReflectionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    weekStart?: SortOrder
    weekEnd?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ValuePromptCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    promptType?: SortOrder
    content?: SortOrder
    response?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ValuePromptMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    promptType?: SortOrder
    content?: SortOrder
    response?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ValuePromptMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    promptType?: SortOrder
    content?: SortOrder
    response?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReflectionBadgeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeType?: SortOrder
    awardedAt?: SortOrder
  }

  export type ReflectionBadgeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeType?: SortOrder
    awardedAt?: SortOrder
  }

  export type ReflectionBadgeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeType?: SortOrder
    awardedAt?: SortOrder
  }

  export type UserCreateNestedManyWithoutAvatarInput = {
    create?: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput> | UserCreateWithoutAvatarInput[] | UserUncheckedCreateWithoutAvatarInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAvatarInput | UserCreateOrConnectWithoutAvatarInput[]
    createMany?: UserCreateManyAvatarInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutAvatarInput = {
    create?: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput> | UserCreateWithoutAvatarInput[] | UserUncheckedCreateWithoutAvatarInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAvatarInput | UserCreateOrConnectWithoutAvatarInput[]
    createMany?: UserCreateManyAvatarInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateManyWithoutAvatarNestedInput = {
    create?: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput> | UserCreateWithoutAvatarInput[] | UserUncheckedCreateWithoutAvatarInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAvatarInput | UserCreateOrConnectWithoutAvatarInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAvatarInput | UserUpsertWithWhereUniqueWithoutAvatarInput[]
    createMany?: UserCreateManyAvatarInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAvatarInput | UserUpdateWithWhereUniqueWithoutAvatarInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAvatarInput | UserUpdateManyWithWhereWithoutAvatarInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutAvatarNestedInput = {
    create?: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput> | UserCreateWithoutAvatarInput[] | UserUncheckedCreateWithoutAvatarInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAvatarInput | UserCreateOrConnectWithoutAvatarInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAvatarInput | UserUpsertWithWhereUniqueWithoutAvatarInput[]
    createMany?: UserCreateManyAvatarInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAvatarInput | UserUpdateWithWhereUniqueWithoutAvatarInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAvatarInput | UserUpdateManyWithWhereWithoutAvatarInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AvatarCreateNestedOneWithoutUsersInput = {
    create?: XOR<AvatarCreateWithoutUsersInput, AvatarUncheckedCreateWithoutUsersInput>
    connectOrCreate?: AvatarCreateOrConnectWithoutUsersInput
    connect?: AvatarWhereUniqueInput
  }

  export type GoalCreateNestedManyWithoutUserInput = {
    create?: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput> | GoalCreateWithoutUserInput[] | GoalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutUserInput | GoalCreateOrConnectWithoutUserInput[]
    createMany?: GoalCreateManyUserInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type LearningPlanCreateNestedManyWithoutUserInput = {
    create?: XOR<LearningPlanCreateWithoutUserInput, LearningPlanUncheckedCreateWithoutUserInput> | LearningPlanCreateWithoutUserInput[] | LearningPlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LearningPlanCreateOrConnectWithoutUserInput | LearningPlanCreateOrConnectWithoutUserInput[]
    createMany?: LearningPlanCreateManyUserInputEnvelope
    connect?: LearningPlanWhereUniqueInput | LearningPlanWhereUniqueInput[]
  }

  export type QuestionAttemptLogCreateNestedManyWithoutUserInput = {
    create?: XOR<QuestionAttemptLogCreateWithoutUserInput, QuestionAttemptLogUncheckedCreateWithoutUserInput> | QuestionAttemptLogCreateWithoutUserInput[] | QuestionAttemptLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QuestionAttemptLogCreateOrConnectWithoutUserInput | QuestionAttemptLogCreateOrConnectWithoutUserInput[]
    createMany?: QuestionAttemptLogCreateManyUserInputEnvelope
    connect?: QuestionAttemptLogWhereUniqueInput | QuestionAttemptLogWhereUniqueInput[]
  }

  export type DailyReflectionCreateNestedManyWithoutUserInput = {
    create?: XOR<DailyReflectionCreateWithoutUserInput, DailyReflectionUncheckedCreateWithoutUserInput> | DailyReflectionCreateWithoutUserInput[] | DailyReflectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DailyReflectionCreateOrConnectWithoutUserInput | DailyReflectionCreateOrConnectWithoutUserInput[]
    createMany?: DailyReflectionCreateManyUserInputEnvelope
    connect?: DailyReflectionWhereUniqueInput | DailyReflectionWhereUniqueInput[]
  }

  export type WeeklyReflectionCreateNestedManyWithoutUserInput = {
    create?: XOR<WeeklyReflectionCreateWithoutUserInput, WeeklyReflectionUncheckedCreateWithoutUserInput> | WeeklyReflectionCreateWithoutUserInput[] | WeeklyReflectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WeeklyReflectionCreateOrConnectWithoutUserInput | WeeklyReflectionCreateOrConnectWithoutUserInput[]
    createMany?: WeeklyReflectionCreateManyUserInputEnvelope
    connect?: WeeklyReflectionWhereUniqueInput | WeeklyReflectionWhereUniqueInput[]
  }

  export type ValuePromptCreateNestedManyWithoutUserInput = {
    create?: XOR<ValuePromptCreateWithoutUserInput, ValuePromptUncheckedCreateWithoutUserInput> | ValuePromptCreateWithoutUserInput[] | ValuePromptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ValuePromptCreateOrConnectWithoutUserInput | ValuePromptCreateOrConnectWithoutUserInput[]
    createMany?: ValuePromptCreateManyUserInputEnvelope
    connect?: ValuePromptWhereUniqueInput | ValuePromptWhereUniqueInput[]
  }

  export type ReflectionBadgeCreateNestedManyWithoutUserInput = {
    create?: XOR<ReflectionBadgeCreateWithoutUserInput, ReflectionBadgeUncheckedCreateWithoutUserInput> | ReflectionBadgeCreateWithoutUserInput[] | ReflectionBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReflectionBadgeCreateOrConnectWithoutUserInput | ReflectionBadgeCreateOrConnectWithoutUserInput[]
    createMany?: ReflectionBadgeCreateManyUserInputEnvelope
    connect?: ReflectionBadgeWhereUniqueInput | ReflectionBadgeWhereUniqueInput[]
  }

  export type GoalUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput> | GoalCreateWithoutUserInput[] | GoalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutUserInput | GoalCreateOrConnectWithoutUserInput[]
    createMany?: GoalCreateManyUserInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type LearningPlanUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LearningPlanCreateWithoutUserInput, LearningPlanUncheckedCreateWithoutUserInput> | LearningPlanCreateWithoutUserInput[] | LearningPlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LearningPlanCreateOrConnectWithoutUserInput | LearningPlanCreateOrConnectWithoutUserInput[]
    createMany?: LearningPlanCreateManyUserInputEnvelope
    connect?: LearningPlanWhereUniqueInput | LearningPlanWhereUniqueInput[]
  }

  export type QuestionAttemptLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<QuestionAttemptLogCreateWithoutUserInput, QuestionAttemptLogUncheckedCreateWithoutUserInput> | QuestionAttemptLogCreateWithoutUserInput[] | QuestionAttemptLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QuestionAttemptLogCreateOrConnectWithoutUserInput | QuestionAttemptLogCreateOrConnectWithoutUserInput[]
    createMany?: QuestionAttemptLogCreateManyUserInputEnvelope
    connect?: QuestionAttemptLogWhereUniqueInput | QuestionAttemptLogWhereUniqueInput[]
  }

  export type DailyReflectionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DailyReflectionCreateWithoutUserInput, DailyReflectionUncheckedCreateWithoutUserInput> | DailyReflectionCreateWithoutUserInput[] | DailyReflectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DailyReflectionCreateOrConnectWithoutUserInput | DailyReflectionCreateOrConnectWithoutUserInput[]
    createMany?: DailyReflectionCreateManyUserInputEnvelope
    connect?: DailyReflectionWhereUniqueInput | DailyReflectionWhereUniqueInput[]
  }

  export type WeeklyReflectionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WeeklyReflectionCreateWithoutUserInput, WeeklyReflectionUncheckedCreateWithoutUserInput> | WeeklyReflectionCreateWithoutUserInput[] | WeeklyReflectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WeeklyReflectionCreateOrConnectWithoutUserInput | WeeklyReflectionCreateOrConnectWithoutUserInput[]
    createMany?: WeeklyReflectionCreateManyUserInputEnvelope
    connect?: WeeklyReflectionWhereUniqueInput | WeeklyReflectionWhereUniqueInput[]
  }

  export type ValuePromptUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ValuePromptCreateWithoutUserInput, ValuePromptUncheckedCreateWithoutUserInput> | ValuePromptCreateWithoutUserInput[] | ValuePromptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ValuePromptCreateOrConnectWithoutUserInput | ValuePromptCreateOrConnectWithoutUserInput[]
    createMany?: ValuePromptCreateManyUserInputEnvelope
    connect?: ValuePromptWhereUniqueInput | ValuePromptWhereUniqueInput[]
  }

  export type ReflectionBadgeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReflectionBadgeCreateWithoutUserInput, ReflectionBadgeUncheckedCreateWithoutUserInput> | ReflectionBadgeCreateWithoutUserInput[] | ReflectionBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReflectionBadgeCreateOrConnectWithoutUserInput | ReflectionBadgeCreateOrConnectWithoutUserInput[]
    createMany?: ReflectionBadgeCreateManyUserInputEnvelope
    connect?: ReflectionBadgeWhereUniqueInput | ReflectionBadgeWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AvatarUpdateOneWithoutUsersNestedInput = {
    create?: XOR<AvatarCreateWithoutUsersInput, AvatarUncheckedCreateWithoutUsersInput>
    connectOrCreate?: AvatarCreateOrConnectWithoutUsersInput
    upsert?: AvatarUpsertWithoutUsersInput
    disconnect?: AvatarWhereInput | boolean
    delete?: AvatarWhereInput | boolean
    connect?: AvatarWhereUniqueInput
    update?: XOR<XOR<AvatarUpdateToOneWithWhereWithoutUsersInput, AvatarUpdateWithoutUsersInput>, AvatarUncheckedUpdateWithoutUsersInput>
  }

  export type GoalUpdateManyWithoutUserNestedInput = {
    create?: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput> | GoalCreateWithoutUserInput[] | GoalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutUserInput | GoalCreateOrConnectWithoutUserInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutUserInput | GoalUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GoalCreateManyUserInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutUserInput | GoalUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutUserInput | GoalUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type LearningPlanUpdateManyWithoutUserNestedInput = {
    create?: XOR<LearningPlanCreateWithoutUserInput, LearningPlanUncheckedCreateWithoutUserInput> | LearningPlanCreateWithoutUserInput[] | LearningPlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LearningPlanCreateOrConnectWithoutUserInput | LearningPlanCreateOrConnectWithoutUserInput[]
    upsert?: LearningPlanUpsertWithWhereUniqueWithoutUserInput | LearningPlanUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LearningPlanCreateManyUserInputEnvelope
    set?: LearningPlanWhereUniqueInput | LearningPlanWhereUniqueInput[]
    disconnect?: LearningPlanWhereUniqueInput | LearningPlanWhereUniqueInput[]
    delete?: LearningPlanWhereUniqueInput | LearningPlanWhereUniqueInput[]
    connect?: LearningPlanWhereUniqueInput | LearningPlanWhereUniqueInput[]
    update?: LearningPlanUpdateWithWhereUniqueWithoutUserInput | LearningPlanUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LearningPlanUpdateManyWithWhereWithoutUserInput | LearningPlanUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LearningPlanScalarWhereInput | LearningPlanScalarWhereInput[]
  }

  export type QuestionAttemptLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<QuestionAttemptLogCreateWithoutUserInput, QuestionAttemptLogUncheckedCreateWithoutUserInput> | QuestionAttemptLogCreateWithoutUserInput[] | QuestionAttemptLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QuestionAttemptLogCreateOrConnectWithoutUserInput | QuestionAttemptLogCreateOrConnectWithoutUserInput[]
    upsert?: QuestionAttemptLogUpsertWithWhereUniqueWithoutUserInput | QuestionAttemptLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: QuestionAttemptLogCreateManyUserInputEnvelope
    set?: QuestionAttemptLogWhereUniqueInput | QuestionAttemptLogWhereUniqueInput[]
    disconnect?: QuestionAttemptLogWhereUniqueInput | QuestionAttemptLogWhereUniqueInput[]
    delete?: QuestionAttemptLogWhereUniqueInput | QuestionAttemptLogWhereUniqueInput[]
    connect?: QuestionAttemptLogWhereUniqueInput | QuestionAttemptLogWhereUniqueInput[]
    update?: QuestionAttemptLogUpdateWithWhereUniqueWithoutUserInput | QuestionAttemptLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: QuestionAttemptLogUpdateManyWithWhereWithoutUserInput | QuestionAttemptLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: QuestionAttemptLogScalarWhereInput | QuestionAttemptLogScalarWhereInput[]
  }

  export type DailyReflectionUpdateManyWithoutUserNestedInput = {
    create?: XOR<DailyReflectionCreateWithoutUserInput, DailyReflectionUncheckedCreateWithoutUserInput> | DailyReflectionCreateWithoutUserInput[] | DailyReflectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DailyReflectionCreateOrConnectWithoutUserInput | DailyReflectionCreateOrConnectWithoutUserInput[]
    upsert?: DailyReflectionUpsertWithWhereUniqueWithoutUserInput | DailyReflectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DailyReflectionCreateManyUserInputEnvelope
    set?: DailyReflectionWhereUniqueInput | DailyReflectionWhereUniqueInput[]
    disconnect?: DailyReflectionWhereUniqueInput | DailyReflectionWhereUniqueInput[]
    delete?: DailyReflectionWhereUniqueInput | DailyReflectionWhereUniqueInput[]
    connect?: DailyReflectionWhereUniqueInput | DailyReflectionWhereUniqueInput[]
    update?: DailyReflectionUpdateWithWhereUniqueWithoutUserInput | DailyReflectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DailyReflectionUpdateManyWithWhereWithoutUserInput | DailyReflectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DailyReflectionScalarWhereInput | DailyReflectionScalarWhereInput[]
  }

  export type WeeklyReflectionUpdateManyWithoutUserNestedInput = {
    create?: XOR<WeeklyReflectionCreateWithoutUserInput, WeeklyReflectionUncheckedCreateWithoutUserInput> | WeeklyReflectionCreateWithoutUserInput[] | WeeklyReflectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WeeklyReflectionCreateOrConnectWithoutUserInput | WeeklyReflectionCreateOrConnectWithoutUserInput[]
    upsert?: WeeklyReflectionUpsertWithWhereUniqueWithoutUserInput | WeeklyReflectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WeeklyReflectionCreateManyUserInputEnvelope
    set?: WeeklyReflectionWhereUniqueInput | WeeklyReflectionWhereUniqueInput[]
    disconnect?: WeeklyReflectionWhereUniqueInput | WeeklyReflectionWhereUniqueInput[]
    delete?: WeeklyReflectionWhereUniqueInput | WeeklyReflectionWhereUniqueInput[]
    connect?: WeeklyReflectionWhereUniqueInput | WeeklyReflectionWhereUniqueInput[]
    update?: WeeklyReflectionUpdateWithWhereUniqueWithoutUserInput | WeeklyReflectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WeeklyReflectionUpdateManyWithWhereWithoutUserInput | WeeklyReflectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WeeklyReflectionScalarWhereInput | WeeklyReflectionScalarWhereInput[]
  }

  export type ValuePromptUpdateManyWithoutUserNestedInput = {
    create?: XOR<ValuePromptCreateWithoutUserInput, ValuePromptUncheckedCreateWithoutUserInput> | ValuePromptCreateWithoutUserInput[] | ValuePromptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ValuePromptCreateOrConnectWithoutUserInput | ValuePromptCreateOrConnectWithoutUserInput[]
    upsert?: ValuePromptUpsertWithWhereUniqueWithoutUserInput | ValuePromptUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ValuePromptCreateManyUserInputEnvelope
    set?: ValuePromptWhereUniqueInput | ValuePromptWhereUniqueInput[]
    disconnect?: ValuePromptWhereUniqueInput | ValuePromptWhereUniqueInput[]
    delete?: ValuePromptWhereUniqueInput | ValuePromptWhereUniqueInput[]
    connect?: ValuePromptWhereUniqueInput | ValuePromptWhereUniqueInput[]
    update?: ValuePromptUpdateWithWhereUniqueWithoutUserInput | ValuePromptUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ValuePromptUpdateManyWithWhereWithoutUserInput | ValuePromptUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ValuePromptScalarWhereInput | ValuePromptScalarWhereInput[]
  }

  export type ReflectionBadgeUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReflectionBadgeCreateWithoutUserInput, ReflectionBadgeUncheckedCreateWithoutUserInput> | ReflectionBadgeCreateWithoutUserInput[] | ReflectionBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReflectionBadgeCreateOrConnectWithoutUserInput | ReflectionBadgeCreateOrConnectWithoutUserInput[]
    upsert?: ReflectionBadgeUpsertWithWhereUniqueWithoutUserInput | ReflectionBadgeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReflectionBadgeCreateManyUserInputEnvelope
    set?: ReflectionBadgeWhereUniqueInput | ReflectionBadgeWhereUniqueInput[]
    disconnect?: ReflectionBadgeWhereUniqueInput | ReflectionBadgeWhereUniqueInput[]
    delete?: ReflectionBadgeWhereUniqueInput | ReflectionBadgeWhereUniqueInput[]
    connect?: ReflectionBadgeWhereUniqueInput | ReflectionBadgeWhereUniqueInput[]
    update?: ReflectionBadgeUpdateWithWhereUniqueWithoutUserInput | ReflectionBadgeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReflectionBadgeUpdateManyWithWhereWithoutUserInput | ReflectionBadgeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReflectionBadgeScalarWhereInput | ReflectionBadgeScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type GoalUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput> | GoalCreateWithoutUserInput[] | GoalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutUserInput | GoalCreateOrConnectWithoutUserInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutUserInput | GoalUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GoalCreateManyUserInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutUserInput | GoalUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutUserInput | GoalUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type LearningPlanUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LearningPlanCreateWithoutUserInput, LearningPlanUncheckedCreateWithoutUserInput> | LearningPlanCreateWithoutUserInput[] | LearningPlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LearningPlanCreateOrConnectWithoutUserInput | LearningPlanCreateOrConnectWithoutUserInput[]
    upsert?: LearningPlanUpsertWithWhereUniqueWithoutUserInput | LearningPlanUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LearningPlanCreateManyUserInputEnvelope
    set?: LearningPlanWhereUniqueInput | LearningPlanWhereUniqueInput[]
    disconnect?: LearningPlanWhereUniqueInput | LearningPlanWhereUniqueInput[]
    delete?: LearningPlanWhereUniqueInput | LearningPlanWhereUniqueInput[]
    connect?: LearningPlanWhereUniqueInput | LearningPlanWhereUniqueInput[]
    update?: LearningPlanUpdateWithWhereUniqueWithoutUserInput | LearningPlanUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LearningPlanUpdateManyWithWhereWithoutUserInput | LearningPlanUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LearningPlanScalarWhereInput | LearningPlanScalarWhereInput[]
  }

  export type QuestionAttemptLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<QuestionAttemptLogCreateWithoutUserInput, QuestionAttemptLogUncheckedCreateWithoutUserInput> | QuestionAttemptLogCreateWithoutUserInput[] | QuestionAttemptLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QuestionAttemptLogCreateOrConnectWithoutUserInput | QuestionAttemptLogCreateOrConnectWithoutUserInput[]
    upsert?: QuestionAttemptLogUpsertWithWhereUniqueWithoutUserInput | QuestionAttemptLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: QuestionAttemptLogCreateManyUserInputEnvelope
    set?: QuestionAttemptLogWhereUniqueInput | QuestionAttemptLogWhereUniqueInput[]
    disconnect?: QuestionAttemptLogWhereUniqueInput | QuestionAttemptLogWhereUniqueInput[]
    delete?: QuestionAttemptLogWhereUniqueInput | QuestionAttemptLogWhereUniqueInput[]
    connect?: QuestionAttemptLogWhereUniqueInput | QuestionAttemptLogWhereUniqueInput[]
    update?: QuestionAttemptLogUpdateWithWhereUniqueWithoutUserInput | QuestionAttemptLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: QuestionAttemptLogUpdateManyWithWhereWithoutUserInput | QuestionAttemptLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: QuestionAttemptLogScalarWhereInput | QuestionAttemptLogScalarWhereInput[]
  }

  export type DailyReflectionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DailyReflectionCreateWithoutUserInput, DailyReflectionUncheckedCreateWithoutUserInput> | DailyReflectionCreateWithoutUserInput[] | DailyReflectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DailyReflectionCreateOrConnectWithoutUserInput | DailyReflectionCreateOrConnectWithoutUserInput[]
    upsert?: DailyReflectionUpsertWithWhereUniqueWithoutUserInput | DailyReflectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DailyReflectionCreateManyUserInputEnvelope
    set?: DailyReflectionWhereUniqueInput | DailyReflectionWhereUniqueInput[]
    disconnect?: DailyReflectionWhereUniqueInput | DailyReflectionWhereUniqueInput[]
    delete?: DailyReflectionWhereUniqueInput | DailyReflectionWhereUniqueInput[]
    connect?: DailyReflectionWhereUniqueInput | DailyReflectionWhereUniqueInput[]
    update?: DailyReflectionUpdateWithWhereUniqueWithoutUserInput | DailyReflectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DailyReflectionUpdateManyWithWhereWithoutUserInput | DailyReflectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DailyReflectionScalarWhereInput | DailyReflectionScalarWhereInput[]
  }

  export type WeeklyReflectionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WeeklyReflectionCreateWithoutUserInput, WeeklyReflectionUncheckedCreateWithoutUserInput> | WeeklyReflectionCreateWithoutUserInput[] | WeeklyReflectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WeeklyReflectionCreateOrConnectWithoutUserInput | WeeklyReflectionCreateOrConnectWithoutUserInput[]
    upsert?: WeeklyReflectionUpsertWithWhereUniqueWithoutUserInput | WeeklyReflectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WeeklyReflectionCreateManyUserInputEnvelope
    set?: WeeklyReflectionWhereUniqueInput | WeeklyReflectionWhereUniqueInput[]
    disconnect?: WeeklyReflectionWhereUniqueInput | WeeklyReflectionWhereUniqueInput[]
    delete?: WeeklyReflectionWhereUniqueInput | WeeklyReflectionWhereUniqueInput[]
    connect?: WeeklyReflectionWhereUniqueInput | WeeklyReflectionWhereUniqueInput[]
    update?: WeeklyReflectionUpdateWithWhereUniqueWithoutUserInput | WeeklyReflectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WeeklyReflectionUpdateManyWithWhereWithoutUserInput | WeeklyReflectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WeeklyReflectionScalarWhereInput | WeeklyReflectionScalarWhereInput[]
  }

  export type ValuePromptUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ValuePromptCreateWithoutUserInput, ValuePromptUncheckedCreateWithoutUserInput> | ValuePromptCreateWithoutUserInput[] | ValuePromptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ValuePromptCreateOrConnectWithoutUserInput | ValuePromptCreateOrConnectWithoutUserInput[]
    upsert?: ValuePromptUpsertWithWhereUniqueWithoutUserInput | ValuePromptUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ValuePromptCreateManyUserInputEnvelope
    set?: ValuePromptWhereUniqueInput | ValuePromptWhereUniqueInput[]
    disconnect?: ValuePromptWhereUniqueInput | ValuePromptWhereUniqueInput[]
    delete?: ValuePromptWhereUniqueInput | ValuePromptWhereUniqueInput[]
    connect?: ValuePromptWhereUniqueInput | ValuePromptWhereUniqueInput[]
    update?: ValuePromptUpdateWithWhereUniqueWithoutUserInput | ValuePromptUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ValuePromptUpdateManyWithWhereWithoutUserInput | ValuePromptUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ValuePromptScalarWhereInput | ValuePromptScalarWhereInput[]
  }

  export type ReflectionBadgeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReflectionBadgeCreateWithoutUserInput, ReflectionBadgeUncheckedCreateWithoutUserInput> | ReflectionBadgeCreateWithoutUserInput[] | ReflectionBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReflectionBadgeCreateOrConnectWithoutUserInput | ReflectionBadgeCreateOrConnectWithoutUserInput[]
    upsert?: ReflectionBadgeUpsertWithWhereUniqueWithoutUserInput | ReflectionBadgeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReflectionBadgeCreateManyUserInputEnvelope
    set?: ReflectionBadgeWhereUniqueInput | ReflectionBadgeWhereUniqueInput[]
    disconnect?: ReflectionBadgeWhereUniqueInput | ReflectionBadgeWhereUniqueInput[]
    delete?: ReflectionBadgeWhereUniqueInput | ReflectionBadgeWhereUniqueInput[]
    connect?: ReflectionBadgeWhereUniqueInput | ReflectionBadgeWhereUniqueInput[]
    update?: ReflectionBadgeUpdateWithWhereUniqueWithoutUserInput | ReflectionBadgeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReflectionBadgeUpdateManyWithWhereWithoutUserInput | ReflectionBadgeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReflectionBadgeScalarWhereInput | ReflectionBadgeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutGoalsInput = {
    create?: XOR<UserCreateWithoutGoalsInput, UserUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoalsInput
    connect?: UserWhereUniqueInput
  }

  export type LearningPlanCreateNestedManyWithoutGoalInput = {
    create?: XOR<LearningPlanCreateWithoutGoalInput, LearningPlanUncheckedCreateWithoutGoalInput> | LearningPlanCreateWithoutGoalInput[] | LearningPlanUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: LearningPlanCreateOrConnectWithoutGoalInput | LearningPlanCreateOrConnectWithoutGoalInput[]
    createMany?: LearningPlanCreateManyGoalInputEnvelope
    connect?: LearningPlanWhereUniqueInput | LearningPlanWhereUniqueInput[]
  }

  export type LearningPlanUncheckedCreateNestedManyWithoutGoalInput = {
    create?: XOR<LearningPlanCreateWithoutGoalInput, LearningPlanUncheckedCreateWithoutGoalInput> | LearningPlanCreateWithoutGoalInput[] | LearningPlanUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: LearningPlanCreateOrConnectWithoutGoalInput | LearningPlanCreateOrConnectWithoutGoalInput[]
    createMany?: LearningPlanCreateManyGoalInputEnvelope
    connect?: LearningPlanWhereUniqueInput | LearningPlanWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutGoalsNestedInput = {
    create?: XOR<UserCreateWithoutGoalsInput, UserUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoalsInput
    upsert?: UserUpsertWithoutGoalsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGoalsInput, UserUpdateWithoutGoalsInput>, UserUncheckedUpdateWithoutGoalsInput>
  }

  export type LearningPlanUpdateManyWithoutGoalNestedInput = {
    create?: XOR<LearningPlanCreateWithoutGoalInput, LearningPlanUncheckedCreateWithoutGoalInput> | LearningPlanCreateWithoutGoalInput[] | LearningPlanUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: LearningPlanCreateOrConnectWithoutGoalInput | LearningPlanCreateOrConnectWithoutGoalInput[]
    upsert?: LearningPlanUpsertWithWhereUniqueWithoutGoalInput | LearningPlanUpsertWithWhereUniqueWithoutGoalInput[]
    createMany?: LearningPlanCreateManyGoalInputEnvelope
    set?: LearningPlanWhereUniqueInput | LearningPlanWhereUniqueInput[]
    disconnect?: LearningPlanWhereUniqueInput | LearningPlanWhereUniqueInput[]
    delete?: LearningPlanWhereUniqueInput | LearningPlanWhereUniqueInput[]
    connect?: LearningPlanWhereUniqueInput | LearningPlanWhereUniqueInput[]
    update?: LearningPlanUpdateWithWhereUniqueWithoutGoalInput | LearningPlanUpdateWithWhereUniqueWithoutGoalInput[]
    updateMany?: LearningPlanUpdateManyWithWhereWithoutGoalInput | LearningPlanUpdateManyWithWhereWithoutGoalInput[]
    deleteMany?: LearningPlanScalarWhereInput | LearningPlanScalarWhereInput[]
  }

  export type LearningPlanUncheckedUpdateManyWithoutGoalNestedInput = {
    create?: XOR<LearningPlanCreateWithoutGoalInput, LearningPlanUncheckedCreateWithoutGoalInput> | LearningPlanCreateWithoutGoalInput[] | LearningPlanUncheckedCreateWithoutGoalInput[]
    connectOrCreate?: LearningPlanCreateOrConnectWithoutGoalInput | LearningPlanCreateOrConnectWithoutGoalInput[]
    upsert?: LearningPlanUpsertWithWhereUniqueWithoutGoalInput | LearningPlanUpsertWithWhereUniqueWithoutGoalInput[]
    createMany?: LearningPlanCreateManyGoalInputEnvelope
    set?: LearningPlanWhereUniqueInput | LearningPlanWhereUniqueInput[]
    disconnect?: LearningPlanWhereUniqueInput | LearningPlanWhereUniqueInput[]
    delete?: LearningPlanWhereUniqueInput | LearningPlanWhereUniqueInput[]
    connect?: LearningPlanWhereUniqueInput | LearningPlanWhereUniqueInput[]
    update?: LearningPlanUpdateWithWhereUniqueWithoutGoalInput | LearningPlanUpdateWithWhereUniqueWithoutGoalInput[]
    updateMany?: LearningPlanUpdateManyWithWhereWithoutGoalInput | LearningPlanUpdateManyWithWhereWithoutGoalInput[]
    deleteMany?: LearningPlanScalarWhereInput | LearningPlanScalarWhereInput[]
  }

  export type ChapterCreateNestedManyWithoutTextbookInput = {
    create?: XOR<ChapterCreateWithoutTextbookInput, ChapterUncheckedCreateWithoutTextbookInput> | ChapterCreateWithoutTextbookInput[] | ChapterUncheckedCreateWithoutTextbookInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutTextbookInput | ChapterCreateOrConnectWithoutTextbookInput[]
    createMany?: ChapterCreateManyTextbookInputEnvelope
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
  }

  export type ChapterUncheckedCreateNestedManyWithoutTextbookInput = {
    create?: XOR<ChapterCreateWithoutTextbookInput, ChapterUncheckedCreateWithoutTextbookInput> | ChapterCreateWithoutTextbookInput[] | ChapterUncheckedCreateWithoutTextbookInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutTextbookInput | ChapterCreateOrConnectWithoutTextbookInput[]
    createMany?: ChapterCreateManyTextbookInputEnvelope
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
  }

  export type ChapterUpdateManyWithoutTextbookNestedInput = {
    create?: XOR<ChapterCreateWithoutTextbookInput, ChapterUncheckedCreateWithoutTextbookInput> | ChapterCreateWithoutTextbookInput[] | ChapterUncheckedCreateWithoutTextbookInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutTextbookInput | ChapterCreateOrConnectWithoutTextbookInput[]
    upsert?: ChapterUpsertWithWhereUniqueWithoutTextbookInput | ChapterUpsertWithWhereUniqueWithoutTextbookInput[]
    createMany?: ChapterCreateManyTextbookInputEnvelope
    set?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    disconnect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    delete?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    update?: ChapterUpdateWithWhereUniqueWithoutTextbookInput | ChapterUpdateWithWhereUniqueWithoutTextbookInput[]
    updateMany?: ChapterUpdateManyWithWhereWithoutTextbookInput | ChapterUpdateManyWithWhereWithoutTextbookInput[]
    deleteMany?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
  }

  export type ChapterUncheckedUpdateManyWithoutTextbookNestedInput = {
    create?: XOR<ChapterCreateWithoutTextbookInput, ChapterUncheckedCreateWithoutTextbookInput> | ChapterCreateWithoutTextbookInput[] | ChapterUncheckedCreateWithoutTextbookInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutTextbookInput | ChapterCreateOrConnectWithoutTextbookInput[]
    upsert?: ChapterUpsertWithWhereUniqueWithoutTextbookInput | ChapterUpsertWithWhereUniqueWithoutTextbookInput[]
    createMany?: ChapterCreateManyTextbookInputEnvelope
    set?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    disconnect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    delete?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    update?: ChapterUpdateWithWhereUniqueWithoutTextbookInput | ChapterUpdateWithWhereUniqueWithoutTextbookInput[]
    updateMany?: ChapterUpdateManyWithWhereWithoutTextbookInput | ChapterUpdateManyWithWhereWithoutTextbookInput[]
    deleteMany?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
  }

  export type TextbookCreateNestedOneWithoutChaptersInput = {
    create?: XOR<TextbookCreateWithoutChaptersInput, TextbookUncheckedCreateWithoutChaptersInput>
    connectOrCreate?: TextbookCreateOrConnectWithoutChaptersInput
    connect?: TextbookWhereUniqueInput
  }

  export type SectionCreateNestedManyWithoutChapterInput = {
    create?: XOR<SectionCreateWithoutChapterInput, SectionUncheckedCreateWithoutChapterInput> | SectionCreateWithoutChapterInput[] | SectionUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutChapterInput | SectionCreateOrConnectWithoutChapterInput[]
    createMany?: SectionCreateManyChapterInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type SectionUncheckedCreateNestedManyWithoutChapterInput = {
    create?: XOR<SectionCreateWithoutChapterInput, SectionUncheckedCreateWithoutChapterInput> | SectionCreateWithoutChapterInput[] | SectionUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutChapterInput | SectionCreateOrConnectWithoutChapterInput[]
    createMany?: SectionCreateManyChapterInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type TextbookUpdateOneRequiredWithoutChaptersNestedInput = {
    create?: XOR<TextbookCreateWithoutChaptersInput, TextbookUncheckedCreateWithoutChaptersInput>
    connectOrCreate?: TextbookCreateOrConnectWithoutChaptersInput
    upsert?: TextbookUpsertWithoutChaptersInput
    connect?: TextbookWhereUniqueInput
    update?: XOR<XOR<TextbookUpdateToOneWithWhereWithoutChaptersInput, TextbookUpdateWithoutChaptersInput>, TextbookUncheckedUpdateWithoutChaptersInput>
  }

  export type SectionUpdateManyWithoutChapterNestedInput = {
    create?: XOR<SectionCreateWithoutChapterInput, SectionUncheckedCreateWithoutChapterInput> | SectionCreateWithoutChapterInput[] | SectionUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutChapterInput | SectionCreateOrConnectWithoutChapterInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutChapterInput | SectionUpsertWithWhereUniqueWithoutChapterInput[]
    createMany?: SectionCreateManyChapterInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutChapterInput | SectionUpdateWithWhereUniqueWithoutChapterInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutChapterInput | SectionUpdateManyWithWhereWithoutChapterInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type SectionUncheckedUpdateManyWithoutChapterNestedInput = {
    create?: XOR<SectionCreateWithoutChapterInput, SectionUncheckedCreateWithoutChapterInput> | SectionCreateWithoutChapterInput[] | SectionUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutChapterInput | SectionCreateOrConnectWithoutChapterInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutChapterInput | SectionUpsertWithWhereUniqueWithoutChapterInput[]
    createMany?: SectionCreateManyChapterInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutChapterInput | SectionUpdateWithWhereUniqueWithoutChapterInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutChapterInput | SectionUpdateManyWithWhereWithoutChapterInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type ChapterCreateNestedOneWithoutSectionsInput = {
    create?: XOR<ChapterCreateWithoutSectionsInput, ChapterUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: ChapterCreateOrConnectWithoutSectionsInput
    connect?: ChapterWhereUniqueInput
  }

  export type QuestionCreateNestedManyWithoutSectionInput = {
    create?: XOR<QuestionCreateWithoutSectionInput, QuestionUncheckedCreateWithoutSectionInput> | QuestionCreateWithoutSectionInput[] | QuestionUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSectionInput | QuestionCreateOrConnectWithoutSectionInput[]
    createMany?: QuestionCreateManySectionInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type QuestionUncheckedCreateNestedManyWithoutSectionInput = {
    create?: XOR<QuestionCreateWithoutSectionInput, QuestionUncheckedCreateWithoutSectionInput> | QuestionCreateWithoutSectionInput[] | QuestionUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSectionInput | QuestionCreateOrConnectWithoutSectionInput[]
    createMany?: QuestionCreateManySectionInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type ChapterUpdateOneRequiredWithoutSectionsNestedInput = {
    create?: XOR<ChapterCreateWithoutSectionsInput, ChapterUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: ChapterCreateOrConnectWithoutSectionsInput
    upsert?: ChapterUpsertWithoutSectionsInput
    connect?: ChapterWhereUniqueInput
    update?: XOR<XOR<ChapterUpdateToOneWithWhereWithoutSectionsInput, ChapterUpdateWithoutSectionsInput>, ChapterUncheckedUpdateWithoutSectionsInput>
  }

  export type QuestionUpdateManyWithoutSectionNestedInput = {
    create?: XOR<QuestionCreateWithoutSectionInput, QuestionUncheckedCreateWithoutSectionInput> | QuestionCreateWithoutSectionInput[] | QuestionUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSectionInput | QuestionCreateOrConnectWithoutSectionInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutSectionInput | QuestionUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: QuestionCreateManySectionInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutSectionInput | QuestionUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutSectionInput | QuestionUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type QuestionUncheckedUpdateManyWithoutSectionNestedInput = {
    create?: XOR<QuestionCreateWithoutSectionInput, QuestionUncheckedCreateWithoutSectionInput> | QuestionCreateWithoutSectionInput[] | QuestionUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSectionInput | QuestionCreateOrConnectWithoutSectionInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutSectionInput | QuestionUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: QuestionCreateManySectionInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutSectionInput | QuestionUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutSectionInput | QuestionUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type SectionCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<SectionCreateWithoutQuestionsInput, SectionUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: SectionCreateOrConnectWithoutQuestionsInput
    connect?: SectionWhereUniqueInput
  }

  export type LearningTaskCreateNestedManyWithoutQuestionInput = {
    create?: XOR<LearningTaskCreateWithoutQuestionInput, LearningTaskUncheckedCreateWithoutQuestionInput> | LearningTaskCreateWithoutQuestionInput[] | LearningTaskUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: LearningTaskCreateOrConnectWithoutQuestionInput | LearningTaskCreateOrConnectWithoutQuestionInput[]
    createMany?: LearningTaskCreateManyQuestionInputEnvelope
    connect?: LearningTaskWhereUniqueInput | LearningTaskWhereUniqueInput[]
  }

  export type QuestionAttemptLogCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionAttemptLogCreateWithoutQuestionInput, QuestionAttemptLogUncheckedCreateWithoutQuestionInput> | QuestionAttemptLogCreateWithoutQuestionInput[] | QuestionAttemptLogUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionAttemptLogCreateOrConnectWithoutQuestionInput | QuestionAttemptLogCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionAttemptLogCreateManyQuestionInputEnvelope
    connect?: QuestionAttemptLogWhereUniqueInput | QuestionAttemptLogWhereUniqueInput[]
  }

  export type LearningTaskUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<LearningTaskCreateWithoutQuestionInput, LearningTaskUncheckedCreateWithoutQuestionInput> | LearningTaskCreateWithoutQuestionInput[] | LearningTaskUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: LearningTaskCreateOrConnectWithoutQuestionInput | LearningTaskCreateOrConnectWithoutQuestionInput[]
    createMany?: LearningTaskCreateManyQuestionInputEnvelope
    connect?: LearningTaskWhereUniqueInput | LearningTaskWhereUniqueInput[]
  }

  export type QuestionAttemptLogUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionAttemptLogCreateWithoutQuestionInput, QuestionAttemptLogUncheckedCreateWithoutQuestionInput> | QuestionAttemptLogCreateWithoutQuestionInput[] | QuestionAttemptLogUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionAttemptLogCreateOrConnectWithoutQuestionInput | QuestionAttemptLogCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionAttemptLogCreateManyQuestionInputEnvelope
    connect?: QuestionAttemptLogWhereUniqueInput | QuestionAttemptLogWhereUniqueInput[]
  }

  export type SectionUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<SectionCreateWithoutQuestionsInput, SectionUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: SectionCreateOrConnectWithoutQuestionsInput
    upsert?: SectionUpsertWithoutQuestionsInput
    connect?: SectionWhereUniqueInput
    update?: XOR<XOR<SectionUpdateToOneWithWhereWithoutQuestionsInput, SectionUpdateWithoutQuestionsInput>, SectionUncheckedUpdateWithoutQuestionsInput>
  }

  export type LearningTaskUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<LearningTaskCreateWithoutQuestionInput, LearningTaskUncheckedCreateWithoutQuestionInput> | LearningTaskCreateWithoutQuestionInput[] | LearningTaskUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: LearningTaskCreateOrConnectWithoutQuestionInput | LearningTaskCreateOrConnectWithoutQuestionInput[]
    upsert?: LearningTaskUpsertWithWhereUniqueWithoutQuestionInput | LearningTaskUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: LearningTaskCreateManyQuestionInputEnvelope
    set?: LearningTaskWhereUniqueInput | LearningTaskWhereUniqueInput[]
    disconnect?: LearningTaskWhereUniqueInput | LearningTaskWhereUniqueInput[]
    delete?: LearningTaskWhereUniqueInput | LearningTaskWhereUniqueInput[]
    connect?: LearningTaskWhereUniqueInput | LearningTaskWhereUniqueInput[]
    update?: LearningTaskUpdateWithWhereUniqueWithoutQuestionInput | LearningTaskUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: LearningTaskUpdateManyWithWhereWithoutQuestionInput | LearningTaskUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: LearningTaskScalarWhereInput | LearningTaskScalarWhereInput[]
  }

  export type QuestionAttemptLogUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionAttemptLogCreateWithoutQuestionInput, QuestionAttemptLogUncheckedCreateWithoutQuestionInput> | QuestionAttemptLogCreateWithoutQuestionInput[] | QuestionAttemptLogUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionAttemptLogCreateOrConnectWithoutQuestionInput | QuestionAttemptLogCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionAttemptLogUpsertWithWhereUniqueWithoutQuestionInput | QuestionAttemptLogUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionAttemptLogCreateManyQuestionInputEnvelope
    set?: QuestionAttemptLogWhereUniqueInput | QuestionAttemptLogWhereUniqueInput[]
    disconnect?: QuestionAttemptLogWhereUniqueInput | QuestionAttemptLogWhereUniqueInput[]
    delete?: QuestionAttemptLogWhereUniqueInput | QuestionAttemptLogWhereUniqueInput[]
    connect?: QuestionAttemptLogWhereUniqueInput | QuestionAttemptLogWhereUniqueInput[]
    update?: QuestionAttemptLogUpdateWithWhereUniqueWithoutQuestionInput | QuestionAttemptLogUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionAttemptLogUpdateManyWithWhereWithoutQuestionInput | QuestionAttemptLogUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionAttemptLogScalarWhereInput | QuestionAttemptLogScalarWhereInput[]
  }

  export type LearningTaskUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<LearningTaskCreateWithoutQuestionInput, LearningTaskUncheckedCreateWithoutQuestionInput> | LearningTaskCreateWithoutQuestionInput[] | LearningTaskUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: LearningTaskCreateOrConnectWithoutQuestionInput | LearningTaskCreateOrConnectWithoutQuestionInput[]
    upsert?: LearningTaskUpsertWithWhereUniqueWithoutQuestionInput | LearningTaskUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: LearningTaskCreateManyQuestionInputEnvelope
    set?: LearningTaskWhereUniqueInput | LearningTaskWhereUniqueInput[]
    disconnect?: LearningTaskWhereUniqueInput | LearningTaskWhereUniqueInput[]
    delete?: LearningTaskWhereUniqueInput | LearningTaskWhereUniqueInput[]
    connect?: LearningTaskWhereUniqueInput | LearningTaskWhereUniqueInput[]
    update?: LearningTaskUpdateWithWhereUniqueWithoutQuestionInput | LearningTaskUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: LearningTaskUpdateManyWithWhereWithoutQuestionInput | LearningTaskUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: LearningTaskScalarWhereInput | LearningTaskScalarWhereInput[]
  }

  export type QuestionAttemptLogUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionAttemptLogCreateWithoutQuestionInput, QuestionAttemptLogUncheckedCreateWithoutQuestionInput> | QuestionAttemptLogCreateWithoutQuestionInput[] | QuestionAttemptLogUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionAttemptLogCreateOrConnectWithoutQuestionInput | QuestionAttemptLogCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionAttemptLogUpsertWithWhereUniqueWithoutQuestionInput | QuestionAttemptLogUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionAttemptLogCreateManyQuestionInputEnvelope
    set?: QuestionAttemptLogWhereUniqueInput | QuestionAttemptLogWhereUniqueInput[]
    disconnect?: QuestionAttemptLogWhereUniqueInput | QuestionAttemptLogWhereUniqueInput[]
    delete?: QuestionAttemptLogWhereUniqueInput | QuestionAttemptLogWhereUniqueInput[]
    connect?: QuestionAttemptLogWhereUniqueInput | QuestionAttemptLogWhereUniqueInput[]
    update?: QuestionAttemptLogUpdateWithWhereUniqueWithoutQuestionInput | QuestionAttemptLogUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionAttemptLogUpdateManyWithWhereWithoutQuestionInput | QuestionAttemptLogUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionAttemptLogScalarWhereInput | QuestionAttemptLogScalarWhereInput[]
  }

  export type LearningPlanCreatereviewWeekdaysInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutLearningPlansInput = {
    create?: XOR<UserCreateWithoutLearningPlansInput, UserUncheckedCreateWithoutLearningPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutLearningPlansInput
    connect?: UserWhereUniqueInput
  }

  export type GoalCreateNestedOneWithoutLearningPlansInput = {
    create?: XOR<GoalCreateWithoutLearningPlansInput, GoalUncheckedCreateWithoutLearningPlansInput>
    connectOrCreate?: GoalCreateOrConnectWithoutLearningPlansInput
    connect?: GoalWhereUniqueInput
  }

  export type LearningTaskCreateNestedManyWithoutLearningPlanInput = {
    create?: XOR<LearningTaskCreateWithoutLearningPlanInput, LearningTaskUncheckedCreateWithoutLearningPlanInput> | LearningTaskCreateWithoutLearningPlanInput[] | LearningTaskUncheckedCreateWithoutLearningPlanInput[]
    connectOrCreate?: LearningTaskCreateOrConnectWithoutLearningPlanInput | LearningTaskCreateOrConnectWithoutLearningPlanInput[]
    createMany?: LearningTaskCreateManyLearningPlanInputEnvelope
    connect?: LearningTaskWhereUniqueInput | LearningTaskWhereUniqueInput[]
  }

  export type PlanRevisionCreateNestedManyWithoutLearningPlanInput = {
    create?: XOR<PlanRevisionCreateWithoutLearningPlanInput, PlanRevisionUncheckedCreateWithoutLearningPlanInput> | PlanRevisionCreateWithoutLearningPlanInput[] | PlanRevisionUncheckedCreateWithoutLearningPlanInput[]
    connectOrCreate?: PlanRevisionCreateOrConnectWithoutLearningPlanInput | PlanRevisionCreateOrConnectWithoutLearningPlanInput[]
    createMany?: PlanRevisionCreateManyLearningPlanInputEnvelope
    connect?: PlanRevisionWhereUniqueInput | PlanRevisionWhereUniqueInput[]
  }

  export type LearningTaskUncheckedCreateNestedManyWithoutLearningPlanInput = {
    create?: XOR<LearningTaskCreateWithoutLearningPlanInput, LearningTaskUncheckedCreateWithoutLearningPlanInput> | LearningTaskCreateWithoutLearningPlanInput[] | LearningTaskUncheckedCreateWithoutLearningPlanInput[]
    connectOrCreate?: LearningTaskCreateOrConnectWithoutLearningPlanInput | LearningTaskCreateOrConnectWithoutLearningPlanInput[]
    createMany?: LearningTaskCreateManyLearningPlanInputEnvelope
    connect?: LearningTaskWhereUniqueInput | LearningTaskWhereUniqueInput[]
  }

  export type PlanRevisionUncheckedCreateNestedManyWithoutLearningPlanInput = {
    create?: XOR<PlanRevisionCreateWithoutLearningPlanInput, PlanRevisionUncheckedCreateWithoutLearningPlanInput> | PlanRevisionCreateWithoutLearningPlanInput[] | PlanRevisionUncheckedCreateWithoutLearningPlanInput[]
    connectOrCreate?: PlanRevisionCreateOrConnectWithoutLearningPlanInput | PlanRevisionCreateOrConnectWithoutLearningPlanInput[]
    createMany?: PlanRevisionCreateManyLearningPlanInputEnvelope
    connect?: PlanRevisionWhereUniqueInput | PlanRevisionWhereUniqueInput[]
  }

  export type LearningPlanUpdatereviewWeekdaysInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutLearningPlansNestedInput = {
    create?: XOR<UserCreateWithoutLearningPlansInput, UserUncheckedCreateWithoutLearningPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutLearningPlansInput
    upsert?: UserUpsertWithoutLearningPlansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLearningPlansInput, UserUpdateWithoutLearningPlansInput>, UserUncheckedUpdateWithoutLearningPlansInput>
  }

  export type GoalUpdateOneRequiredWithoutLearningPlansNestedInput = {
    create?: XOR<GoalCreateWithoutLearningPlansInput, GoalUncheckedCreateWithoutLearningPlansInput>
    connectOrCreate?: GoalCreateOrConnectWithoutLearningPlansInput
    upsert?: GoalUpsertWithoutLearningPlansInput
    connect?: GoalWhereUniqueInput
    update?: XOR<XOR<GoalUpdateToOneWithWhereWithoutLearningPlansInput, GoalUpdateWithoutLearningPlansInput>, GoalUncheckedUpdateWithoutLearningPlansInput>
  }

  export type LearningTaskUpdateManyWithoutLearningPlanNestedInput = {
    create?: XOR<LearningTaskCreateWithoutLearningPlanInput, LearningTaskUncheckedCreateWithoutLearningPlanInput> | LearningTaskCreateWithoutLearningPlanInput[] | LearningTaskUncheckedCreateWithoutLearningPlanInput[]
    connectOrCreate?: LearningTaskCreateOrConnectWithoutLearningPlanInput | LearningTaskCreateOrConnectWithoutLearningPlanInput[]
    upsert?: LearningTaskUpsertWithWhereUniqueWithoutLearningPlanInput | LearningTaskUpsertWithWhereUniqueWithoutLearningPlanInput[]
    createMany?: LearningTaskCreateManyLearningPlanInputEnvelope
    set?: LearningTaskWhereUniqueInput | LearningTaskWhereUniqueInput[]
    disconnect?: LearningTaskWhereUniqueInput | LearningTaskWhereUniqueInput[]
    delete?: LearningTaskWhereUniqueInput | LearningTaskWhereUniqueInput[]
    connect?: LearningTaskWhereUniqueInput | LearningTaskWhereUniqueInput[]
    update?: LearningTaskUpdateWithWhereUniqueWithoutLearningPlanInput | LearningTaskUpdateWithWhereUniqueWithoutLearningPlanInput[]
    updateMany?: LearningTaskUpdateManyWithWhereWithoutLearningPlanInput | LearningTaskUpdateManyWithWhereWithoutLearningPlanInput[]
    deleteMany?: LearningTaskScalarWhereInput | LearningTaskScalarWhereInput[]
  }

  export type PlanRevisionUpdateManyWithoutLearningPlanNestedInput = {
    create?: XOR<PlanRevisionCreateWithoutLearningPlanInput, PlanRevisionUncheckedCreateWithoutLearningPlanInput> | PlanRevisionCreateWithoutLearningPlanInput[] | PlanRevisionUncheckedCreateWithoutLearningPlanInput[]
    connectOrCreate?: PlanRevisionCreateOrConnectWithoutLearningPlanInput | PlanRevisionCreateOrConnectWithoutLearningPlanInput[]
    upsert?: PlanRevisionUpsertWithWhereUniqueWithoutLearningPlanInput | PlanRevisionUpsertWithWhereUniqueWithoutLearningPlanInput[]
    createMany?: PlanRevisionCreateManyLearningPlanInputEnvelope
    set?: PlanRevisionWhereUniqueInput | PlanRevisionWhereUniqueInput[]
    disconnect?: PlanRevisionWhereUniqueInput | PlanRevisionWhereUniqueInput[]
    delete?: PlanRevisionWhereUniqueInput | PlanRevisionWhereUniqueInput[]
    connect?: PlanRevisionWhereUniqueInput | PlanRevisionWhereUniqueInput[]
    update?: PlanRevisionUpdateWithWhereUniqueWithoutLearningPlanInput | PlanRevisionUpdateWithWhereUniqueWithoutLearningPlanInput[]
    updateMany?: PlanRevisionUpdateManyWithWhereWithoutLearningPlanInput | PlanRevisionUpdateManyWithWhereWithoutLearningPlanInput[]
    deleteMany?: PlanRevisionScalarWhereInput | PlanRevisionScalarWhereInput[]
  }

  export type LearningTaskUncheckedUpdateManyWithoutLearningPlanNestedInput = {
    create?: XOR<LearningTaskCreateWithoutLearningPlanInput, LearningTaskUncheckedCreateWithoutLearningPlanInput> | LearningTaskCreateWithoutLearningPlanInput[] | LearningTaskUncheckedCreateWithoutLearningPlanInput[]
    connectOrCreate?: LearningTaskCreateOrConnectWithoutLearningPlanInput | LearningTaskCreateOrConnectWithoutLearningPlanInput[]
    upsert?: LearningTaskUpsertWithWhereUniqueWithoutLearningPlanInput | LearningTaskUpsertWithWhereUniqueWithoutLearningPlanInput[]
    createMany?: LearningTaskCreateManyLearningPlanInputEnvelope
    set?: LearningTaskWhereUniqueInput | LearningTaskWhereUniqueInput[]
    disconnect?: LearningTaskWhereUniqueInput | LearningTaskWhereUniqueInput[]
    delete?: LearningTaskWhereUniqueInput | LearningTaskWhereUniqueInput[]
    connect?: LearningTaskWhereUniqueInput | LearningTaskWhereUniqueInput[]
    update?: LearningTaskUpdateWithWhereUniqueWithoutLearningPlanInput | LearningTaskUpdateWithWhereUniqueWithoutLearningPlanInput[]
    updateMany?: LearningTaskUpdateManyWithWhereWithoutLearningPlanInput | LearningTaskUpdateManyWithWhereWithoutLearningPlanInput[]
    deleteMany?: LearningTaskScalarWhereInput | LearningTaskScalarWhereInput[]
  }

  export type PlanRevisionUncheckedUpdateManyWithoutLearningPlanNestedInput = {
    create?: XOR<PlanRevisionCreateWithoutLearningPlanInput, PlanRevisionUncheckedCreateWithoutLearningPlanInput> | PlanRevisionCreateWithoutLearningPlanInput[] | PlanRevisionUncheckedCreateWithoutLearningPlanInput[]
    connectOrCreate?: PlanRevisionCreateOrConnectWithoutLearningPlanInput | PlanRevisionCreateOrConnectWithoutLearningPlanInput[]
    upsert?: PlanRevisionUpsertWithWhereUniqueWithoutLearningPlanInput | PlanRevisionUpsertWithWhereUniqueWithoutLearningPlanInput[]
    createMany?: PlanRevisionCreateManyLearningPlanInputEnvelope
    set?: PlanRevisionWhereUniqueInput | PlanRevisionWhereUniqueInput[]
    disconnect?: PlanRevisionWhereUniqueInput | PlanRevisionWhereUniqueInput[]
    delete?: PlanRevisionWhereUniqueInput | PlanRevisionWhereUniqueInput[]
    connect?: PlanRevisionWhereUniqueInput | PlanRevisionWhereUniqueInput[]
    update?: PlanRevisionUpdateWithWhereUniqueWithoutLearningPlanInput | PlanRevisionUpdateWithWhereUniqueWithoutLearningPlanInput[]
    updateMany?: PlanRevisionUpdateManyWithWhereWithoutLearningPlanInput | PlanRevisionUpdateManyWithWhereWithoutLearningPlanInput[]
    deleteMany?: PlanRevisionScalarWhereInput | PlanRevisionScalarWhereInput[]
  }

  export type LearningPlanCreateNestedOneWithoutLearningTasksInput = {
    create?: XOR<LearningPlanCreateWithoutLearningTasksInput, LearningPlanUncheckedCreateWithoutLearningTasksInput>
    connectOrCreate?: LearningPlanCreateOrConnectWithoutLearningTasksInput
    connect?: LearningPlanWhereUniqueInput
  }

  export type QuestionCreateNestedOneWithoutLearningTasksInput = {
    create?: XOR<QuestionCreateWithoutLearningTasksInput, QuestionUncheckedCreateWithoutLearningTasksInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutLearningTasksInput
    connect?: QuestionWhereUniqueInput
  }

  export type LearningPlanUpdateOneRequiredWithoutLearningTasksNestedInput = {
    create?: XOR<LearningPlanCreateWithoutLearningTasksInput, LearningPlanUncheckedCreateWithoutLearningTasksInput>
    connectOrCreate?: LearningPlanCreateOrConnectWithoutLearningTasksInput
    upsert?: LearningPlanUpsertWithoutLearningTasksInput
    connect?: LearningPlanWhereUniqueInput
    update?: XOR<XOR<LearningPlanUpdateToOneWithWhereWithoutLearningTasksInput, LearningPlanUpdateWithoutLearningTasksInput>, LearningPlanUncheckedUpdateWithoutLearningTasksInput>
  }

  export type QuestionUpdateOneRequiredWithoutLearningTasksNestedInput = {
    create?: XOR<QuestionCreateWithoutLearningTasksInput, QuestionUncheckedCreateWithoutLearningTasksInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutLearningTasksInput
    upsert?: QuestionUpsertWithoutLearningTasksInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutLearningTasksInput, QuestionUpdateWithoutLearningTasksInput>, QuestionUncheckedUpdateWithoutLearningTasksInput>
  }

  export type UserCreateNestedOneWithoutAttemptLogsInput = {
    create?: XOR<UserCreateWithoutAttemptLogsInput, UserUncheckedCreateWithoutAttemptLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttemptLogsInput
    connect?: UserWhereUniqueInput
  }

  export type QuestionCreateNestedOneWithoutAttemptLogsInput = {
    create?: XOR<QuestionCreateWithoutAttemptLogsInput, QuestionUncheckedCreateWithoutAttemptLogsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutAttemptLogsInput
    connect?: QuestionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAttemptLogsNestedInput = {
    create?: XOR<UserCreateWithoutAttemptLogsInput, UserUncheckedCreateWithoutAttemptLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttemptLogsInput
    upsert?: UserUpsertWithoutAttemptLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAttemptLogsInput, UserUpdateWithoutAttemptLogsInput>, UserUncheckedUpdateWithoutAttemptLogsInput>
  }

  export type QuestionUpdateOneRequiredWithoutAttemptLogsNestedInput = {
    create?: XOR<QuestionCreateWithoutAttemptLogsInput, QuestionUncheckedCreateWithoutAttemptLogsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutAttemptLogsInput
    upsert?: QuestionUpsertWithoutAttemptLogsInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutAttemptLogsInput, QuestionUpdateWithoutAttemptLogsInput>, QuestionUncheckedUpdateWithoutAttemptLogsInput>
  }

  export type PlanRevisionCreateselectedStatusesInput = {
    set: string[]
  }

  export type LearningPlanCreateNestedOneWithoutPlanRevisionsInput = {
    create?: XOR<LearningPlanCreateWithoutPlanRevisionsInput, LearningPlanUncheckedCreateWithoutPlanRevisionsInput>
    connectOrCreate?: LearningPlanCreateOrConnectWithoutPlanRevisionsInput
    connect?: LearningPlanWhereUniqueInput
  }

  export type PlanRevisionUpdateselectedStatusesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type LearningPlanUpdateOneRequiredWithoutPlanRevisionsNestedInput = {
    create?: XOR<LearningPlanCreateWithoutPlanRevisionsInput, LearningPlanUncheckedCreateWithoutPlanRevisionsInput>
    connectOrCreate?: LearningPlanCreateOrConnectWithoutPlanRevisionsInput
    upsert?: LearningPlanUpsertWithoutPlanRevisionsInput
    connect?: LearningPlanWhereUniqueInput
    update?: XOR<XOR<LearningPlanUpdateToOneWithWhereWithoutPlanRevisionsInput, LearningPlanUpdateWithoutPlanRevisionsInput>, LearningPlanUncheckedUpdateWithoutPlanRevisionsInput>
  }

  export type UserCreateNestedOneWithoutDailyReflectionsInput = {
    create?: XOR<UserCreateWithoutDailyReflectionsInput, UserUncheckedCreateWithoutDailyReflectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDailyReflectionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDailyReflectionsNestedInput = {
    create?: XOR<UserCreateWithoutDailyReflectionsInput, UserUncheckedCreateWithoutDailyReflectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDailyReflectionsInput
    upsert?: UserUpsertWithoutDailyReflectionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDailyReflectionsInput, UserUpdateWithoutDailyReflectionsInput>, UserUncheckedUpdateWithoutDailyReflectionsInput>
  }

  export type UserCreateNestedOneWithoutWeeklyReflectionsInput = {
    create?: XOR<UserCreateWithoutWeeklyReflectionsInput, UserUncheckedCreateWithoutWeeklyReflectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWeeklyReflectionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutWeeklyReflectionsNestedInput = {
    create?: XOR<UserCreateWithoutWeeklyReflectionsInput, UserUncheckedCreateWithoutWeeklyReflectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWeeklyReflectionsInput
    upsert?: UserUpsertWithoutWeeklyReflectionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWeeklyReflectionsInput, UserUpdateWithoutWeeklyReflectionsInput>, UserUncheckedUpdateWithoutWeeklyReflectionsInput>
  }

  export type UserCreateNestedOneWithoutValuePromptsInput = {
    create?: XOR<UserCreateWithoutValuePromptsInput, UserUncheckedCreateWithoutValuePromptsInput>
    connectOrCreate?: UserCreateOrConnectWithoutValuePromptsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutValuePromptsNestedInput = {
    create?: XOR<UserCreateWithoutValuePromptsInput, UserUncheckedCreateWithoutValuePromptsInput>
    connectOrCreate?: UserCreateOrConnectWithoutValuePromptsInput
    upsert?: UserUpsertWithoutValuePromptsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutValuePromptsInput, UserUpdateWithoutValuePromptsInput>, UserUncheckedUpdateWithoutValuePromptsInput>
  }

  export type UserCreateNestedOneWithoutReflectionBadgesInput = {
    create?: XOR<UserCreateWithoutReflectionBadgesInput, UserUncheckedCreateWithoutReflectionBadgesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReflectionBadgesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReflectionBadgesNestedInput = {
    create?: XOR<UserCreateWithoutReflectionBadgesInput, UserUncheckedCreateWithoutReflectionBadgesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReflectionBadgesInput
    upsert?: UserUpsertWithoutReflectionBadgesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReflectionBadgesInput, UserUpdateWithoutReflectionBadgesInput>, UserUncheckedUpdateWithoutReflectionBadgesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserCreateWithoutAvatarInput = {
    id?: string
    email: string
    displayName: string
    onboardingCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    goals?: GoalCreateNestedManyWithoutUserInput
    learningPlans?: LearningPlanCreateNestedManyWithoutUserInput
    attemptLogs?: QuestionAttemptLogCreateNestedManyWithoutUserInput
    dailyReflections?: DailyReflectionCreateNestedManyWithoutUserInput
    weeklyReflections?: WeeklyReflectionCreateNestedManyWithoutUserInput
    valuePrompts?: ValuePromptCreateNestedManyWithoutUserInput
    reflectionBadges?: ReflectionBadgeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAvatarInput = {
    id?: string
    email: string
    displayName: string
    onboardingCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    learningPlans?: LearningPlanUncheckedCreateNestedManyWithoutUserInput
    attemptLogs?: QuestionAttemptLogUncheckedCreateNestedManyWithoutUserInput
    dailyReflections?: DailyReflectionUncheckedCreateNestedManyWithoutUserInput
    weeklyReflections?: WeeklyReflectionUncheckedCreateNestedManyWithoutUserInput
    valuePrompts?: ValuePromptUncheckedCreateNestedManyWithoutUserInput
    reflectionBadges?: ReflectionBadgeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAvatarInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput>
  }

  export type UserCreateManyAvatarInputEnvelope = {
    data: UserCreateManyAvatarInput | UserCreateManyAvatarInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutAvatarInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAvatarInput, UserUncheckedUpdateWithoutAvatarInput>
    create: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAvatarInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAvatarInput, UserUncheckedUpdateWithoutAvatarInput>
  }

  export type UserUpdateManyWithWhereWithoutAvatarInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAvatarInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    displayName?: StringFilter<"User"> | string
    avatarKey?: StringNullableFilter<"User"> | string | null
    onboardingCompleted?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type AvatarCreateWithoutUsersInput = {
    id: string
    label: string
    imagePath: string
  }

  export type AvatarUncheckedCreateWithoutUsersInput = {
    id: string
    label: string
    imagePath: string
  }

  export type AvatarCreateOrConnectWithoutUsersInput = {
    where: AvatarWhereUniqueInput
    create: XOR<AvatarCreateWithoutUsersInput, AvatarUncheckedCreateWithoutUsersInput>
  }

  export type GoalCreateWithoutUserInput = {
    id?: string
    testName: string
    testStartDate: Date | string
    testEndDate: Date | string
    totalStudents: number
    targetRank: number
    reasonType: string
    reasonText: string
    createdAt?: Date | string
    updatedAt?: Date | string
    learningPlans?: LearningPlanCreateNestedManyWithoutGoalInput
  }

  export type GoalUncheckedCreateWithoutUserInput = {
    id?: string
    testName: string
    testStartDate: Date | string
    testEndDate: Date | string
    totalStudents: number
    targetRank: number
    reasonType: string
    reasonText: string
    createdAt?: Date | string
    updatedAt?: Date | string
    learningPlans?: LearningPlanUncheckedCreateNestedManyWithoutGoalInput
  }

  export type GoalCreateOrConnectWithoutUserInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput>
  }

  export type GoalCreateManyUserInputEnvelope = {
    data: GoalCreateManyUserInput | GoalCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LearningPlanCreateWithoutUserInput = {
    id?: string
    generatedBy: string
    maxDays: number
    baseDays: number
    finalStudyDate: Date | string
    reviewDays: number
    reviewWeekdays?: LearningPlanCreatereviewWeekdaysInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    goal: GoalCreateNestedOneWithoutLearningPlansInput
    learningTasks?: LearningTaskCreateNestedManyWithoutLearningPlanInput
    planRevisions?: PlanRevisionCreateNestedManyWithoutLearningPlanInput
  }

  export type LearningPlanUncheckedCreateWithoutUserInput = {
    id?: string
    goalId: string
    generatedBy: string
    maxDays: number
    baseDays: number
    finalStudyDate: Date | string
    reviewDays: number
    reviewWeekdays?: LearningPlanCreatereviewWeekdaysInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    learningTasks?: LearningTaskUncheckedCreateNestedManyWithoutLearningPlanInput
    planRevisions?: PlanRevisionUncheckedCreateNestedManyWithoutLearningPlanInput
  }

  export type LearningPlanCreateOrConnectWithoutUserInput = {
    where: LearningPlanWhereUniqueInput
    create: XOR<LearningPlanCreateWithoutUserInput, LearningPlanUncheckedCreateWithoutUserInput>
  }

  export type LearningPlanCreateManyUserInputEnvelope = {
    data: LearningPlanCreateManyUserInput | LearningPlanCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type QuestionAttemptLogCreateWithoutUserInput = {
    id?: string
    date: Date | string
    status: string
    source: string
    updatedAt?: Date | string
    question: QuestionCreateNestedOneWithoutAttemptLogsInput
  }

  export type QuestionAttemptLogUncheckedCreateWithoutUserInput = {
    id?: string
    questionId: string
    date: Date | string
    status: string
    source: string
    updatedAt?: Date | string
  }

  export type QuestionAttemptLogCreateOrConnectWithoutUserInput = {
    where: QuestionAttemptLogWhereUniqueInput
    create: XOR<QuestionAttemptLogCreateWithoutUserInput, QuestionAttemptLogUncheckedCreateWithoutUserInput>
  }

  export type QuestionAttemptLogCreateManyUserInputEnvelope = {
    data: QuestionAttemptLogCreateManyUserInput | QuestionAttemptLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DailyReflectionCreateWithoutUserInput = {
    id?: string
    date: Date | string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailyReflectionUncheckedCreateWithoutUserInput = {
    id?: string
    date: Date | string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailyReflectionCreateOrConnectWithoutUserInput = {
    where: DailyReflectionWhereUniqueInput
    create: XOR<DailyReflectionCreateWithoutUserInput, DailyReflectionUncheckedCreateWithoutUserInput>
  }

  export type DailyReflectionCreateManyUserInputEnvelope = {
    data: DailyReflectionCreateManyUserInput | DailyReflectionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WeeklyReflectionCreateWithoutUserInput = {
    id?: string
    weekStart: Date | string
    weekEnd: Date | string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WeeklyReflectionUncheckedCreateWithoutUserInput = {
    id?: string
    weekStart: Date | string
    weekEnd: Date | string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WeeklyReflectionCreateOrConnectWithoutUserInput = {
    where: WeeklyReflectionWhereUniqueInput
    create: XOR<WeeklyReflectionCreateWithoutUserInput, WeeklyReflectionUncheckedCreateWithoutUserInput>
  }

  export type WeeklyReflectionCreateManyUserInputEnvelope = {
    data: WeeklyReflectionCreateManyUserInput | WeeklyReflectionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ValuePromptCreateWithoutUserInput = {
    id?: string
    promptType: string
    content: string
    response?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValuePromptUncheckedCreateWithoutUserInput = {
    id?: string
    promptType: string
    content: string
    response?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValuePromptCreateOrConnectWithoutUserInput = {
    where: ValuePromptWhereUniqueInput
    create: XOR<ValuePromptCreateWithoutUserInput, ValuePromptUncheckedCreateWithoutUserInput>
  }

  export type ValuePromptCreateManyUserInputEnvelope = {
    data: ValuePromptCreateManyUserInput | ValuePromptCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReflectionBadgeCreateWithoutUserInput = {
    id?: string
    badgeType: string
    awardedAt?: Date | string
  }

  export type ReflectionBadgeUncheckedCreateWithoutUserInput = {
    id?: string
    badgeType: string
    awardedAt?: Date | string
  }

  export type ReflectionBadgeCreateOrConnectWithoutUserInput = {
    where: ReflectionBadgeWhereUniqueInput
    create: XOR<ReflectionBadgeCreateWithoutUserInput, ReflectionBadgeUncheckedCreateWithoutUserInput>
  }

  export type ReflectionBadgeCreateManyUserInputEnvelope = {
    data: ReflectionBadgeCreateManyUserInput | ReflectionBadgeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AvatarUpsertWithoutUsersInput = {
    update: XOR<AvatarUpdateWithoutUsersInput, AvatarUncheckedUpdateWithoutUsersInput>
    create: XOR<AvatarCreateWithoutUsersInput, AvatarUncheckedCreateWithoutUsersInput>
    where?: AvatarWhereInput
  }

  export type AvatarUpdateToOneWithWhereWithoutUsersInput = {
    where?: AvatarWhereInput
    data: XOR<AvatarUpdateWithoutUsersInput, AvatarUncheckedUpdateWithoutUsersInput>
  }

  export type AvatarUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
  }

  export type AvatarUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
  }

  export type GoalUpsertWithWhereUniqueWithoutUserInput = {
    where: GoalWhereUniqueInput
    update: XOR<GoalUpdateWithoutUserInput, GoalUncheckedUpdateWithoutUserInput>
    create: XOR<GoalCreateWithoutUserInput, GoalUncheckedCreateWithoutUserInput>
  }

  export type GoalUpdateWithWhereUniqueWithoutUserInput = {
    where: GoalWhereUniqueInput
    data: XOR<GoalUpdateWithoutUserInput, GoalUncheckedUpdateWithoutUserInput>
  }

  export type GoalUpdateManyWithWhereWithoutUserInput = {
    where: GoalScalarWhereInput
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyWithoutUserInput>
  }

  export type GoalScalarWhereInput = {
    AND?: GoalScalarWhereInput | GoalScalarWhereInput[]
    OR?: GoalScalarWhereInput[]
    NOT?: GoalScalarWhereInput | GoalScalarWhereInput[]
    id?: StringFilter<"Goal"> | string
    userId?: StringFilter<"Goal"> | string
    testName?: StringFilter<"Goal"> | string
    testStartDate?: DateTimeFilter<"Goal"> | Date | string
    testEndDate?: DateTimeFilter<"Goal"> | Date | string
    totalStudents?: IntFilter<"Goal"> | number
    targetRank?: IntFilter<"Goal"> | number
    reasonType?: StringFilter<"Goal"> | string
    reasonText?: StringFilter<"Goal"> | string
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
  }

  export type LearningPlanUpsertWithWhereUniqueWithoutUserInput = {
    where: LearningPlanWhereUniqueInput
    update: XOR<LearningPlanUpdateWithoutUserInput, LearningPlanUncheckedUpdateWithoutUserInput>
    create: XOR<LearningPlanCreateWithoutUserInput, LearningPlanUncheckedCreateWithoutUserInput>
  }

  export type LearningPlanUpdateWithWhereUniqueWithoutUserInput = {
    where: LearningPlanWhereUniqueInput
    data: XOR<LearningPlanUpdateWithoutUserInput, LearningPlanUncheckedUpdateWithoutUserInput>
  }

  export type LearningPlanUpdateManyWithWhereWithoutUserInput = {
    where: LearningPlanScalarWhereInput
    data: XOR<LearningPlanUpdateManyMutationInput, LearningPlanUncheckedUpdateManyWithoutUserInput>
  }

  export type LearningPlanScalarWhereInput = {
    AND?: LearningPlanScalarWhereInput | LearningPlanScalarWhereInput[]
    OR?: LearningPlanScalarWhereInput[]
    NOT?: LearningPlanScalarWhereInput | LearningPlanScalarWhereInput[]
    id?: StringFilter<"LearningPlan"> | string
    userId?: StringFilter<"LearningPlan"> | string
    goalId?: StringFilter<"LearningPlan"> | string
    generatedBy?: StringFilter<"LearningPlan"> | string
    maxDays?: IntFilter<"LearningPlan"> | number
    baseDays?: IntFilter<"LearningPlan"> | number
    finalStudyDate?: DateTimeFilter<"LearningPlan"> | Date | string
    reviewDays?: IntFilter<"LearningPlan"> | number
    reviewWeekdays?: StringNullableListFilter<"LearningPlan">
    createdAt?: DateTimeFilter<"LearningPlan"> | Date | string
    updatedAt?: DateTimeFilter<"LearningPlan"> | Date | string
  }

  export type QuestionAttemptLogUpsertWithWhereUniqueWithoutUserInput = {
    where: QuestionAttemptLogWhereUniqueInput
    update: XOR<QuestionAttemptLogUpdateWithoutUserInput, QuestionAttemptLogUncheckedUpdateWithoutUserInput>
    create: XOR<QuestionAttemptLogCreateWithoutUserInput, QuestionAttemptLogUncheckedCreateWithoutUserInput>
  }

  export type QuestionAttemptLogUpdateWithWhereUniqueWithoutUserInput = {
    where: QuestionAttemptLogWhereUniqueInput
    data: XOR<QuestionAttemptLogUpdateWithoutUserInput, QuestionAttemptLogUncheckedUpdateWithoutUserInput>
  }

  export type QuestionAttemptLogUpdateManyWithWhereWithoutUserInput = {
    where: QuestionAttemptLogScalarWhereInput
    data: XOR<QuestionAttemptLogUpdateManyMutationInput, QuestionAttemptLogUncheckedUpdateManyWithoutUserInput>
  }

  export type QuestionAttemptLogScalarWhereInput = {
    AND?: QuestionAttemptLogScalarWhereInput | QuestionAttemptLogScalarWhereInput[]
    OR?: QuestionAttemptLogScalarWhereInput[]
    NOT?: QuestionAttemptLogScalarWhereInput | QuestionAttemptLogScalarWhereInput[]
    id?: StringFilter<"QuestionAttemptLog"> | string
    userId?: StringFilter<"QuestionAttemptLog"> | string
    questionId?: StringFilter<"QuestionAttemptLog"> | string
    date?: DateTimeFilter<"QuestionAttemptLog"> | Date | string
    status?: StringFilter<"QuestionAttemptLog"> | string
    source?: StringFilter<"QuestionAttemptLog"> | string
    updatedAt?: DateTimeFilter<"QuestionAttemptLog"> | Date | string
  }

  export type DailyReflectionUpsertWithWhereUniqueWithoutUserInput = {
    where: DailyReflectionWhereUniqueInput
    update: XOR<DailyReflectionUpdateWithoutUserInput, DailyReflectionUncheckedUpdateWithoutUserInput>
    create: XOR<DailyReflectionCreateWithoutUserInput, DailyReflectionUncheckedCreateWithoutUserInput>
  }

  export type DailyReflectionUpdateWithWhereUniqueWithoutUserInput = {
    where: DailyReflectionWhereUniqueInput
    data: XOR<DailyReflectionUpdateWithoutUserInput, DailyReflectionUncheckedUpdateWithoutUserInput>
  }

  export type DailyReflectionUpdateManyWithWhereWithoutUserInput = {
    where: DailyReflectionScalarWhereInput
    data: XOR<DailyReflectionUpdateManyMutationInput, DailyReflectionUncheckedUpdateManyWithoutUserInput>
  }

  export type DailyReflectionScalarWhereInput = {
    AND?: DailyReflectionScalarWhereInput | DailyReflectionScalarWhereInput[]
    OR?: DailyReflectionScalarWhereInput[]
    NOT?: DailyReflectionScalarWhereInput | DailyReflectionScalarWhereInput[]
    id?: StringFilter<"DailyReflection"> | string
    userId?: StringFilter<"DailyReflection"> | string
    date?: DateTimeFilter<"DailyReflection"> | Date | string
    content?: StringFilter<"DailyReflection"> | string
    createdAt?: DateTimeFilter<"DailyReflection"> | Date | string
    updatedAt?: DateTimeFilter<"DailyReflection"> | Date | string
  }

  export type WeeklyReflectionUpsertWithWhereUniqueWithoutUserInput = {
    where: WeeklyReflectionWhereUniqueInput
    update: XOR<WeeklyReflectionUpdateWithoutUserInput, WeeklyReflectionUncheckedUpdateWithoutUserInput>
    create: XOR<WeeklyReflectionCreateWithoutUserInput, WeeklyReflectionUncheckedCreateWithoutUserInput>
  }

  export type WeeklyReflectionUpdateWithWhereUniqueWithoutUserInput = {
    where: WeeklyReflectionWhereUniqueInput
    data: XOR<WeeklyReflectionUpdateWithoutUserInput, WeeklyReflectionUncheckedUpdateWithoutUserInput>
  }

  export type WeeklyReflectionUpdateManyWithWhereWithoutUserInput = {
    where: WeeklyReflectionScalarWhereInput
    data: XOR<WeeklyReflectionUpdateManyMutationInput, WeeklyReflectionUncheckedUpdateManyWithoutUserInput>
  }

  export type WeeklyReflectionScalarWhereInput = {
    AND?: WeeklyReflectionScalarWhereInput | WeeklyReflectionScalarWhereInput[]
    OR?: WeeklyReflectionScalarWhereInput[]
    NOT?: WeeklyReflectionScalarWhereInput | WeeklyReflectionScalarWhereInput[]
    id?: StringFilter<"WeeklyReflection"> | string
    userId?: StringFilter<"WeeklyReflection"> | string
    weekStart?: DateTimeFilter<"WeeklyReflection"> | Date | string
    weekEnd?: DateTimeFilter<"WeeklyReflection"> | Date | string
    content?: StringFilter<"WeeklyReflection"> | string
    createdAt?: DateTimeFilter<"WeeklyReflection"> | Date | string
    updatedAt?: DateTimeFilter<"WeeklyReflection"> | Date | string
  }

  export type ValuePromptUpsertWithWhereUniqueWithoutUserInput = {
    where: ValuePromptWhereUniqueInput
    update: XOR<ValuePromptUpdateWithoutUserInput, ValuePromptUncheckedUpdateWithoutUserInput>
    create: XOR<ValuePromptCreateWithoutUserInput, ValuePromptUncheckedCreateWithoutUserInput>
  }

  export type ValuePromptUpdateWithWhereUniqueWithoutUserInput = {
    where: ValuePromptWhereUniqueInput
    data: XOR<ValuePromptUpdateWithoutUserInput, ValuePromptUncheckedUpdateWithoutUserInput>
  }

  export type ValuePromptUpdateManyWithWhereWithoutUserInput = {
    where: ValuePromptScalarWhereInput
    data: XOR<ValuePromptUpdateManyMutationInput, ValuePromptUncheckedUpdateManyWithoutUserInput>
  }

  export type ValuePromptScalarWhereInput = {
    AND?: ValuePromptScalarWhereInput | ValuePromptScalarWhereInput[]
    OR?: ValuePromptScalarWhereInput[]
    NOT?: ValuePromptScalarWhereInput | ValuePromptScalarWhereInput[]
    id?: StringFilter<"ValuePrompt"> | string
    userId?: StringFilter<"ValuePrompt"> | string
    promptType?: StringFilter<"ValuePrompt"> | string
    content?: StringFilter<"ValuePrompt"> | string
    response?: StringNullableFilter<"ValuePrompt"> | string | null
    createdAt?: DateTimeFilter<"ValuePrompt"> | Date | string
    updatedAt?: DateTimeFilter<"ValuePrompt"> | Date | string
  }

  export type ReflectionBadgeUpsertWithWhereUniqueWithoutUserInput = {
    where: ReflectionBadgeWhereUniqueInput
    update: XOR<ReflectionBadgeUpdateWithoutUserInput, ReflectionBadgeUncheckedUpdateWithoutUserInput>
    create: XOR<ReflectionBadgeCreateWithoutUserInput, ReflectionBadgeUncheckedCreateWithoutUserInput>
  }

  export type ReflectionBadgeUpdateWithWhereUniqueWithoutUserInput = {
    where: ReflectionBadgeWhereUniqueInput
    data: XOR<ReflectionBadgeUpdateWithoutUserInput, ReflectionBadgeUncheckedUpdateWithoutUserInput>
  }

  export type ReflectionBadgeUpdateManyWithWhereWithoutUserInput = {
    where: ReflectionBadgeScalarWhereInput
    data: XOR<ReflectionBadgeUpdateManyMutationInput, ReflectionBadgeUncheckedUpdateManyWithoutUserInput>
  }

  export type ReflectionBadgeScalarWhereInput = {
    AND?: ReflectionBadgeScalarWhereInput | ReflectionBadgeScalarWhereInput[]
    OR?: ReflectionBadgeScalarWhereInput[]
    NOT?: ReflectionBadgeScalarWhereInput | ReflectionBadgeScalarWhereInput[]
    id?: StringFilter<"ReflectionBadge"> | string
    userId?: StringFilter<"ReflectionBadge"> | string
    badgeType?: StringFilter<"ReflectionBadge"> | string
    awardedAt?: DateTimeFilter<"ReflectionBadge"> | Date | string
  }

  export type UserCreateWithoutGoalsInput = {
    id?: string
    email: string
    displayName: string
    onboardingCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: AvatarCreateNestedOneWithoutUsersInput
    learningPlans?: LearningPlanCreateNestedManyWithoutUserInput
    attemptLogs?: QuestionAttemptLogCreateNestedManyWithoutUserInput
    dailyReflections?: DailyReflectionCreateNestedManyWithoutUserInput
    weeklyReflections?: WeeklyReflectionCreateNestedManyWithoutUserInput
    valuePrompts?: ValuePromptCreateNestedManyWithoutUserInput
    reflectionBadges?: ReflectionBadgeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGoalsInput = {
    id?: string
    email: string
    displayName: string
    avatarKey?: string | null
    onboardingCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    learningPlans?: LearningPlanUncheckedCreateNestedManyWithoutUserInput
    attemptLogs?: QuestionAttemptLogUncheckedCreateNestedManyWithoutUserInput
    dailyReflections?: DailyReflectionUncheckedCreateNestedManyWithoutUserInput
    weeklyReflections?: WeeklyReflectionUncheckedCreateNestedManyWithoutUserInput
    valuePrompts?: ValuePromptUncheckedCreateNestedManyWithoutUserInput
    reflectionBadges?: ReflectionBadgeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGoalsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGoalsInput, UserUncheckedCreateWithoutGoalsInput>
  }

  export type LearningPlanCreateWithoutGoalInput = {
    id?: string
    generatedBy: string
    maxDays: number
    baseDays: number
    finalStudyDate: Date | string
    reviewDays: number
    reviewWeekdays?: LearningPlanCreatereviewWeekdaysInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutLearningPlansInput
    learningTasks?: LearningTaskCreateNestedManyWithoutLearningPlanInput
    planRevisions?: PlanRevisionCreateNestedManyWithoutLearningPlanInput
  }

  export type LearningPlanUncheckedCreateWithoutGoalInput = {
    id?: string
    userId: string
    generatedBy: string
    maxDays: number
    baseDays: number
    finalStudyDate: Date | string
    reviewDays: number
    reviewWeekdays?: LearningPlanCreatereviewWeekdaysInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    learningTasks?: LearningTaskUncheckedCreateNestedManyWithoutLearningPlanInput
    planRevisions?: PlanRevisionUncheckedCreateNestedManyWithoutLearningPlanInput
  }

  export type LearningPlanCreateOrConnectWithoutGoalInput = {
    where: LearningPlanWhereUniqueInput
    create: XOR<LearningPlanCreateWithoutGoalInput, LearningPlanUncheckedCreateWithoutGoalInput>
  }

  export type LearningPlanCreateManyGoalInputEnvelope = {
    data: LearningPlanCreateManyGoalInput | LearningPlanCreateManyGoalInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutGoalsInput = {
    update: XOR<UserUpdateWithoutGoalsInput, UserUncheckedUpdateWithoutGoalsInput>
    create: XOR<UserCreateWithoutGoalsInput, UserUncheckedCreateWithoutGoalsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGoalsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGoalsInput, UserUncheckedUpdateWithoutGoalsInput>
  }

  export type UserUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: AvatarUpdateOneWithoutUsersNestedInput
    learningPlans?: LearningPlanUpdateManyWithoutUserNestedInput
    attemptLogs?: QuestionAttemptLogUpdateManyWithoutUserNestedInput
    dailyReflections?: DailyReflectionUpdateManyWithoutUserNestedInput
    weeklyReflections?: WeeklyReflectionUpdateManyWithoutUserNestedInput
    valuePrompts?: ValuePromptUpdateManyWithoutUserNestedInput
    reflectionBadges?: ReflectionBadgeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    avatarKey?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    learningPlans?: LearningPlanUncheckedUpdateManyWithoutUserNestedInput
    attemptLogs?: QuestionAttemptLogUncheckedUpdateManyWithoutUserNestedInput
    dailyReflections?: DailyReflectionUncheckedUpdateManyWithoutUserNestedInput
    weeklyReflections?: WeeklyReflectionUncheckedUpdateManyWithoutUserNestedInput
    valuePrompts?: ValuePromptUncheckedUpdateManyWithoutUserNestedInput
    reflectionBadges?: ReflectionBadgeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LearningPlanUpsertWithWhereUniqueWithoutGoalInput = {
    where: LearningPlanWhereUniqueInput
    update: XOR<LearningPlanUpdateWithoutGoalInput, LearningPlanUncheckedUpdateWithoutGoalInput>
    create: XOR<LearningPlanCreateWithoutGoalInput, LearningPlanUncheckedCreateWithoutGoalInput>
  }

  export type LearningPlanUpdateWithWhereUniqueWithoutGoalInput = {
    where: LearningPlanWhereUniqueInput
    data: XOR<LearningPlanUpdateWithoutGoalInput, LearningPlanUncheckedUpdateWithoutGoalInput>
  }

  export type LearningPlanUpdateManyWithWhereWithoutGoalInput = {
    where: LearningPlanScalarWhereInput
    data: XOR<LearningPlanUpdateManyMutationInput, LearningPlanUncheckedUpdateManyWithoutGoalInput>
  }

  export type ChapterCreateWithoutTextbookInput = {
    id?: string
    title: string
    orderIndex: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: SectionCreateNestedManyWithoutChapterInput
  }

  export type ChapterUncheckedCreateWithoutTextbookInput = {
    id?: string
    title: string
    orderIndex: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: SectionUncheckedCreateNestedManyWithoutChapterInput
  }

  export type ChapterCreateOrConnectWithoutTextbookInput = {
    where: ChapterWhereUniqueInput
    create: XOR<ChapterCreateWithoutTextbookInput, ChapterUncheckedCreateWithoutTextbookInput>
  }

  export type ChapterCreateManyTextbookInputEnvelope = {
    data: ChapterCreateManyTextbookInput | ChapterCreateManyTextbookInput[]
    skipDuplicates?: boolean
  }

  export type ChapterUpsertWithWhereUniqueWithoutTextbookInput = {
    where: ChapterWhereUniqueInput
    update: XOR<ChapterUpdateWithoutTextbookInput, ChapterUncheckedUpdateWithoutTextbookInput>
    create: XOR<ChapterCreateWithoutTextbookInput, ChapterUncheckedCreateWithoutTextbookInput>
  }

  export type ChapterUpdateWithWhereUniqueWithoutTextbookInput = {
    where: ChapterWhereUniqueInput
    data: XOR<ChapterUpdateWithoutTextbookInput, ChapterUncheckedUpdateWithoutTextbookInput>
  }

  export type ChapterUpdateManyWithWhereWithoutTextbookInput = {
    where: ChapterScalarWhereInput
    data: XOR<ChapterUpdateManyMutationInput, ChapterUncheckedUpdateManyWithoutTextbookInput>
  }

  export type ChapterScalarWhereInput = {
    AND?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
    OR?: ChapterScalarWhereInput[]
    NOT?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
    id?: StringFilter<"Chapter"> | string
    textbookId?: StringFilter<"Chapter"> | string
    title?: StringFilter<"Chapter"> | string
    orderIndex?: IntFilter<"Chapter"> | number
    createdAt?: DateTimeFilter<"Chapter"> | Date | string
    updatedAt?: DateTimeFilter<"Chapter"> | Date | string
  }

  export type TextbookCreateWithoutChaptersInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TextbookUncheckedCreateWithoutChaptersInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TextbookCreateOrConnectWithoutChaptersInput = {
    where: TextbookWhereUniqueInput
    create: XOR<TextbookCreateWithoutChaptersInput, TextbookUncheckedCreateWithoutChaptersInput>
  }

  export type SectionCreateWithoutChapterInput = {
    id?: string
    title: string
    orderIndex: number
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: QuestionCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateWithoutChapterInput = {
    id?: string
    title: string
    orderIndex: number
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionCreateOrConnectWithoutChapterInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutChapterInput, SectionUncheckedCreateWithoutChapterInput>
  }

  export type SectionCreateManyChapterInputEnvelope = {
    data: SectionCreateManyChapterInput | SectionCreateManyChapterInput[]
    skipDuplicates?: boolean
  }

  export type TextbookUpsertWithoutChaptersInput = {
    update: XOR<TextbookUpdateWithoutChaptersInput, TextbookUncheckedUpdateWithoutChaptersInput>
    create: XOR<TextbookCreateWithoutChaptersInput, TextbookUncheckedCreateWithoutChaptersInput>
    where?: TextbookWhereInput
  }

  export type TextbookUpdateToOneWithWhereWithoutChaptersInput = {
    where?: TextbookWhereInput
    data: XOR<TextbookUpdateWithoutChaptersInput, TextbookUncheckedUpdateWithoutChaptersInput>
  }

  export type TextbookUpdateWithoutChaptersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TextbookUncheckedUpdateWithoutChaptersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionUpsertWithWhereUniqueWithoutChapterInput = {
    where: SectionWhereUniqueInput
    update: XOR<SectionUpdateWithoutChapterInput, SectionUncheckedUpdateWithoutChapterInput>
    create: XOR<SectionCreateWithoutChapterInput, SectionUncheckedCreateWithoutChapterInput>
  }

  export type SectionUpdateWithWhereUniqueWithoutChapterInput = {
    where: SectionWhereUniqueInput
    data: XOR<SectionUpdateWithoutChapterInput, SectionUncheckedUpdateWithoutChapterInput>
  }

  export type SectionUpdateManyWithWhereWithoutChapterInput = {
    where: SectionScalarWhereInput
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyWithoutChapterInput>
  }

  export type SectionScalarWhereInput = {
    AND?: SectionScalarWhereInput | SectionScalarWhereInput[]
    OR?: SectionScalarWhereInput[]
    NOT?: SectionScalarWhereInput | SectionScalarWhereInput[]
    id?: StringFilter<"Section"> | string
    chapterId?: StringFilter<"Section"> | string
    title?: StringFilter<"Section"> | string
    orderIndex?: IntFilter<"Section"> | number
    createdAt?: DateTimeFilter<"Section"> | Date | string
    updatedAt?: DateTimeFilter<"Section"> | Date | string
  }

  export type ChapterCreateWithoutSectionsInput = {
    id?: string
    title: string
    orderIndex: number
    createdAt?: Date | string
    updatedAt?: Date | string
    textbook: TextbookCreateNestedOneWithoutChaptersInput
  }

  export type ChapterUncheckedCreateWithoutSectionsInput = {
    id?: string
    textbookId: string
    title: string
    orderIndex: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChapterCreateOrConnectWithoutSectionsInput = {
    where: ChapterWhereUniqueInput
    create: XOR<ChapterCreateWithoutSectionsInput, ChapterUncheckedCreateWithoutSectionsInput>
  }

  export type QuestionCreateWithoutSectionInput = {
    id?: string
    content: string
    difficulty: number
    createdAt?: Date | string
    updatedAt?: Date | string
    learningTasks?: LearningTaskCreateNestedManyWithoutQuestionInput
    attemptLogs?: QuestionAttemptLogCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutSectionInput = {
    id?: string
    content: string
    difficulty: number
    createdAt?: Date | string
    updatedAt?: Date | string
    learningTasks?: LearningTaskUncheckedCreateNestedManyWithoutQuestionInput
    attemptLogs?: QuestionAttemptLogUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutSectionInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutSectionInput, QuestionUncheckedCreateWithoutSectionInput>
  }

  export type QuestionCreateManySectionInputEnvelope = {
    data: QuestionCreateManySectionInput | QuestionCreateManySectionInput[]
    skipDuplicates?: boolean
  }

  export type ChapterUpsertWithoutSectionsInput = {
    update: XOR<ChapterUpdateWithoutSectionsInput, ChapterUncheckedUpdateWithoutSectionsInput>
    create: XOR<ChapterCreateWithoutSectionsInput, ChapterUncheckedCreateWithoutSectionsInput>
    where?: ChapterWhereInput
  }

  export type ChapterUpdateToOneWithWhereWithoutSectionsInput = {
    where?: ChapterWhereInput
    data: XOR<ChapterUpdateWithoutSectionsInput, ChapterUncheckedUpdateWithoutSectionsInput>
  }

  export type ChapterUpdateWithoutSectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    textbook?: TextbookUpdateOneRequiredWithoutChaptersNestedInput
  }

  export type ChapterUncheckedUpdateWithoutSectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    textbookId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionUpsertWithWhereUniqueWithoutSectionInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutSectionInput, QuestionUncheckedUpdateWithoutSectionInput>
    create: XOR<QuestionCreateWithoutSectionInput, QuestionUncheckedCreateWithoutSectionInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutSectionInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutSectionInput, QuestionUncheckedUpdateWithoutSectionInput>
  }

  export type QuestionUpdateManyWithWhereWithoutSectionInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutSectionInput>
  }

  export type QuestionScalarWhereInput = {
    AND?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    OR?: QuestionScalarWhereInput[]
    NOT?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    id?: StringFilter<"Question"> | string
    sectionId?: StringFilter<"Question"> | string
    content?: StringFilter<"Question"> | string
    difficulty?: IntFilter<"Question"> | number
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
  }

  export type SectionCreateWithoutQuestionsInput = {
    id?: string
    title: string
    orderIndex: number
    createdAt?: Date | string
    updatedAt?: Date | string
    chapter: ChapterCreateNestedOneWithoutSectionsInput
  }

  export type SectionUncheckedCreateWithoutQuestionsInput = {
    id?: string
    chapterId: string
    title: string
    orderIndex: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SectionCreateOrConnectWithoutQuestionsInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutQuestionsInput, SectionUncheckedCreateWithoutQuestionsInput>
  }

  export type LearningTaskCreateWithoutQuestionInput = {
    id?: string
    date: Date | string
    orderInDay: number
    isReviewDay: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    learningPlan: LearningPlanCreateNestedOneWithoutLearningTasksInput
  }

  export type LearningTaskUncheckedCreateWithoutQuestionInput = {
    id?: string
    planId: string
    date: Date | string
    orderInDay: number
    isReviewDay: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LearningTaskCreateOrConnectWithoutQuestionInput = {
    where: LearningTaskWhereUniqueInput
    create: XOR<LearningTaskCreateWithoutQuestionInput, LearningTaskUncheckedCreateWithoutQuestionInput>
  }

  export type LearningTaskCreateManyQuestionInputEnvelope = {
    data: LearningTaskCreateManyQuestionInput | LearningTaskCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type QuestionAttemptLogCreateWithoutQuestionInput = {
    id?: string
    date: Date | string
    status: string
    source: string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAttemptLogsInput
  }

  export type QuestionAttemptLogUncheckedCreateWithoutQuestionInput = {
    id?: string
    userId: string
    date: Date | string
    status: string
    source: string
    updatedAt?: Date | string
  }

  export type QuestionAttemptLogCreateOrConnectWithoutQuestionInput = {
    where: QuestionAttemptLogWhereUniqueInput
    create: XOR<QuestionAttemptLogCreateWithoutQuestionInput, QuestionAttemptLogUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionAttemptLogCreateManyQuestionInputEnvelope = {
    data: QuestionAttemptLogCreateManyQuestionInput | QuestionAttemptLogCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type SectionUpsertWithoutQuestionsInput = {
    update: XOR<SectionUpdateWithoutQuestionsInput, SectionUncheckedUpdateWithoutQuestionsInput>
    create: XOR<SectionCreateWithoutQuestionsInput, SectionUncheckedCreateWithoutQuestionsInput>
    where?: SectionWhereInput
  }

  export type SectionUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: SectionWhereInput
    data: XOR<SectionUpdateWithoutQuestionsInput, SectionUncheckedUpdateWithoutQuestionsInput>
  }

  export type SectionUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chapter?: ChapterUpdateOneRequiredWithoutSectionsNestedInput
  }

  export type SectionUncheckedUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    chapterId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningTaskUpsertWithWhereUniqueWithoutQuestionInput = {
    where: LearningTaskWhereUniqueInput
    update: XOR<LearningTaskUpdateWithoutQuestionInput, LearningTaskUncheckedUpdateWithoutQuestionInput>
    create: XOR<LearningTaskCreateWithoutQuestionInput, LearningTaskUncheckedCreateWithoutQuestionInput>
  }

  export type LearningTaskUpdateWithWhereUniqueWithoutQuestionInput = {
    where: LearningTaskWhereUniqueInput
    data: XOR<LearningTaskUpdateWithoutQuestionInput, LearningTaskUncheckedUpdateWithoutQuestionInput>
  }

  export type LearningTaskUpdateManyWithWhereWithoutQuestionInput = {
    where: LearningTaskScalarWhereInput
    data: XOR<LearningTaskUpdateManyMutationInput, LearningTaskUncheckedUpdateManyWithoutQuestionInput>
  }

  export type LearningTaskScalarWhereInput = {
    AND?: LearningTaskScalarWhereInput | LearningTaskScalarWhereInput[]
    OR?: LearningTaskScalarWhereInput[]
    NOT?: LearningTaskScalarWhereInput | LearningTaskScalarWhereInput[]
    id?: StringFilter<"LearningTask"> | string
    planId?: StringFilter<"LearningTask"> | string
    date?: DateTimeFilter<"LearningTask"> | Date | string
    questionId?: StringFilter<"LearningTask"> | string
    orderInDay?: IntFilter<"LearningTask"> | number
    isReviewDay?: BoolFilter<"LearningTask"> | boolean
    createdAt?: DateTimeFilter<"LearningTask"> | Date | string
    updatedAt?: DateTimeFilter<"LearningTask"> | Date | string
  }

  export type QuestionAttemptLogUpsertWithWhereUniqueWithoutQuestionInput = {
    where: QuestionAttemptLogWhereUniqueInput
    update: XOR<QuestionAttemptLogUpdateWithoutQuestionInput, QuestionAttemptLogUncheckedUpdateWithoutQuestionInput>
    create: XOR<QuestionAttemptLogCreateWithoutQuestionInput, QuestionAttemptLogUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionAttemptLogUpdateWithWhereUniqueWithoutQuestionInput = {
    where: QuestionAttemptLogWhereUniqueInput
    data: XOR<QuestionAttemptLogUpdateWithoutQuestionInput, QuestionAttemptLogUncheckedUpdateWithoutQuestionInput>
  }

  export type QuestionAttemptLogUpdateManyWithWhereWithoutQuestionInput = {
    where: QuestionAttemptLogScalarWhereInput
    data: XOR<QuestionAttemptLogUpdateManyMutationInput, QuestionAttemptLogUncheckedUpdateManyWithoutQuestionInput>
  }

  export type UserCreateWithoutLearningPlansInput = {
    id?: string
    email: string
    displayName: string
    onboardingCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: AvatarCreateNestedOneWithoutUsersInput
    goals?: GoalCreateNestedManyWithoutUserInput
    attemptLogs?: QuestionAttemptLogCreateNestedManyWithoutUserInput
    dailyReflections?: DailyReflectionCreateNestedManyWithoutUserInput
    weeklyReflections?: WeeklyReflectionCreateNestedManyWithoutUserInput
    valuePrompts?: ValuePromptCreateNestedManyWithoutUserInput
    reflectionBadges?: ReflectionBadgeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLearningPlansInput = {
    id?: string
    email: string
    displayName: string
    avatarKey?: string | null
    onboardingCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    attemptLogs?: QuestionAttemptLogUncheckedCreateNestedManyWithoutUserInput
    dailyReflections?: DailyReflectionUncheckedCreateNestedManyWithoutUserInput
    weeklyReflections?: WeeklyReflectionUncheckedCreateNestedManyWithoutUserInput
    valuePrompts?: ValuePromptUncheckedCreateNestedManyWithoutUserInput
    reflectionBadges?: ReflectionBadgeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLearningPlansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLearningPlansInput, UserUncheckedCreateWithoutLearningPlansInput>
  }

  export type GoalCreateWithoutLearningPlansInput = {
    id?: string
    testName: string
    testStartDate: Date | string
    testEndDate: Date | string
    totalStudents: number
    targetRank: number
    reasonType: string
    reasonText: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutGoalsInput
  }

  export type GoalUncheckedCreateWithoutLearningPlansInput = {
    id?: string
    userId: string
    testName: string
    testStartDate: Date | string
    testEndDate: Date | string
    totalStudents: number
    targetRank: number
    reasonType: string
    reasonText: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GoalCreateOrConnectWithoutLearningPlansInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutLearningPlansInput, GoalUncheckedCreateWithoutLearningPlansInput>
  }

  export type LearningTaskCreateWithoutLearningPlanInput = {
    id?: string
    date: Date | string
    orderInDay: number
    isReviewDay: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    question: QuestionCreateNestedOneWithoutLearningTasksInput
  }

  export type LearningTaskUncheckedCreateWithoutLearningPlanInput = {
    id?: string
    date: Date | string
    questionId: string
    orderInDay: number
    isReviewDay: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LearningTaskCreateOrConnectWithoutLearningPlanInput = {
    where: LearningTaskWhereUniqueInput
    create: XOR<LearningTaskCreateWithoutLearningPlanInput, LearningTaskUncheckedCreateWithoutLearningPlanInput>
  }

  export type LearningTaskCreateManyLearningPlanInputEnvelope = {
    data: LearningTaskCreateManyLearningPlanInput | LearningTaskCreateManyLearningPlanInput[]
    skipDuplicates?: boolean
  }

  export type PlanRevisionCreateWithoutLearningPlanInput = {
    id?: string
    revisionType: string
    selectedStatuses?: PlanRevisionCreateselectedStatusesInput | string[]
    revisedAt?: Date | string
  }

  export type PlanRevisionUncheckedCreateWithoutLearningPlanInput = {
    id?: string
    revisionType: string
    selectedStatuses?: PlanRevisionCreateselectedStatusesInput | string[]
    revisedAt?: Date | string
  }

  export type PlanRevisionCreateOrConnectWithoutLearningPlanInput = {
    where: PlanRevisionWhereUniqueInput
    create: XOR<PlanRevisionCreateWithoutLearningPlanInput, PlanRevisionUncheckedCreateWithoutLearningPlanInput>
  }

  export type PlanRevisionCreateManyLearningPlanInputEnvelope = {
    data: PlanRevisionCreateManyLearningPlanInput | PlanRevisionCreateManyLearningPlanInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutLearningPlansInput = {
    update: XOR<UserUpdateWithoutLearningPlansInput, UserUncheckedUpdateWithoutLearningPlansInput>
    create: XOR<UserCreateWithoutLearningPlansInput, UserUncheckedCreateWithoutLearningPlansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLearningPlansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLearningPlansInput, UserUncheckedUpdateWithoutLearningPlansInput>
  }

  export type UserUpdateWithoutLearningPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: AvatarUpdateOneWithoutUsersNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    attemptLogs?: QuestionAttemptLogUpdateManyWithoutUserNestedInput
    dailyReflections?: DailyReflectionUpdateManyWithoutUserNestedInput
    weeklyReflections?: WeeklyReflectionUpdateManyWithoutUserNestedInput
    valuePrompts?: ValuePromptUpdateManyWithoutUserNestedInput
    reflectionBadges?: ReflectionBadgeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLearningPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    avatarKey?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    attemptLogs?: QuestionAttemptLogUncheckedUpdateManyWithoutUserNestedInput
    dailyReflections?: DailyReflectionUncheckedUpdateManyWithoutUserNestedInput
    weeklyReflections?: WeeklyReflectionUncheckedUpdateManyWithoutUserNestedInput
    valuePrompts?: ValuePromptUncheckedUpdateManyWithoutUserNestedInput
    reflectionBadges?: ReflectionBadgeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GoalUpsertWithoutLearningPlansInput = {
    update: XOR<GoalUpdateWithoutLearningPlansInput, GoalUncheckedUpdateWithoutLearningPlansInput>
    create: XOR<GoalCreateWithoutLearningPlansInput, GoalUncheckedCreateWithoutLearningPlansInput>
    where?: GoalWhereInput
  }

  export type GoalUpdateToOneWithWhereWithoutLearningPlansInput = {
    where?: GoalWhereInput
    data: XOR<GoalUpdateWithoutLearningPlansInput, GoalUncheckedUpdateWithoutLearningPlansInput>
  }

  export type GoalUpdateWithoutLearningPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    testName?: StringFieldUpdateOperationsInput | string
    testStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    testEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalStudents?: IntFieldUpdateOperationsInput | number
    targetRank?: IntFieldUpdateOperationsInput | number
    reasonType?: StringFieldUpdateOperationsInput | string
    reasonText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGoalsNestedInput
  }

  export type GoalUncheckedUpdateWithoutLearningPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    testName?: StringFieldUpdateOperationsInput | string
    testStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    testEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalStudents?: IntFieldUpdateOperationsInput | number
    targetRank?: IntFieldUpdateOperationsInput | number
    reasonType?: StringFieldUpdateOperationsInput | string
    reasonText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningTaskUpsertWithWhereUniqueWithoutLearningPlanInput = {
    where: LearningTaskWhereUniqueInput
    update: XOR<LearningTaskUpdateWithoutLearningPlanInput, LearningTaskUncheckedUpdateWithoutLearningPlanInput>
    create: XOR<LearningTaskCreateWithoutLearningPlanInput, LearningTaskUncheckedCreateWithoutLearningPlanInput>
  }

  export type LearningTaskUpdateWithWhereUniqueWithoutLearningPlanInput = {
    where: LearningTaskWhereUniqueInput
    data: XOR<LearningTaskUpdateWithoutLearningPlanInput, LearningTaskUncheckedUpdateWithoutLearningPlanInput>
  }

  export type LearningTaskUpdateManyWithWhereWithoutLearningPlanInput = {
    where: LearningTaskScalarWhereInput
    data: XOR<LearningTaskUpdateManyMutationInput, LearningTaskUncheckedUpdateManyWithoutLearningPlanInput>
  }

  export type PlanRevisionUpsertWithWhereUniqueWithoutLearningPlanInput = {
    where: PlanRevisionWhereUniqueInput
    update: XOR<PlanRevisionUpdateWithoutLearningPlanInput, PlanRevisionUncheckedUpdateWithoutLearningPlanInput>
    create: XOR<PlanRevisionCreateWithoutLearningPlanInput, PlanRevisionUncheckedCreateWithoutLearningPlanInput>
  }

  export type PlanRevisionUpdateWithWhereUniqueWithoutLearningPlanInput = {
    where: PlanRevisionWhereUniqueInput
    data: XOR<PlanRevisionUpdateWithoutLearningPlanInput, PlanRevisionUncheckedUpdateWithoutLearningPlanInput>
  }

  export type PlanRevisionUpdateManyWithWhereWithoutLearningPlanInput = {
    where: PlanRevisionScalarWhereInput
    data: XOR<PlanRevisionUpdateManyMutationInput, PlanRevisionUncheckedUpdateManyWithoutLearningPlanInput>
  }

  export type PlanRevisionScalarWhereInput = {
    AND?: PlanRevisionScalarWhereInput | PlanRevisionScalarWhereInput[]
    OR?: PlanRevisionScalarWhereInput[]
    NOT?: PlanRevisionScalarWhereInput | PlanRevisionScalarWhereInput[]
    id?: StringFilter<"PlanRevision"> | string
    planId?: StringFilter<"PlanRevision"> | string
    revisionType?: StringFilter<"PlanRevision"> | string
    selectedStatuses?: StringNullableListFilter<"PlanRevision">
    revisedAt?: DateTimeFilter<"PlanRevision"> | Date | string
  }

  export type LearningPlanCreateWithoutLearningTasksInput = {
    id?: string
    generatedBy: string
    maxDays: number
    baseDays: number
    finalStudyDate: Date | string
    reviewDays: number
    reviewWeekdays?: LearningPlanCreatereviewWeekdaysInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutLearningPlansInput
    goal: GoalCreateNestedOneWithoutLearningPlansInput
    planRevisions?: PlanRevisionCreateNestedManyWithoutLearningPlanInput
  }

  export type LearningPlanUncheckedCreateWithoutLearningTasksInput = {
    id?: string
    userId: string
    goalId: string
    generatedBy: string
    maxDays: number
    baseDays: number
    finalStudyDate: Date | string
    reviewDays: number
    reviewWeekdays?: LearningPlanCreatereviewWeekdaysInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    planRevisions?: PlanRevisionUncheckedCreateNestedManyWithoutLearningPlanInput
  }

  export type LearningPlanCreateOrConnectWithoutLearningTasksInput = {
    where: LearningPlanWhereUniqueInput
    create: XOR<LearningPlanCreateWithoutLearningTasksInput, LearningPlanUncheckedCreateWithoutLearningTasksInput>
  }

  export type QuestionCreateWithoutLearningTasksInput = {
    id?: string
    content: string
    difficulty: number
    createdAt?: Date | string
    updatedAt?: Date | string
    section: SectionCreateNestedOneWithoutQuestionsInput
    attemptLogs?: QuestionAttemptLogCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutLearningTasksInput = {
    id?: string
    sectionId: string
    content: string
    difficulty: number
    createdAt?: Date | string
    updatedAt?: Date | string
    attemptLogs?: QuestionAttemptLogUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutLearningTasksInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutLearningTasksInput, QuestionUncheckedCreateWithoutLearningTasksInput>
  }

  export type LearningPlanUpsertWithoutLearningTasksInput = {
    update: XOR<LearningPlanUpdateWithoutLearningTasksInput, LearningPlanUncheckedUpdateWithoutLearningTasksInput>
    create: XOR<LearningPlanCreateWithoutLearningTasksInput, LearningPlanUncheckedCreateWithoutLearningTasksInput>
    where?: LearningPlanWhereInput
  }

  export type LearningPlanUpdateToOneWithWhereWithoutLearningTasksInput = {
    where?: LearningPlanWhereInput
    data: XOR<LearningPlanUpdateWithoutLearningTasksInput, LearningPlanUncheckedUpdateWithoutLearningTasksInput>
  }

  export type LearningPlanUpdateWithoutLearningTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    generatedBy?: StringFieldUpdateOperationsInput | string
    maxDays?: IntFieldUpdateOperationsInput | number
    baseDays?: IntFieldUpdateOperationsInput | number
    finalStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDays?: IntFieldUpdateOperationsInput | number
    reviewWeekdays?: LearningPlanUpdatereviewWeekdaysInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLearningPlansNestedInput
    goal?: GoalUpdateOneRequiredWithoutLearningPlansNestedInput
    planRevisions?: PlanRevisionUpdateManyWithoutLearningPlanNestedInput
  }

  export type LearningPlanUncheckedUpdateWithoutLearningTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    generatedBy?: StringFieldUpdateOperationsInput | string
    maxDays?: IntFieldUpdateOperationsInput | number
    baseDays?: IntFieldUpdateOperationsInput | number
    finalStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDays?: IntFieldUpdateOperationsInput | number
    reviewWeekdays?: LearningPlanUpdatereviewWeekdaysInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    planRevisions?: PlanRevisionUncheckedUpdateManyWithoutLearningPlanNestedInput
  }

  export type QuestionUpsertWithoutLearningTasksInput = {
    update: XOR<QuestionUpdateWithoutLearningTasksInput, QuestionUncheckedUpdateWithoutLearningTasksInput>
    create: XOR<QuestionCreateWithoutLearningTasksInput, QuestionUncheckedCreateWithoutLearningTasksInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutLearningTasksInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutLearningTasksInput, QuestionUncheckedUpdateWithoutLearningTasksInput>
  }

  export type QuestionUpdateWithoutLearningTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    difficulty?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    section?: SectionUpdateOneRequiredWithoutQuestionsNestedInput
    attemptLogs?: QuestionAttemptLogUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutLearningTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    sectionId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    difficulty?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attemptLogs?: QuestionAttemptLogUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type UserCreateWithoutAttemptLogsInput = {
    id?: string
    email: string
    displayName: string
    onboardingCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: AvatarCreateNestedOneWithoutUsersInput
    goals?: GoalCreateNestedManyWithoutUserInput
    learningPlans?: LearningPlanCreateNestedManyWithoutUserInput
    dailyReflections?: DailyReflectionCreateNestedManyWithoutUserInput
    weeklyReflections?: WeeklyReflectionCreateNestedManyWithoutUserInput
    valuePrompts?: ValuePromptCreateNestedManyWithoutUserInput
    reflectionBadges?: ReflectionBadgeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAttemptLogsInput = {
    id?: string
    email: string
    displayName: string
    avatarKey?: string | null
    onboardingCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    learningPlans?: LearningPlanUncheckedCreateNestedManyWithoutUserInput
    dailyReflections?: DailyReflectionUncheckedCreateNestedManyWithoutUserInput
    weeklyReflections?: WeeklyReflectionUncheckedCreateNestedManyWithoutUserInput
    valuePrompts?: ValuePromptUncheckedCreateNestedManyWithoutUserInput
    reflectionBadges?: ReflectionBadgeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAttemptLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAttemptLogsInput, UserUncheckedCreateWithoutAttemptLogsInput>
  }

  export type QuestionCreateWithoutAttemptLogsInput = {
    id?: string
    content: string
    difficulty: number
    createdAt?: Date | string
    updatedAt?: Date | string
    section: SectionCreateNestedOneWithoutQuestionsInput
    learningTasks?: LearningTaskCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutAttemptLogsInput = {
    id?: string
    sectionId: string
    content: string
    difficulty: number
    createdAt?: Date | string
    updatedAt?: Date | string
    learningTasks?: LearningTaskUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutAttemptLogsInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutAttemptLogsInput, QuestionUncheckedCreateWithoutAttemptLogsInput>
  }

  export type UserUpsertWithoutAttemptLogsInput = {
    update: XOR<UserUpdateWithoutAttemptLogsInput, UserUncheckedUpdateWithoutAttemptLogsInput>
    create: XOR<UserCreateWithoutAttemptLogsInput, UserUncheckedCreateWithoutAttemptLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAttemptLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAttemptLogsInput, UserUncheckedUpdateWithoutAttemptLogsInput>
  }

  export type UserUpdateWithoutAttemptLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: AvatarUpdateOneWithoutUsersNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    learningPlans?: LearningPlanUpdateManyWithoutUserNestedInput
    dailyReflections?: DailyReflectionUpdateManyWithoutUserNestedInput
    weeklyReflections?: WeeklyReflectionUpdateManyWithoutUserNestedInput
    valuePrompts?: ValuePromptUpdateManyWithoutUserNestedInput
    reflectionBadges?: ReflectionBadgeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAttemptLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    avatarKey?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    learningPlans?: LearningPlanUncheckedUpdateManyWithoutUserNestedInput
    dailyReflections?: DailyReflectionUncheckedUpdateManyWithoutUserNestedInput
    weeklyReflections?: WeeklyReflectionUncheckedUpdateManyWithoutUserNestedInput
    valuePrompts?: ValuePromptUncheckedUpdateManyWithoutUserNestedInput
    reflectionBadges?: ReflectionBadgeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type QuestionUpsertWithoutAttemptLogsInput = {
    update: XOR<QuestionUpdateWithoutAttemptLogsInput, QuestionUncheckedUpdateWithoutAttemptLogsInput>
    create: XOR<QuestionCreateWithoutAttemptLogsInput, QuestionUncheckedCreateWithoutAttemptLogsInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutAttemptLogsInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutAttemptLogsInput, QuestionUncheckedUpdateWithoutAttemptLogsInput>
  }

  export type QuestionUpdateWithoutAttemptLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    difficulty?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    section?: SectionUpdateOneRequiredWithoutQuestionsNestedInput
    learningTasks?: LearningTaskUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutAttemptLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    sectionId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    difficulty?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    learningTasks?: LearningTaskUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type LearningPlanCreateWithoutPlanRevisionsInput = {
    id?: string
    generatedBy: string
    maxDays: number
    baseDays: number
    finalStudyDate: Date | string
    reviewDays: number
    reviewWeekdays?: LearningPlanCreatereviewWeekdaysInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutLearningPlansInput
    goal: GoalCreateNestedOneWithoutLearningPlansInput
    learningTasks?: LearningTaskCreateNestedManyWithoutLearningPlanInput
  }

  export type LearningPlanUncheckedCreateWithoutPlanRevisionsInput = {
    id?: string
    userId: string
    goalId: string
    generatedBy: string
    maxDays: number
    baseDays: number
    finalStudyDate: Date | string
    reviewDays: number
    reviewWeekdays?: LearningPlanCreatereviewWeekdaysInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    learningTasks?: LearningTaskUncheckedCreateNestedManyWithoutLearningPlanInput
  }

  export type LearningPlanCreateOrConnectWithoutPlanRevisionsInput = {
    where: LearningPlanWhereUniqueInput
    create: XOR<LearningPlanCreateWithoutPlanRevisionsInput, LearningPlanUncheckedCreateWithoutPlanRevisionsInput>
  }

  export type LearningPlanUpsertWithoutPlanRevisionsInput = {
    update: XOR<LearningPlanUpdateWithoutPlanRevisionsInput, LearningPlanUncheckedUpdateWithoutPlanRevisionsInput>
    create: XOR<LearningPlanCreateWithoutPlanRevisionsInput, LearningPlanUncheckedCreateWithoutPlanRevisionsInput>
    where?: LearningPlanWhereInput
  }

  export type LearningPlanUpdateToOneWithWhereWithoutPlanRevisionsInput = {
    where?: LearningPlanWhereInput
    data: XOR<LearningPlanUpdateWithoutPlanRevisionsInput, LearningPlanUncheckedUpdateWithoutPlanRevisionsInput>
  }

  export type LearningPlanUpdateWithoutPlanRevisionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    generatedBy?: StringFieldUpdateOperationsInput | string
    maxDays?: IntFieldUpdateOperationsInput | number
    baseDays?: IntFieldUpdateOperationsInput | number
    finalStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDays?: IntFieldUpdateOperationsInput | number
    reviewWeekdays?: LearningPlanUpdatereviewWeekdaysInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLearningPlansNestedInput
    goal?: GoalUpdateOneRequiredWithoutLearningPlansNestedInput
    learningTasks?: LearningTaskUpdateManyWithoutLearningPlanNestedInput
  }

  export type LearningPlanUncheckedUpdateWithoutPlanRevisionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    generatedBy?: StringFieldUpdateOperationsInput | string
    maxDays?: IntFieldUpdateOperationsInput | number
    baseDays?: IntFieldUpdateOperationsInput | number
    finalStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDays?: IntFieldUpdateOperationsInput | number
    reviewWeekdays?: LearningPlanUpdatereviewWeekdaysInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    learningTasks?: LearningTaskUncheckedUpdateManyWithoutLearningPlanNestedInput
  }

  export type UserCreateWithoutDailyReflectionsInput = {
    id?: string
    email: string
    displayName: string
    onboardingCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: AvatarCreateNestedOneWithoutUsersInput
    goals?: GoalCreateNestedManyWithoutUserInput
    learningPlans?: LearningPlanCreateNestedManyWithoutUserInput
    attemptLogs?: QuestionAttemptLogCreateNestedManyWithoutUserInput
    weeklyReflections?: WeeklyReflectionCreateNestedManyWithoutUserInput
    valuePrompts?: ValuePromptCreateNestedManyWithoutUserInput
    reflectionBadges?: ReflectionBadgeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDailyReflectionsInput = {
    id?: string
    email: string
    displayName: string
    avatarKey?: string | null
    onboardingCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    learningPlans?: LearningPlanUncheckedCreateNestedManyWithoutUserInput
    attemptLogs?: QuestionAttemptLogUncheckedCreateNestedManyWithoutUserInput
    weeklyReflections?: WeeklyReflectionUncheckedCreateNestedManyWithoutUserInput
    valuePrompts?: ValuePromptUncheckedCreateNestedManyWithoutUserInput
    reflectionBadges?: ReflectionBadgeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDailyReflectionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDailyReflectionsInput, UserUncheckedCreateWithoutDailyReflectionsInput>
  }

  export type UserUpsertWithoutDailyReflectionsInput = {
    update: XOR<UserUpdateWithoutDailyReflectionsInput, UserUncheckedUpdateWithoutDailyReflectionsInput>
    create: XOR<UserCreateWithoutDailyReflectionsInput, UserUncheckedCreateWithoutDailyReflectionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDailyReflectionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDailyReflectionsInput, UserUncheckedUpdateWithoutDailyReflectionsInput>
  }

  export type UserUpdateWithoutDailyReflectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: AvatarUpdateOneWithoutUsersNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    learningPlans?: LearningPlanUpdateManyWithoutUserNestedInput
    attemptLogs?: QuestionAttemptLogUpdateManyWithoutUserNestedInput
    weeklyReflections?: WeeklyReflectionUpdateManyWithoutUserNestedInput
    valuePrompts?: ValuePromptUpdateManyWithoutUserNestedInput
    reflectionBadges?: ReflectionBadgeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDailyReflectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    avatarKey?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    learningPlans?: LearningPlanUncheckedUpdateManyWithoutUserNestedInput
    attemptLogs?: QuestionAttemptLogUncheckedUpdateManyWithoutUserNestedInput
    weeklyReflections?: WeeklyReflectionUncheckedUpdateManyWithoutUserNestedInput
    valuePrompts?: ValuePromptUncheckedUpdateManyWithoutUserNestedInput
    reflectionBadges?: ReflectionBadgeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutWeeklyReflectionsInput = {
    id?: string
    email: string
    displayName: string
    onboardingCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: AvatarCreateNestedOneWithoutUsersInput
    goals?: GoalCreateNestedManyWithoutUserInput
    learningPlans?: LearningPlanCreateNestedManyWithoutUserInput
    attemptLogs?: QuestionAttemptLogCreateNestedManyWithoutUserInput
    dailyReflections?: DailyReflectionCreateNestedManyWithoutUserInput
    valuePrompts?: ValuePromptCreateNestedManyWithoutUserInput
    reflectionBadges?: ReflectionBadgeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWeeklyReflectionsInput = {
    id?: string
    email: string
    displayName: string
    avatarKey?: string | null
    onboardingCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    learningPlans?: LearningPlanUncheckedCreateNestedManyWithoutUserInput
    attemptLogs?: QuestionAttemptLogUncheckedCreateNestedManyWithoutUserInput
    dailyReflections?: DailyReflectionUncheckedCreateNestedManyWithoutUserInput
    valuePrompts?: ValuePromptUncheckedCreateNestedManyWithoutUserInput
    reflectionBadges?: ReflectionBadgeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWeeklyReflectionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWeeklyReflectionsInput, UserUncheckedCreateWithoutWeeklyReflectionsInput>
  }

  export type UserUpsertWithoutWeeklyReflectionsInput = {
    update: XOR<UserUpdateWithoutWeeklyReflectionsInput, UserUncheckedUpdateWithoutWeeklyReflectionsInput>
    create: XOR<UserCreateWithoutWeeklyReflectionsInput, UserUncheckedCreateWithoutWeeklyReflectionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWeeklyReflectionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWeeklyReflectionsInput, UserUncheckedUpdateWithoutWeeklyReflectionsInput>
  }

  export type UserUpdateWithoutWeeklyReflectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: AvatarUpdateOneWithoutUsersNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    learningPlans?: LearningPlanUpdateManyWithoutUserNestedInput
    attemptLogs?: QuestionAttemptLogUpdateManyWithoutUserNestedInput
    dailyReflections?: DailyReflectionUpdateManyWithoutUserNestedInput
    valuePrompts?: ValuePromptUpdateManyWithoutUserNestedInput
    reflectionBadges?: ReflectionBadgeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWeeklyReflectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    avatarKey?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    learningPlans?: LearningPlanUncheckedUpdateManyWithoutUserNestedInput
    attemptLogs?: QuestionAttemptLogUncheckedUpdateManyWithoutUserNestedInput
    dailyReflections?: DailyReflectionUncheckedUpdateManyWithoutUserNestedInput
    valuePrompts?: ValuePromptUncheckedUpdateManyWithoutUserNestedInput
    reflectionBadges?: ReflectionBadgeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutValuePromptsInput = {
    id?: string
    email: string
    displayName: string
    onboardingCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: AvatarCreateNestedOneWithoutUsersInput
    goals?: GoalCreateNestedManyWithoutUserInput
    learningPlans?: LearningPlanCreateNestedManyWithoutUserInput
    attemptLogs?: QuestionAttemptLogCreateNestedManyWithoutUserInput
    dailyReflections?: DailyReflectionCreateNestedManyWithoutUserInput
    weeklyReflections?: WeeklyReflectionCreateNestedManyWithoutUserInput
    reflectionBadges?: ReflectionBadgeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutValuePromptsInput = {
    id?: string
    email: string
    displayName: string
    avatarKey?: string | null
    onboardingCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    learningPlans?: LearningPlanUncheckedCreateNestedManyWithoutUserInput
    attemptLogs?: QuestionAttemptLogUncheckedCreateNestedManyWithoutUserInput
    dailyReflections?: DailyReflectionUncheckedCreateNestedManyWithoutUserInput
    weeklyReflections?: WeeklyReflectionUncheckedCreateNestedManyWithoutUserInput
    reflectionBadges?: ReflectionBadgeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutValuePromptsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutValuePromptsInput, UserUncheckedCreateWithoutValuePromptsInput>
  }

  export type UserUpsertWithoutValuePromptsInput = {
    update: XOR<UserUpdateWithoutValuePromptsInput, UserUncheckedUpdateWithoutValuePromptsInput>
    create: XOR<UserCreateWithoutValuePromptsInput, UserUncheckedCreateWithoutValuePromptsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutValuePromptsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutValuePromptsInput, UserUncheckedUpdateWithoutValuePromptsInput>
  }

  export type UserUpdateWithoutValuePromptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: AvatarUpdateOneWithoutUsersNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    learningPlans?: LearningPlanUpdateManyWithoutUserNestedInput
    attemptLogs?: QuestionAttemptLogUpdateManyWithoutUserNestedInput
    dailyReflections?: DailyReflectionUpdateManyWithoutUserNestedInput
    weeklyReflections?: WeeklyReflectionUpdateManyWithoutUserNestedInput
    reflectionBadges?: ReflectionBadgeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutValuePromptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    avatarKey?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    learningPlans?: LearningPlanUncheckedUpdateManyWithoutUserNestedInput
    attemptLogs?: QuestionAttemptLogUncheckedUpdateManyWithoutUserNestedInput
    dailyReflections?: DailyReflectionUncheckedUpdateManyWithoutUserNestedInput
    weeklyReflections?: WeeklyReflectionUncheckedUpdateManyWithoutUserNestedInput
    reflectionBadges?: ReflectionBadgeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutReflectionBadgesInput = {
    id?: string
    email: string
    displayName: string
    onboardingCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: AvatarCreateNestedOneWithoutUsersInput
    goals?: GoalCreateNestedManyWithoutUserInput
    learningPlans?: LearningPlanCreateNestedManyWithoutUserInput
    attemptLogs?: QuestionAttemptLogCreateNestedManyWithoutUserInput
    dailyReflections?: DailyReflectionCreateNestedManyWithoutUserInput
    weeklyReflections?: WeeklyReflectionCreateNestedManyWithoutUserInput
    valuePrompts?: ValuePromptCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReflectionBadgesInput = {
    id?: string
    email: string
    displayName: string
    avatarKey?: string | null
    onboardingCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    goals?: GoalUncheckedCreateNestedManyWithoutUserInput
    learningPlans?: LearningPlanUncheckedCreateNestedManyWithoutUserInput
    attemptLogs?: QuestionAttemptLogUncheckedCreateNestedManyWithoutUserInput
    dailyReflections?: DailyReflectionUncheckedCreateNestedManyWithoutUserInput
    weeklyReflections?: WeeklyReflectionUncheckedCreateNestedManyWithoutUserInput
    valuePrompts?: ValuePromptUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReflectionBadgesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReflectionBadgesInput, UserUncheckedCreateWithoutReflectionBadgesInput>
  }

  export type UserUpsertWithoutReflectionBadgesInput = {
    update: XOR<UserUpdateWithoutReflectionBadgesInput, UserUncheckedUpdateWithoutReflectionBadgesInput>
    create: XOR<UserCreateWithoutReflectionBadgesInput, UserUncheckedCreateWithoutReflectionBadgesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReflectionBadgesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReflectionBadgesInput, UserUncheckedUpdateWithoutReflectionBadgesInput>
  }

  export type UserUpdateWithoutReflectionBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: AvatarUpdateOneWithoutUsersNestedInput
    goals?: GoalUpdateManyWithoutUserNestedInput
    learningPlans?: LearningPlanUpdateManyWithoutUserNestedInput
    attemptLogs?: QuestionAttemptLogUpdateManyWithoutUserNestedInput
    dailyReflections?: DailyReflectionUpdateManyWithoutUserNestedInput
    weeklyReflections?: WeeklyReflectionUpdateManyWithoutUserNestedInput
    valuePrompts?: ValuePromptUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReflectionBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    avatarKey?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    learningPlans?: LearningPlanUncheckedUpdateManyWithoutUserNestedInput
    attemptLogs?: QuestionAttemptLogUncheckedUpdateManyWithoutUserNestedInput
    dailyReflections?: DailyReflectionUncheckedUpdateManyWithoutUserNestedInput
    weeklyReflections?: WeeklyReflectionUncheckedUpdateManyWithoutUserNestedInput
    valuePrompts?: ValuePromptUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyAvatarInput = {
    id?: string
    email: string
    displayName: string
    onboardingCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutAvatarInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: GoalUpdateManyWithoutUserNestedInput
    learningPlans?: LearningPlanUpdateManyWithoutUserNestedInput
    attemptLogs?: QuestionAttemptLogUpdateManyWithoutUserNestedInput
    dailyReflections?: DailyReflectionUpdateManyWithoutUserNestedInput
    weeklyReflections?: WeeklyReflectionUpdateManyWithoutUserNestedInput
    valuePrompts?: ValuePromptUpdateManyWithoutUserNestedInput
    reflectionBadges?: ReflectionBadgeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAvatarInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: GoalUncheckedUpdateManyWithoutUserNestedInput
    learningPlans?: LearningPlanUncheckedUpdateManyWithoutUserNestedInput
    attemptLogs?: QuestionAttemptLogUncheckedUpdateManyWithoutUserNestedInput
    dailyReflections?: DailyReflectionUncheckedUpdateManyWithoutUserNestedInput
    weeklyReflections?: WeeklyReflectionUncheckedUpdateManyWithoutUserNestedInput
    valuePrompts?: ValuePromptUncheckedUpdateManyWithoutUserNestedInput
    reflectionBadges?: ReflectionBadgeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutAvatarInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalCreateManyUserInput = {
    id?: string
    testName: string
    testStartDate: Date | string
    testEndDate: Date | string
    totalStudents: number
    targetRank: number
    reasonType: string
    reasonText: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LearningPlanCreateManyUserInput = {
    id?: string
    goalId: string
    generatedBy: string
    maxDays: number
    baseDays: number
    finalStudyDate: Date | string
    reviewDays: number
    reviewWeekdays?: LearningPlanCreatereviewWeekdaysInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionAttemptLogCreateManyUserInput = {
    id?: string
    questionId: string
    date: Date | string
    status: string
    source: string
    updatedAt?: Date | string
  }

  export type DailyReflectionCreateManyUserInput = {
    id?: string
    date: Date | string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WeeklyReflectionCreateManyUserInput = {
    id?: string
    weekStart: Date | string
    weekEnd: Date | string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValuePromptCreateManyUserInput = {
    id?: string
    promptType: string
    content: string
    response?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReflectionBadgeCreateManyUserInput = {
    id?: string
    badgeType: string
    awardedAt?: Date | string
  }

  export type GoalUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    testName?: StringFieldUpdateOperationsInput | string
    testStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    testEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalStudents?: IntFieldUpdateOperationsInput | number
    targetRank?: IntFieldUpdateOperationsInput | number
    reasonType?: StringFieldUpdateOperationsInput | string
    reasonText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    learningPlans?: LearningPlanUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    testName?: StringFieldUpdateOperationsInput | string
    testStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    testEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalStudents?: IntFieldUpdateOperationsInput | number
    targetRank?: IntFieldUpdateOperationsInput | number
    reasonType?: StringFieldUpdateOperationsInput | string
    reasonText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    learningPlans?: LearningPlanUncheckedUpdateManyWithoutGoalNestedInput
  }

  export type GoalUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    testName?: StringFieldUpdateOperationsInput | string
    testStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    testEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalStudents?: IntFieldUpdateOperationsInput | number
    targetRank?: IntFieldUpdateOperationsInput | number
    reasonType?: StringFieldUpdateOperationsInput | string
    reasonText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningPlanUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    generatedBy?: StringFieldUpdateOperationsInput | string
    maxDays?: IntFieldUpdateOperationsInput | number
    baseDays?: IntFieldUpdateOperationsInput | number
    finalStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDays?: IntFieldUpdateOperationsInput | number
    reviewWeekdays?: LearningPlanUpdatereviewWeekdaysInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goal?: GoalUpdateOneRequiredWithoutLearningPlansNestedInput
    learningTasks?: LearningTaskUpdateManyWithoutLearningPlanNestedInput
    planRevisions?: PlanRevisionUpdateManyWithoutLearningPlanNestedInput
  }

  export type LearningPlanUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    generatedBy?: StringFieldUpdateOperationsInput | string
    maxDays?: IntFieldUpdateOperationsInput | number
    baseDays?: IntFieldUpdateOperationsInput | number
    finalStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDays?: IntFieldUpdateOperationsInput | number
    reviewWeekdays?: LearningPlanUpdatereviewWeekdaysInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    learningTasks?: LearningTaskUncheckedUpdateManyWithoutLearningPlanNestedInput
    planRevisions?: PlanRevisionUncheckedUpdateManyWithoutLearningPlanNestedInput
  }

  export type LearningPlanUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    goalId?: StringFieldUpdateOperationsInput | string
    generatedBy?: StringFieldUpdateOperationsInput | string
    maxDays?: IntFieldUpdateOperationsInput | number
    baseDays?: IntFieldUpdateOperationsInput | number
    finalStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDays?: IntFieldUpdateOperationsInput | number
    reviewWeekdays?: LearningPlanUpdatereviewWeekdaysInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionAttemptLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: QuestionUpdateOneRequiredWithoutAttemptLogsNestedInput
  }

  export type QuestionAttemptLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionAttemptLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyReflectionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyReflectionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyReflectionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeeklyReflectionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekStart?: DateTimeFieldUpdateOperationsInput | Date | string
    weekEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeeklyReflectionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekStart?: DateTimeFieldUpdateOperationsInput | Date | string
    weekEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeeklyReflectionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    weekStart?: DateTimeFieldUpdateOperationsInput | Date | string
    weekEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValuePromptUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    promptType?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValuePromptUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    promptType?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValuePromptUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    promptType?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReflectionBadgeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    badgeType?: StringFieldUpdateOperationsInput | string
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReflectionBadgeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    badgeType?: StringFieldUpdateOperationsInput | string
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReflectionBadgeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    badgeType?: StringFieldUpdateOperationsInput | string
    awardedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningPlanCreateManyGoalInput = {
    id?: string
    userId: string
    generatedBy: string
    maxDays: number
    baseDays: number
    finalStudyDate: Date | string
    reviewDays: number
    reviewWeekdays?: LearningPlanCreatereviewWeekdaysInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LearningPlanUpdateWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    generatedBy?: StringFieldUpdateOperationsInput | string
    maxDays?: IntFieldUpdateOperationsInput | number
    baseDays?: IntFieldUpdateOperationsInput | number
    finalStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDays?: IntFieldUpdateOperationsInput | number
    reviewWeekdays?: LearningPlanUpdatereviewWeekdaysInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLearningPlansNestedInput
    learningTasks?: LearningTaskUpdateManyWithoutLearningPlanNestedInput
    planRevisions?: PlanRevisionUpdateManyWithoutLearningPlanNestedInput
  }

  export type LearningPlanUncheckedUpdateWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    generatedBy?: StringFieldUpdateOperationsInput | string
    maxDays?: IntFieldUpdateOperationsInput | number
    baseDays?: IntFieldUpdateOperationsInput | number
    finalStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDays?: IntFieldUpdateOperationsInput | number
    reviewWeekdays?: LearningPlanUpdatereviewWeekdaysInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    learningTasks?: LearningTaskUncheckedUpdateManyWithoutLearningPlanNestedInput
    planRevisions?: PlanRevisionUncheckedUpdateManyWithoutLearningPlanNestedInput
  }

  export type LearningPlanUncheckedUpdateManyWithoutGoalInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    generatedBy?: StringFieldUpdateOperationsInput | string
    maxDays?: IntFieldUpdateOperationsInput | number
    baseDays?: IntFieldUpdateOperationsInput | number
    finalStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDays?: IntFieldUpdateOperationsInput | number
    reviewWeekdays?: LearningPlanUpdatereviewWeekdaysInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChapterCreateManyTextbookInput = {
    id?: string
    title: string
    orderIndex: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChapterUpdateWithoutTextbookInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: SectionUpdateManyWithoutChapterNestedInput
  }

  export type ChapterUncheckedUpdateWithoutTextbookInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: SectionUncheckedUpdateManyWithoutChapterNestedInput
  }

  export type ChapterUncheckedUpdateManyWithoutTextbookInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionCreateManyChapterInput = {
    id?: string
    title: string
    orderIndex: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SectionUpdateWithoutChapterInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateWithoutChapterInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateManyWithoutChapterInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    orderIndex?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionCreateManySectionInput = {
    id?: string
    content: string
    difficulty: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionUpdateWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    difficulty?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    learningTasks?: LearningTaskUpdateManyWithoutQuestionNestedInput
    attemptLogs?: QuestionAttemptLogUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    difficulty?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    learningTasks?: LearningTaskUncheckedUpdateManyWithoutQuestionNestedInput
    attemptLogs?: QuestionAttemptLogUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateManyWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    difficulty?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningTaskCreateManyQuestionInput = {
    id?: string
    planId: string
    date: Date | string
    orderInDay: number
    isReviewDay: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionAttemptLogCreateManyQuestionInput = {
    id?: string
    userId: string
    date: Date | string
    status: string
    source: string
    updatedAt?: Date | string
  }

  export type LearningTaskUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    orderInDay?: IntFieldUpdateOperationsInput | number
    isReviewDay?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    learningPlan?: LearningPlanUpdateOneRequiredWithoutLearningTasksNestedInput
  }

  export type LearningTaskUncheckedUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    orderInDay?: IntFieldUpdateOperationsInput | number
    isReviewDay?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningTaskUncheckedUpdateManyWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    orderInDay?: IntFieldUpdateOperationsInput | number
    isReviewDay?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionAttemptLogUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAttemptLogsNestedInput
  }

  export type QuestionAttemptLogUncheckedUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionAttemptLogUncheckedUpdateManyWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningTaskCreateManyLearningPlanInput = {
    id?: string
    date: Date | string
    questionId: string
    orderInDay: number
    isReviewDay: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlanRevisionCreateManyLearningPlanInput = {
    id?: string
    revisionType: string
    selectedStatuses?: PlanRevisionCreateselectedStatusesInput | string[]
    revisedAt?: Date | string
  }

  export type LearningTaskUpdateWithoutLearningPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    orderInDay?: IntFieldUpdateOperationsInput | number
    isReviewDay?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: QuestionUpdateOneRequiredWithoutLearningTasksNestedInput
  }

  export type LearningTaskUncheckedUpdateWithoutLearningPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    questionId?: StringFieldUpdateOperationsInput | string
    orderInDay?: IntFieldUpdateOperationsInput | number
    isReviewDay?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LearningTaskUncheckedUpdateManyWithoutLearningPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    questionId?: StringFieldUpdateOperationsInput | string
    orderInDay?: IntFieldUpdateOperationsInput | number
    isReviewDay?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanRevisionUpdateWithoutLearningPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    revisionType?: StringFieldUpdateOperationsInput | string
    selectedStatuses?: PlanRevisionUpdateselectedStatusesInput | string[]
    revisedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanRevisionUncheckedUpdateWithoutLearningPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    revisionType?: StringFieldUpdateOperationsInput | string
    selectedStatuses?: PlanRevisionUpdateselectedStatusesInput | string[]
    revisedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanRevisionUncheckedUpdateManyWithoutLearningPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    revisionType?: StringFieldUpdateOperationsInput | string
    selectedStatuses?: PlanRevisionUpdateselectedStatusesInput | string[]
    revisedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}